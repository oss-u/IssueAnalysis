import React from "react";
import { generateSummary, saveUserSummaries, getUserSummaries, deleteUserSummaries,
         Author, Subsummary, Comment, getUserSummaryComments } from "../endpoints";
import "../style.scss";
import { IssueComment, Summary } from "../types";
import { commentParser } from "../utils/comment_parser";
import { IconButton, Box, TabNav } from '@primer/react';
import { getCurrentUserName } from "../utils";
import { parseURLForIssueDetails } from "../utils/scraping";
import { PlusIcon, TriangleRightIcon, TrashIcon, 
          TriangleLeftIcon, Icon, PencilIcon } from '@primer/octicons-react';
import ReactMarkdown from 'react-markdown';
import TurndownService from 'turndown';
import remarkGfm from 'remark-gfm';

class SummaryComponent extends React.Component<
  { summaries: any; viewExistingSummary; viewing: string; editButtonHandler; deleteButtonHandler; },
  {}
> {
  render() {
    let summaryContent: Array<JSX.Element> = [];
    this.props.summaries.forEach((s) => {
      const uniqueAuthors = [
        ...new Set(s.comments.map((comment) => comment.author.uname)),
      ];
      if (this.props.viewing && this.props.viewing === s.id) {
        summaryContent.push(
          <div
            className="Box flex-column m-1 p-1 color-border-info"
            onClick={() => {
              this.props.viewExistingSummary(s.id);
            }}
          >
            <IconButton variant="invisible"
              size="small"
              className="btn btn-sm float-right"
              aria-label="delete-summary"
              icon={TrashIcon}
              onClick={() => {this.props.deleteButtonHandler(s.id)}} />
            <IconButton variant="invisible"
              size="small"
              className="btn btn-sm float-right"
              aria-label="edit-summary"
              icon={PencilIcon}
              onClick={this.props.editButtonHandler} />
            <div className="lh-condensed text-normal f6 m-1">
              Autogenerated summary of {s.comments.length} comment(s) by{" "}
              <span className="text-bold f6">{uniqueAuthors.join(", ")}</span>
            </div>
            <div className="m-1">
            <div dangerouslySetInnerHTML={{ __html: s.summary }} />
            </div>
          </div>
        );
      } else {
        summaryContent.push(
          <div
            className="Box flex-column m-1 p-1 color-border-info"
            onClick={() => {
              this.props.viewExistingSummary(s.id);
            }}
          >
            <div className="lh-condensed text-normal f6 m-1">
              Autogenerated summary of {s.comments.length} comment(s) by{" "}
              <span className="text-bold f6">{uniqueAuthors.join(", ")}</span>
            </div>
            <div dangerouslySetInnerHTML={{ __html: s.summary }} />
          </div>
        );
      }
    });
    return summaryContent;
  }
}

class NavigationComponent extends React.Component<
  { navbarContent: Array<IssueComment>; commentParser; doneHandler },
  { currIndex: number }
> {
  constructor(props) {
    super(props);
    this.state = {
      currIndex: 0,
    };
  }

  scrollToComment = () => {
    const commentTags = document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    );
    commentTags.forEach((tag) => {
      if (
        this.props.commentParser(tag).id ===
        this.props.navbarContent[this.state.currIndex].id
      ) {
        tag
          .closest("div.TimelineItem")
          .scrollIntoView({
            behavior: "smooth",
            block: "center",
            inline: "nearest",
          });
      }
    });
  };

  render() {
    if (!this.props.navbarContent) {
      return <></>;
    }

    const commentTags = document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    );
    this.props.navbarContent.forEach((c) => {
      commentTags.forEach((tag) => {
        if (this.props.commentParser(tag).id === c.id) {
          const tagHeader = tag.querySelector(".timeline-comment-header");
          tagHeader.setAttribute("style", "background:#6cc644");
          tag.classList.add("color-border-success-emphasis");
        }
      });
    });
    this.scrollToComment();
    return (
      <div id="navigation-component">
        <div className="clearfix">
          <div className="float-left">
            <div className="my-2 ml-2">
              {this.state.currIndex + 1} of {this.props.navbarContent.length}{" "}
              comments
            </div>
          </div>
          <div className="float-right">
            <div className="float-right my-1 mr-1">
              <button
                className="btn btn-primary btn-sm"
                onClick={() => {
                  this.props.doneHandler();
                }}
              >
                Done
              </button>
            </div>
            <div className="float-right">
              <button
                className="btn-octicon my-2"
                onClick={() => {
                  if (this.state.currIndex - 1 >= 0) {
                    this.setState({
                      currIndex: this.state.currIndex - 1,
                    });
                    this.scrollToComment();
                  }
                }}
              >
                &#12296;
              </button>
              <button
                className="btn-octicon my-2"
                onClick={() => {
                  if (
                    this.state.currIndex + 1 <
                    this.props.navbarContent.length
                  ) {
                    this.setState({
                      currIndex: this.state.currIndex + 1,
                    });
                    this.scrollToComment();
                  }
                }}
              >
                &#12297;
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

class SummaryInputComponent extends React.Component<
  {
    existingSummary: string;
    subSummaryObject: Summary;
    backButtonHandler;
    submitHandler;
  },
  {writing: boolean,
  content: string}
> {

  constructor(props) {
    super(props);
    let turndownService = new TurndownService();
    this.state = {
      writing: true,
      content: turndownService.turndown(this.props.existingSummary),      
    };
  }

  subsummaryView = () => {
    
    if (this.state.writing) {
      return (<textarea
                  className="form-control input-block textarea-vertical-resize-only"
                  aria-label="summary-input"
                  name="summary-textarea"
                  onChange={this.optimisedEditTextArea}
                >
                  
        {this.state.content}
      </textarea>)
    } else
    return (
      <div className="Box">
        <ReactMarkdown className="pt-2 pl-2" remarkPlugins={[remarkGfm]}>{this.state.content}</ReactMarkdown>
        {/* <div className="pt-2 pl-2" dangerouslySetInnerHTML={{__html: this.state.content}} /> */}
      </div>);
  }

  onEditTextArea = (event) => {
    event.persist();
    this.setState({
      content: event.target.value
    });
  };

  debounce = (f, delay) => {
    let debounceTimer;
    return function (this) {
        const context = this;
        const args = arguments;
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => f.apply(context, args), delay);
    }
  }

  // 1 second
  optimisedEditTextArea = this.debounce(this.onEditTextArea, 1000);

  render() {
    let comments = [];
    this.props.subSummaryObject.comments.forEach((e) => {
      let dateFormatting = e.author.createdOn.split(",").slice(0, 2).join(", ");
      comments.push(
        <div className="d-flex flex-row mb-1">
          <div className="Box width-full">
            <div className="Box-row Box-row--gray p-1">
              <div className="clearfix">
                <div className="col-1 float-left">
                  <img
                    className="avatar"
                    height="20"
                    width="20"
                    alt={e.author.uname}
                    src={e.author.profile}
                  />
                </div>
                <div className="col-10 float-left pl-2">
                  <h6>commented on {dateFormatting}</h6>
                </div>
              </div>
            </div>
            <div className="Box-row p-1">
              <p className="text-normal">
                  <div dangerouslySetInnerHTML={{ __html: e.text }} />
              </p>
            </div>
          </div>
        </div>
      );
    });


    // This cannot be set as HTML because it is a text area
    return (
      <div className="Box flex-column m-1 p-1 color-border-success-emphasis">
        <h5>Edit Summary</h5>
          {comments}
          <nav className="tabnav-tabs pl-1">
              <button className="tabnav-tab" 
                      role="tab" 
                      type="button"
                      aria-selected={this.state.writing?true:false}
                      onClick={()=> {
                        this.setState({
                          writing: true
                        });
                      }}>
                Write
              </button>
              <button className="tabnav-tab ml-1" 
                      role="tab" 
                      type="button"
                      aria-selected={this.state.writing?false:true}
                      onClick={()=> {
                        this.setState({
                          writing: false
                        });
                      }}>
                Preview
              </button>
          </nav>

          {this.subsummaryView()} 

          <div className="clearfix flex-row">
            <button
              className="btn btn-sm btn-primary m-1 float-right"
              type="submit"
              onClick={() => {this.props.submitHandler(this.state.content)}}
            >
              Done
            </button>
            <button
              className="btn btn-sm m-1 float-right"
              type="button"
              onClick={() => {
                this.props.backButtonHandler("comments");
              }}
            >
              Back
            </button>
          </div>
      </div>
    );
  }
}

class CommentComponent extends React.Component<
  { comments: Array<IssueComment>; actionHandler; resetSession },
  {}
> {
  constructor(props) {
    super(props);
    this.state = {
      visible: true,
    };
  }

  render() {
    let comments = [];
    let generateButtonState = this.props.comments.length ? false : true;
    this.props.comments.forEach((e) => {
      let dateFormatting = e.author.createdOn.split(",").slice(0, 2).join(", ");
      comments.push(
        <div className="d-flex flex-row mb-1">
          <div className="Box width-full">
            <div className="Box-row Box-row--gray p-1">
              <div className="clearfix">
                <div className="col-1 float-left">
                  <img
                    className="avatar"
                    height="20"
                    width="20"
                    alt={e.author.uname}
                    src={e.author.profile}
                  />
                </div>
                <div className="col-10 float-left pl-2">
                  <h6>commented on {dateFormatting}</h6>
                </div>
              </div>
            </div>
            <div className="Box-row p-1">
              <div dangerouslySetInnerHTML={{ __html: e.text }} />
            </div>
          </div>
        </div>
      );
    });
    return (
      <div className="Box flex-column m-1 ml-1 p-1 color-border-success-emphasis">
        <h5>Comments to Summarise</h5>
        {comments}
        <div className="container-lg clearfix">
          <button
            className="btn btn-sm btn-primary float-right m-1"
            onClick={() => {
              this.props.actionHandler("input");
            }}
            disabled={generateButtonState}
          >
            Generate
          </button>
          <button
            className="btn btn-sm m-1 float-right"
            type="button"
            onClick={() => {
              this.props.resetSession();
              this.props.actionHandler("summary");
            }}
          >
            Back
          </button>
        </div>
      </div>
    );
  }
}

class SubSummaryComponent extends React.Component<
  {resizePanel},
  {
    subsummaries: Array<Summary>;
    editing: string;
    visible: string;
    viewing: string;
    genSumm: string;
    arrow: Icon;
    panelState: number;
  }
> {
  
  addedComments: Array<string>;
  constructor(props) {
    super(props);
    this.addedComments = [];
    this.state = {
      subsummaries: [],
      editing: "",
      visible: "summary",
      viewing: "",
      genSumm: "",
      arrow: TriangleRightIcon,
      panelState: 1
    };
    this.loadCommentComponents = this.loadCommentComponents.bind(this);
    this.saveSummary == this.saveSummary.bind(this);
    this.getExistingUserSummaries();
  }

  getExistingUserSummaries = () => {
    let existingSubsummaries: Summary[] = [];
    const issueDetails = parseURLForIssueDetails();
    const allCommentMap = new Map<string, IssueComment>();
    document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    ).forEach(ct => {
      let parsed: IssueComment = commentParser(ct);
      allCommentMap.set(parsed.id, parsed);
    });
    getUserSummaries(issueDetails.user, issueDetails.repository, issueDetails.issueNum).then((response) => {
      response.map((s) => {
        getUserSummaryComments(issueDetails.user, issueDetails.repository, issueDetails.issueNum, s.id).then((res) => {
          let issueComments: IssueComment[] = [];
            res.comments.map((c) => {
              let auth = {
                uname: c.author,
                createdOn: c.commented_on,
                profile: "https://github.com/" + c.author,
              }
              let iComment: IssueComment = {
                id: c.id,
                tag: allCommentMap.get(c.id).tag,
                author: auth,
                text: c.text
              }
              issueComments.push(iComment);
            });
          let ess: Summary = {
            id: res.id.toString(),
            summary: res.summary,
            comments: issueComments
          }
          existingSubsummaries.push(ess);
          this.setState({
            subsummaries: existingSubsummaries
          });
        }).catch((e) => {
          console.log(e);
        })
      });
    }).catch((e) => {
      // add a toast (maybe?)
      console.log(e);
    });
  }

  addBorderHighlights = () => {
    const commentTags = document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    );
    commentTags.forEach((tag) => {
      if (
        this.addedComments.includes(tag.querySelector("a.js-timestamp")["href"])
      ) {
        if (!tag.classList.contains("color-border-success-emphasis")) {
          const tagHeader = tag.querySelector(".timeline-comment-header");
          tagHeader.setAttribute("style", "background:#6cc644");
          tag.classList.add("color-border-success-emphasis");
        }
      }
    });
  };

  // BUG BUG BUG
  // Create 2 different summaries -> Edit a summary -> Go 'Back' -> Summary gets deleted
  //

  showSpecificHighlights = (c: Array<IssueComment>) => {
    this.removeBorderHighlights();
    const commentTags = document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    );
    let commentList = [];
    if (c !== undefined)
      commentList = c.map((e) => e.id);
    commentTags.forEach((tag) => {
      if (commentList.includes(tag.querySelector("a.js-timestamp")["href"])) {
        if (!tag.classList.contains("color-border-success-emphasis")) {
          const tagHeader = tag.querySelector(".timeline-comment-header");
          tagHeader.setAttribute("style", "background:#6cc644");
          tag.classList.add("color-border-success-emphasis");
        }
      }
    });
  };

  addCommentsOnClick = (tag: Element) => {
    let newComment = commentParser(tag);
    if (!this.addedComments.includes(newComment.id)) {
      if (this.state.editing) {
        let modifiedSummary = this.state.subsummaries.findIndex(
          (e) => e.id === this.state.editing
        );
        let items = [...this.state.subsummaries];
        let item = { ...items[modifiedSummary] };
        if (!item.comments.some((e) => e.id === newComment.id)) {
          item.comments = item.comments.concat(newComment);
          items[modifiedSummary] = item;
        } else {
          item.comments.splice(
            item.comments.findIndex((e) => e.id === newComment.id),
            1
          );
          if (tag.classList.contains("color-border-success-emphasis")) {
            const tagHeader = tag.querySelector(".timeline-comment-header");
            tagHeader.removeAttribute("style");
            tag.classList.remove("color-border-success-emphasis");
          }
        }
        this.setState({
          subsummaries: items,
          visible: "comments",
        });
      } else {
        let newSummary = new Summary("", newComment);
        let tempSubsummary = this.state.subsummaries;
        tempSubsummary.push(newSummary);
        this.setState({
          subsummaries: tempSubsummary,
          editing: newSummary.id,
          visible: "comments",
        });
      }
      const tagHeader = tag.querySelector(".timeline-comment-header");
      tagHeader.setAttribute("style", "background:#6cc644");
      tag.classList.add("color-border-success-emphasis");
    } else {
      if (this.state.editing) {
        let modifiedSummary = this.state.subsummaries.findIndex(
          (e) => e.id === this.state.editing
        );
        let items = [...this.state.subsummaries];
        let item = { ...items[modifiedSummary] };
        if (item.comments.some((e) => e.id === newComment.id)) {
          item.comments.splice(
            item.comments.findIndex((e) => e.id === newComment.id),
            1
          );
          this.addedComments.splice(
            this.addedComments.findIndex((e) => e === newComment.id),
            1
          );
          if (tag.classList.contains("color-border-success-emphasis")) {
            const tagHeader = tag.querySelector(".timeline-comment-header");
            tagHeader.removeAttribute("style");
            tag.classList.remove("color-border-success-emphasis");
          }
        }
        this.setState({
          subsummaries: items,
          visible: "comments",
        });
      }
    }
  };

  addCommentsToSummary = () => {
    const commentTags = document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    );
    commentTags.forEach((tag) => {
      if (tag.getAttribute("listener") !== "true") {
        tag.addEventListener("click", () => {
          this.addCommentsOnClick(tag);
        });
        tag.setAttribute("listener", "true");
      }
    });
  };

  concatCommentsOfSubsummary = () => {
    // get the subsummary from the editing state
    let modifiedSummary = this.state.subsummaries.findIndex(
      (e) => e.id === this.state.editing
    );
    let items = [...this.state.subsummaries];
    let item = { ...items[modifiedSummary] };
    let concatComments = "";
    // merge all the summaries in concatComments
    for (let i = 0; i < item.comments.length; i++) {
      concatComments = concatComments.concat(item.comments[i].text, ' ');
    }
    concatComments = concatComments.trim();
    return concatComments;
  };

  exitNavBar = () => {
    this.setState({
      viewing: "",
    });
  };

  editExistingSummary = () => {
    this.resetBorderHighlights();
    this.setState({
      editing: this.state.viewing,
      viewing: "",
      visible: "input",
    });
  };

  deleteExistingSummary = (id: number) => {
    let deleteIndex;
    this.state.subsummaries.forEach((ss, index) => {
      if (ss.id === id.toString()) {
        deleteIndex = index;
      }
    })
    this.state.subsummaries.splice(deleteIndex, 1);

    const issueDetails = parseURLForIssueDetails();
    deleteUserSummaries(issueDetails.user, issueDetails.repository, issueDetails.issueNum, id).then((response) => {
      console.log("Item deleted:");
      console.log(response);
    }).catch((e) => {
      console.log(e);
    });
  }

  viewExistingSummary = (id: string) => {
    this.setState({
      viewing: id,
    });
    let currentSummary = this.state.subsummaries.findIndex((e) => e.id === id);
    let items = [...this.state.subsummaries];
    let item = { ...items[currentSummary] };
    this.showSpecificHighlights(item.comments);
  };

  loadCommentComponents = () => {
    let t = [];
    this.state.subsummaries.forEach((value, index) => {
      if (value.id === this.state.editing) {
        t.push(
          <CommentComponent
            key={index}
            comments={value.comments}
            actionHandler={this.toggleSummaryBoxComponent}
            resetSession={this.resetSession}
          />
        );
      }
    });
    return t;
  };

  loadSummaryComponent = () => {
    if (this.state.subsummaries.length) {
      const summaries = [...this.state.subsummaries];
      if (summaries.length > 0) {
        return (
          <SummaryComponent
            summaries={summaries}
            viewExistingSummary={this.viewExistingSummary}
            viewing={this.state.viewing}
            editButtonHandler={this.editExistingSummary}
            deleteButtonHandler={this.deleteExistingSummary}
          />
        );
      }
    }
    return (
      <div className="blankslate">
        <p>Click on the '+' icon to add comments and create a summary.</p>
      </div>
    );
  };

  loadSummaryInputComponent = () => {
    let concatenatedComments = this.concatCommentsOfSubsummary();
    if (!this.state.genSumm) {
      generateSummary(concatenatedComments).then((summaryRes) => this.setState({
        genSumm: summaryRes.summary
      }));
    }

    let editingSubsummary;
    this.state.subsummaries.forEach((value, index) => {
      if (value.id === this.state.editing) {
        editingSubsummary = value;
      }
    });
    if (this.state.genSumm) {
      // Also check if the number of elements have changed
      return (
        <SummaryInputComponent
          existingSummary={this.state.genSumm}
          subSummaryObject={editingSubsummary}
          backButtonHandler={this.toggleSummaryBoxComponent}
          submitHandler={this.saveSummary}
        />
      );
    } else {
      return (
        <div className="Label m-3">
          <span >Loading</span>
          <span className="AnimatedEllipsis"></span>
        </div>
      );
    }
  };

  loadViewBasedOnState = () => {
    if (this.state.visible === "summary") {
      return this.loadSummaryComponent();
    } else if (this.state.visible === "input") {
      return this.loadSummaryInputComponent();
    } else if (this.state.visible === "comments") {
      return this.loadCommentComponents();
    }
  };

  removeBorderHighlights = () => {
    const commentTags = document.querySelectorAll(
      "div.timeline-comment.unminimized-comment"
    );

    commentTags.forEach((tag) => {
      if (tag.classList.contains("color-border-success-emphasis")) {
        const tagHeader = tag.querySelector(".timeline-comment-header");    
        tagHeader.removeAttribute("style");
        tag.classList.remove("color-border-success-emphasis");
      }
    });
  };

  resetBorderHighlights = () => {
    this.removeBorderHighlights();
    this.addBorderHighlights();
  };

  resetSession = () => {
    let modifiedSummary = this.state.subsummaries.findIndex(
      (e) => e.id === this.state.editing
    );
    this.state.subsummaries.splice(modifiedSummary, 1);
    let oldState = this.state.subsummaries;
    this.setState({
      subsummaries: oldState,
      editing: "",
    });

    // this.resetBorderHighlights();
  };

  saveSummary = (summary: string) => {
    console.log(summary);
    // summary.preventDefault();
    // make an API call and submit the form
    // response is summary
    let liUser: string = getCurrentUserName();
    let author: Author = {
      "user_id": liUser,
      "link": "https://github.com/" + liUser
    
    }
    
    let storedSummary = this.state.genSumm; // API response

    let modifiedSummary = this.state.subsummaries.findIndex(
      (e) => e.id === this.state.editing
    );
    let items = [...this.state.subsummaries];
    let item = { ...items[modifiedSummary] };

    item.summary = storedSummary;
    items[modifiedSummary] = item;
    
    let comments: Comment[] = [];
    item.comments.forEach((c) => {
      let comment: Comment = {
        id: c.id,
        text: c.text,
        author: c.author.uname,
        commented_on: new Date(c.author.createdOn).toISOString()
      }
      comments.push(comment);
      this.addedComments.push(c.id);
    });

    const subsummaries: Subsummary = {
      summary: this.state.genSumm,
      author: author,
      comments: comments
    }

    const issueDetails = parseURLForIssueDetails();
    // saveUserSummaries(issueDetails.user, issueDetails.repository, issueDetails.issueNum, subsummaries).then((response) => {
    //   // Nothing to do, its already saved
    //   console.log(response);
    // }).catch((e) => {
    //   // Might want to move this to a Toast
    //   console.log("Error in saving the summary.");
    //   console.log(e);
    // });

    this.setState({
      subsummaries: items,
      visible: "summary",
      editing: "",
      genSumm: "",
    });
    this.resetBorderHighlights();
  };

  toggleSummaryBoxComponent = (visiblePanel: string) => {
    this.setState({
      visible: visiblePanel,
    });
  };

  toggleArrow = () => {
    if (this.state.arrow === TriangleLeftIcon) {
      return TriangleRightIcon;
    } else {
      return TriangleLeftIcon;
    }
  }

  render() {
    let navbarContent;
    if (
      (this.state.editing || this.state.viewing) &&
      this.state.visible === "summary"
    ) {
      this.state.subsummaries.forEach((ss) => {
        if (ss.id === this.state.viewing) {
          navbarContent = ss.comments;
        }
      });
    }

    return (
      <div id="sub-summary" className="Box" >
        <div className="Box-header">
          <div className="clearfix">
            <div className="float-left">
              <h2 className="Box-title p-1">User Summaries</h2>
            </div>
            <div className="float-right">
              <div className="float-right d-inline-flex">
              <IconButton aria-label="add" 
                size="medium" icon={PlusIcon} 
                className="btn btn-sm btn-primary m-0 ml-2 ml-md-2"
                onClick={this.addCommentsToSummary}/>
                <IconButton aria-label="add" 
                size="medium" icon={this.state.arrow} 
                className="btn btn-sm btn-primary m-0 ml-2 ml-md-2"
                onClick={() => {
                  this.props.resizePanel(this.state.panelState);
                  this.setState({
                    panelState: 1-this.state.panelState,
                    arrow: this.toggleArrow()
                  });
                  }}/>
              </div>
            </div>
          </div>
        </div>
        <div id="summary-component" className="sub-scroll">{this.loadViewBasedOnState()}</div>
        <NavigationComponent navbarContent={navbarContent} commentParser={commentParser} doneHandler={this.exitNavBar} />
      </div>
    );
  }
}

export default SubSummaryComponent;
