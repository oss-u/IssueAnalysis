 CODELCODEL. This notebook is run Windows 10 OS. I have exhausted every solution out there, and none of it works. Hi Srikanth Kb sorry for this inconvenience. This is the same issue as described here LINKLINK, but it sounds like you might be at more liberty to share information which may prove useful. Could you please provide the following. Is the user running the notebook server presumably CODESCODES a member of the Windows CODESCODES group? Any additional information about the file CODESCODES would be helpful. CODESCODES, CODESCODES whatever filesystem stat information you can provide about the file. A screen shot or equivalent of the CODESCODES tab via the Windows explorer relative to that file? I'm beginning to wonder if the step that secures the file using Windows privs is side affecting things when the user is not in Administrators by replacing the CREATOR OWNER ACE when constructing a new ACL. As many details as you can provide regarding the file would be much appreciated. Thank you. Hi, Yes, the issue is similar or same to the one described. I did check that one too, and it seems they did face the same problem. However, here are the answers to your queries: The user running the notebook server srikanth is the member of Windows Administrators group. Unfortunately, I did removed all of the jupyter and other dependencies, including the files in path. But, the permissions of those files were the same as any other files on the path. It had all read, write. and execute permissions. Also, I don't have the screenshot saved from before. But, the folders AppData, Roaming, jupyter, runtime, and the kernel. json file were are hidden folders files. Let me know, if I could be of any help. Thank youIs this running inside a WSL windows bash enviroment or native windows? If the former try the suggestions on the thread kevin bates posted. This is running inside a WSL windows bash environment. Before I could try the suggestions on the thread that kevin bates posted, I had a quick reset of jupyter and its depending modules. That solved the error for me. I believe we previously had a fallback with a warning when failing to make files private, which has happened pretty often on Windows, which has complicated permissions scenarios. Adding a similar fallback is perhaps appropriate. Hi, I just created today a new kernel in Windows native not WSL and all my notebooks stopped working with the Error 13 Access Denied. CODELCODEL. After that i checked with dir the mode permissions: CODELCODEL. with get acl i listed the acl for the current folder and also for the specific folder which i use: CODELCODEL. my user mike is in the local administrator group, but i start the notebook always as user never as administrator. Additionally i create with the following script my virtual environments: CODELCODEL. So it shouldnt be possible that i created a virtual env somehow that could destroy the system. Any input on what else i can check to remove this error would be helpful. Thanks for the great information snapo! Since CODESCODES is not viewable via CODESCODES as user CODESCODES I suspect CODESCODES runs with higher privs, this implies that the update in jupyter client 5.3 isn't configuring the file for the user correctly. Does CODESCODES appear in the ACL at all following the. Can we assume the files that do appear via CODESCODES were created prior to the update of CODESCODES? Although the zero length file on 9 27 is odd. I also assume that an admin running CODESCODES could see CODESCODES is that correct? Hi kevin bates, No all have the same permission, i just cut it out as all have the same permission forgot to add points everything was run as user. But as wished here is the full output: CODELCODEL. sorry for the confusion. To proof that i didnt open powershell as admin, thats the output of my powershell without admin: CODELCODEL. That would be the output of my powershell if i did open it as admin: CODELCODEL Thanks, and just for completeness. relative to CODESCODES please. Yes sir it does. CODELCODEL. I have to add. this started after i created the last virtualenv for my next project. I used the same script i used always before. And it happens on all Kernels currently. without a known change from my side. as i never touch the appdata folder. That's the Creator Owner. I expected to see CODESCODES buried in the ACL with just READ WRITE access per this code: LINKLINK hmm there is something really strange on the permissions: LINKLINK. Other kernels seem to have the right permission, but still dont work. LINKLINK. Can i delete all kernels and they get auto re generated? These kernel files are the connection information zmq ports to each kernel. Their existence implies they are associated with running kernels. If you know no kernels are running, they can be deleted, but if you need to still support active kernels, I'd hold off. For the ones that have human readable text and not the SID, were they created before your update of jupyter client which may have been implicit with a windows update although I'm not familiar with jupyter deployments on Windows? kevin bates its happening on my home pc, and i am responsible only at the company i work for for the software deployment ; As i already did multiple restarts and i dont care about the running kernels, i will delete them and give feedback on what is generated then. Give feedback in a few minutesRight on. I suspect we may need to update the CODESCODES to CODESCODES and ask for the samCompatible name which should return CODESCODES: LINKLINK. Although if you're at home is the LDAP at your company and you're using a VPN? That might complicate things. So i deleted the content of the runtime folder. same error with all kernels i open: CODELCODEL. it created 4 files for the kernel i did try to start: LINKLINK. What i would like to know is where this sid comes from, i cant remember that SID from mind. and i also didnt change my user account or my own user accounts SID. So this SID had existed once on my system or is wrong from another place. I did try to read my SID i login with the windows live ID. CODELCODEL. looking now for a powershellish way to get my SID as i still dont know where the SID comes from. It is my private pc, no vpn. its my gaming and private development workstation. found it: LINKLINK. but what i still dont know is what the heck is this sid in the permissions: and from where does that come from. i start reviewing the ACL code you linked to. I am getting a bit closer ;. LINKLINK. The unknown SID is somehow generated by the user lookup of the win32api. GetUserName. Uh misscopy ; but still correct it comes from the win32security. LookupAccountName. I am checking if there was a change lately. Just out of curiosity can you change the call from CODESCODES to CODESCODES? Not sure that will even run, but it looks correct. Maybe im wrong. but whats the reason for using the win32api win32security to lookup the account name? All Windows systems have it in the environment variable per default domain joined and workgroup pc's. LINKLINK. Would it not be better to use the standard os library if possible? Will do your curiousity request ;. LINKLINK. The SID is required to set the proper security. Just not sure we're getting the correct SID. Of the SIDs that are scratched out in the blue screen, which one if any matches the SID displayed in this comment: LINKLINK? cc: MSeal the correct SID would be: S thumbs down 5 21 thumbs down 719644623 thumbs down 720000185 84389473 thumbs down 001. your change does correct it. can i change that somehow local? without building jupyter notebook from scratch? just to test if it is just because of the wrong sid in the variable. of if there is really a SID permission issueYou should be able to go into where that package is installed and change the CODESCODES file and restart Notebook. If that's proves problematic, I can build you a wheel file that contains the change. Did you need to import or adjust anything to get the GetUserNameEx parameter to run correctly? i imported the following: import os. import win32api. import win32security. import ntsecuritycon as con. but i dont know yet if os is required. i can do quick test what libs are required. to set the 3 variables without the ACL part you require the following imports: import win32api. import win32securityOk cool, so no additional imports in our code. Also, do you know which principal the SID in the comment I reference corresponds to? That might be helpful information if it's like CODESCODES or something like that. CODELCODEL. Hmm interesting. It's like the SID in the comment is the prefix with the 3 or 4 digit suffix missing. Been too long to know what that's about. trying currently to figure out where the file files are located on a default installation ; It should be logged in the console, similar to this: CODESCODES ah now i understand it is in my virtualenv. so i have to adjust all of them. but there is a compiled pyc for connect. will it recompile? it if i change the connect. py? LINKLINK. Yeah, I think so. I usually delete the. pyc file that corresponds to the one I'm changing just to be sure. You just need to be sure to only change the connect. py in jupyter client. Don't worry about the others. Changed the file, deleted the kernels again, deleted the precompiled pyc. somehow still the same error and the wrong sid. Additionally what i dont understand this should have affected only my new virtualenv in theory why are all virtualenvs affect. Thats kinda strange. But for today i have to put in a stop its already 2am here and my wife gets angry: Will try tomorrow more, otherwise i do a full re install. I have to figure out which connect. py is really used and from which virtualenv and if there is something else that is preventing a successful request of the SID. Will deliver tomorrow more insights ; Thank you already very much for you indepth help snapo thank you so much for your help! This information has been useful. Others that have access to Windows systems may be able to look into this deeper as well I don't have such access unfortunately. Sorry for taking your time. Its just that its difficult to get good diagnostic information so I tried to gather what I thought might be helpful thank you again! Have a great weekend! kevin bates absolutely no problem i like to help as im also using the product and i like it quite a lot. I additionally learned a lot more about jupyters notebook and also the standard virtualenv from python ;. Finally i found which file is responsible and from where to where connections and requests are going. First of all your proposal of: CODELCODEL. Does fix it for me. Windows users can fix it easily with the following steps: CODELCODEL. What i am not so happy about is the data structure and paths used on Windows: Thank you very much again for your absolutely great work in supporting jupyter notebook. I would never have been able to find that out by my own. Finally i can go forward working with my notebooks: Virtualenvs get the recompiled pyc files from python directly ; thats why i was a bit off the shoes in understanding that. This is absolutely fantastic news snapo! Couple things. When you now look at the file via the Windows explorer, do you see the previous unresolved SID entry as being resolved for example, human readable? Heya kevin bates, Yes now the SID resolves to the correct one and yes it is human readable as it can now be resolved. LINKLINK. Regarding this part that would be my first PR for a public project ; have to first read on the guidelines on how to do that properly. Personally im not about getting points and its only 1 line change. So if you like you can catch it. What i can not do is test it if it is still working on all Windows OS versions backtest, corporate domain joined pc's work too as i tested it in the company i work with too. There fore i cant gurantee it will fix all error 13's but mine is working and also that i tested it on a corporate ad joined pc, and on a workgroup joined pc without a windows live id. Best regards. MikeThanks so much for helping dive into this issue snapo and kevin bates! The the change of CODESCODES vs CODESCODES do we know if there's situations where the new pattern might cause unexpected issues? I'm not super familiar with the differences in those two APIs and the docs don't provide much info. From what I can read this looks like the correct change to make. I think separately I need to look into the bash on windows issue where jupyter has been initialized outside of the linux subsystem. I think given much many little issues that are coming up with the windows permissions let's do the PR against LINKLINK and I can help make PRs to jupyter client and jupyter server to use the new core function. MSeal I suspect this change should be sufficient on bash on windows but hoping you can perform the same testing you did to derive the change in the first place. I think directing this change to jupyter core is the right approach then we can get 4.0 out, so I'll post a PR there shortly. snapo what is your email address associated to your github so I can make you a co author? If you choose to keep your email private, I think I can use a 'no reply' email to associate to the co author tag. EDIT: Actually, it looks like you'd need to configure a no reply email account and let me know its value as described LINKLINK. kevin bates eply. github. com is the mail i generated no reply mail best regardsSubmitted PR to jupyter core: LINKLINK. snapo thank you again for all of your help! MSeal please perform your testing magic with this update. Let me know if you need assistance in moving things around updating references in jupyter client or jupyter server. I'll do some testing with my windows setup in a few ways. I'll post testing results to the PR directly. If you open the PR to jupyter client and I can get that one merged and released as soon as core releases. Otherwise I can make the PR and have you approve it thumbs up. For jupyter sever someone else will need to merge but I can open or thumbs up a PR. MSeal I'll be happy to open a PR to jupyter client once you've confirmed expected behavior in core. I have the commit on my fork ready to go. For jupyter server, I'm inclined to open a PR that uses the code in jupyter core instead and requires 4. then jupyter server is done relative to the CODESCODES change. We'd still need to make a similar change in jupyter client, but I agree that, right now, jupyter client will require a 5.4 release so existing users can easily get a fix. Yep. Sounds right to me. I'll do testing this afternoon. result await result. yielded self. gen. throw exc info type: ignore. type mtype. yielded self. gen. throw exc info type: ignore. kernel id yield self. start kernel for session session id, path, name, type, kernel name. yielded self. gen. throw exc info type: ignore. self. kernel manager. start kernel path kernel path, kernel name kernel name. yielded next result. super MappingKernelManager, self. start kernel kwargs. km. start kernel kwargs. kernel name self. kernel name. with secure write fname as f: return next self. gen. with os. fdopen os. open fname, open flag, 0o600, mode as f: The same. I uninstall and reinstall jupyter, only to see the same prompt again. Is this an update bug? I never see this beforeSolution till the PR is merged to master: CODELCODEL. Does fix it for me. Windows users can fix it easily with the following steps: CODELCODEL. Please could do you say how did that? I have the same issue. Thanks in advance snapo now that jupyter client and jupyter core releases have been made available and contain the fix for this issue, would you mind trying the following. CODESCODES this should replace your modified jupyter client package with release CODESCODES and install the updated version of CODESCODES CODESCODES. If you find that jupyter core is NOT 4.0 please try CODESCODES. you'll also notice that the change you made in jupyter client is not present as it is now located in jupyter core. I will be updating the Notebook dependencies to these versions, but thought it might be a good idea to check this out somewhere and, well, you've been extremely helpful in this effort. smile: kevin bates yes sure. will do the test today evening, will get back asap with the results: kevin bates I have the same issue when running Jupyter via Anaconda. I updated the jupyter client to 5.4 and the jupyter core to 4. I got the same error result. I then updated the lines of code as per snapo instructions higher and it did work. I have an environment and found the paths in the environment directories: CODELCODEL. alexbaharov I think we should verify your files are indeed updated. When you upgrade jupyter client to 5.4 you should NOT find an implementation of CODESCODES in CODESCODES. Instead you should only show an import statement to jupyter core. You should find the CODESCODES implementation, along with the win32 specific method, in jupyter core's CODESCODES file. If those files are confirmed, can you please restart your notebook server and try again? Can you provide the console output relative to the issue you're seeing? If things reproduce again Hi kevin bates. I started with the update and it also updated jupyter core 4.6 so far so good, see screenshot. LINKLINK. Created a testproject001. LINKLINK. and starting then jupyter with via powershell as user and also did open then the virtual kernel of this project: LINKLINK. so far no kernel errors: LINKLINK. saving and editing the workbook and play it works like a charm. lets look at the file permissions: LINKLINK. from my point the issue seems fixed. i cant speak about anaconda as i dont like anaconda for managing virtualenvs. maybe some one else has more expirience with anaconda ; i only use the module virtualenv to create my environments. Hope this helps a bit. Attached what i have in my base env: CODELCODEL snapo thank you so much yet again! alexbaharov I wonder if you're hitting the pywin32 225 issue that exists on conda? That said, I don't know why updating the code would work for you unless in the process of reverting the modules, you also reverted pywin32 to 224. Because snapo was successful and MSeal did testing as well I think I'm going to move forward with the library dependency updates in Notebook. We can continue to use this issue to understand alexbaharov's issue, if that works for others. You might try performing the updates and ensuring you're running pywin32 224. Hi, could you help me, please? I read that these steps are working: Thank you very much! Hi Vermilion69. As of last week, those steps aren't necessary provided you have jupyter client 5.4 and jupyter core 4.0 installed. Right around this same time, Windows issues were exacerbated with a conda related snafu with the 225 build of CODESCODES. Please ensure the versions of jupyter client and jupyter core are correct, check the version of pywin32 and restart your Notebook server. If you reproduce the issue, we should probably confirm it's the same instance of this issue there are several surrounding this area of code lately so providing the console update of the traceback would be helpful. I would also recommend you add the CODESCODES flag when restarting your Notebook server so we get as much information as possible. If things are getting too tight for your project tomorrow, I suspect you'll find downgrading jupyter client to 5.1 to be a workaround, but just keep in mind that your connection files and some others are not as secure as they should be thus the scramble to get these pieces fixed up. I had the same issue, reinstalled Anaconda but it was not working. The solution that worked for me was extremely simple. I ran Anaconda + Jupyter as administrator and it was solved. I think this issue should be closed at this point. Srikanth Kb, lresende, or whomever else has permissions could you please close this issue? kevin bates, you now have triage permission to be able to manage issues. Congratulations and thanks! thumbs up Thank you jasongrout this is much appreciated. Since it looks like I can now apply labels. Given their rich descriptions, I'm hoping that is something that will improve supportability and, ideally, generate contributions. Would that be okay to apply? Absolutely! We trust your judgement go for it if you think it will help. Closing issue based on recent successes. Using the latest versions of jupyter client 5.4 and jupyter core 4.1 should be attempted prior to opening a new issue. Thank you. kevin bates There seems to be a typo in the closing comment, shouldn't it be jupyter core 4. Thanks tovrstra. At the time I typed that, 4.1 had just been delivered so.1 was intentional. I don't know if the change in 4.1 is applicable to this instance of the issue, but was just being complete. Traceback most recent call last: result await result. yielded self. gen. throw exc info type: ignore. type mtype. yielded self. gen. throw exc info type: ignore. kernel id yield self. start kernel for session session id, path, name, type, kernel name. yielded self. gen. throw exc info type: ignore. self. kernel manager. start kernel path kernel path, kernel name kernel name. yielded next result. super MappingKernelManager, self. start kernel kwargs. km. start kernel kwargs. kernel name self. kernel name. with secure write fname as f: return next self. gen. with os. fdopen os. open fname, open flag, 0o600, mode as f: Please start with LINKLINK. If you still have issues please provide the updated traceback information. perfect! You are a genius! im facing the same problem and im completely new to these types of error. can someone help me with a detailed solution to this problem cause i cant understand the upper mentioned solutions. any help would be appreciated a lot parva jain Your CODESCODES or CODESCODES directories are likely permissioned as an administrator due to installing something in admin mode at some point. A few things you can do here are, A make sure your CODESCODES directory and parent directories have open permissions for your CODESCODES user, B delete the CODESCODES folder and let it be rehydrated by jupyter processes this may require option C as well, and C uninstall jupyter and reinstall the dependencies listed above. If those fail, try running the same reinstallations as an administrator you can right click on on the processes you're launching and select run as administrator, including CLI prompts. I had the same Permission Error for kernel and by updating jupyter client and jupyter core it solved my problem. Thank you kevin bates Just want to share my very wired experience on my corporate PC where the admin profile is not an option for me. I enabled Extension Manager try to install enable toc and the build fails and I uninstall it and then give me the same permission denied error showing on this post, did this back and forth a couple times, the kernel now is usable, but I cannot have any extension properly installed. I have the issue; use administrator options when you open the tool. There's a new flag now with jupyter core 4. where if you set the environment variable CODESCODES to CODESCODES or CODESCODES it will disable the secure write checks. You'll get a warning instead of an error for permission issues. This isn't recommended by default, and it's better if you have jupyter shared files in a folder where you can control permissions kernel hijacking is possible with this information saved there, but if you have no control and the mounted OS has no permission settings available the env variable should opt you back to the pre secure write behavior. JUST CLOSE THE FILE IN CASE YOU OPENED IT. THE ERROR DISAPPEARS ITSELF JUST CLOSE THE FILE IN CASE IT IS OPENED IN THE BACKGROUND. THE ERROR DISAPPEARS ITSELF Hi, everyone! The same issue: Traceback most recent call last: result await result. yielded self. gen. throw exc info type: ignore. type mtype. yielded self. gen. throw exc info type: ignore. kernel id yield self. start kernel for session session id, path, name, type, kernel name. yielded self. gen. throw exc info type: ignore. self. kernel manager. start kernel path kernel path, kernel name kernel name. yielded next result. super MappingKernelManager, self. start kernel kwargs. km. start kernel kwargs. kernel name self. kernel name. with secure write fname as f: return next self. gen. with os. fdopen os. open fname, open flag, 0o600, mode as f: The problem is following: my jupyter worked correctly before one happy day actually, I don't know, what went wrong. It is clear, that the problem with permission and jupyter works if I try to launch it as Admininstrator, but how to fix this problem? I'd like to launch jupyter without any admininstrator permissions. Thank you in advance! IVN tone Likely the CODESCODES or CODESCODES folders are owned by the administrator user. As an admin delete those folders or change them to your user as the owner and it should clear up. MSeal thank you for advice, but neither changing the rights nor deleting all the files inside the folder helped One of the solutions of this problem is downgrading to: CODESCODES. So, what I actually did:1 Launch jupyer notebook as Admin.2 execute CODESCODES and then.3 restart jupyter as I ususally did without any additional Admin rights. Maybe somebody knows how to fix this problem by any other normal way? If downgrading works, then CODESCODES env variable should also work. All that changed was a check that your permissions are actually being set for secret files. The ways this can fail to write is A your filesystem is mounted on a system that doesn't support full permissioning for example some docker setups or network harddrive protocols, or B your directory path is owned or restricted by the Admistrator root somewhere up the line of directories, preventing your user from assigning permissions. Hi there Open Jupyter Run as Administrator the simplest solution on this topic is to run anaconda prompt as administrator. LINKLINK.