 CODELCODEL. When trying to run a t SNE. CODELCODEL. However. CODELCODEL. Full Stack Trace: CODELCODEL. Same with 'Scikit Learn', '0 [CLS] [SEP] 18 [CLS] [SEP] dev0'. Do you mind sharing your data X with me [CLS] [SEP] Sure, where and in what format would you like it [CLS] [SEP] My email is. As i know, there is a function numpy [CLS] [SEP] save for saving an array to a binary file in [CLS] [SEP] npy format. I test your data in ubuntu 14 [CLS] [SEP] 04 LTS with. Python 2 [CLS] [SEP] 6. scikit learn 0 [CLS] [SEP] 17 [CLS] [SEP] 1. numpy 1 [CLS] [SEP] 2. scipy 0 [CLS] [SEP] 13 [CLS] [SEP] 3. It is fine and doesn't raise the ValueError [CLS] [SEP] The test code is: import numpy. a numpy [CLS] [SEP] load ' root test [CLS] [SEP] npy'. print a [CLS] [SEP] shape. from sklearn [CLS] [SEP] manifold import TSNE. print proj. Then i upgrade numpy, scipy to 1 [CLS] [SEP] 11 [CLS] [SEP] 0 [CLS] [SEP] 17 [CLS] [SEP] 0 and test with the same code and it also doesn't raise any error [CLS] [SEP] Reproduced for 3 [CLS] [SEP] 5 with anaconda under OS X El Capitan [CLS] [SEP] CODELCODEL. Example run: CODELCODEL. Thanks ivan krukov, but I'm failing to replicate in Python 3 [CLS] [SEP] Will try 3 [CLS] [SEP] 5. This does not apply to CODESCODES 4 [CLS] [SEP] 0 21, Ubuntu 16 [CLS] [SEP] 04 with the same packages under 3 [CLS] [SEP] I'm on El Capitan, but I'm failing to get a Python 3 [CLS] [SEP] 5 installation up and running [CLS] [SEP] Is there any update on this [CLS] [SEP] I have the issue on a dataset of mine, on Anaconda, Py 3 [CLS] [SEP] sklearn 0 [CLS] [SEP] 17 [CLS] [SEP] OSX El Capitan [CLS] [SEP] I can reproduce the error with the example provided by ivan krukov [CLS] [SEP] Same issue [CLS] [SEP] Python 2 [CLS] [SEP] 6 on OS X El Capitan on 0 [CLS] [SEP] 17 [CLS] [SEP] Tried the same code on Linux using Python 2 [CLS] [SEP] 6 and 0 [CLS] [SEP] 17, and it works [CLS] [SEP] Same issue [CLS] [SEP] OSX El Capitan Python 3 [CLS] [SEP] 1. scikit learn 0 [CLS] [SEP] 17 [CLS] [SEP] 1. scipy 0 [CLS] [SEP] 17 [CLS] [SEP] 1. I have the same problem and would really appreciate a fix or workaround [CLS] [SEP] System Version: OS X 10 [CLS] [SEP] 11 [CLS] [SEP] 5. Python 3 [CLS] [SEP] 1: Anaconda 4 [CLS] [SEP] 0 x86 64. numpy [CLS] [SEP] version [CLS] [SEP] version 1 [CLS] [SEP] 11 [CLS] [SEP] 0. scipy [CLS] [SEP] version 0 [CLS] [SEP] 17 [CLS] [SEP] 1. sklearn [CLS] [SEP] version 0 [CLS] [SEP] 17 [CLS] [SEP] 1. I can also reproduce the bug with the code sample from ivan krukov. Same issue on OS X EI Capitan using Python 3 [CLS] [SEP] 5. System Version: OS X 10 [CLS] [SEP] 11 [CLS] [SEP] 5. Python 3 [CLS] [SEP] 1: Continuum Analytics, Inc [CLS] [SEP] numpy [CLS] [SEP] version 1 [CLS] [SEP] 11 [CLS] [SEP] 1. scipy [CLS] [SEP] version 0 [CLS] [SEP] 16 [CLS] [SEP] 0. sklearn [CLS] [SEP] version 0 [CLS] [SEP] 17 [CLS] [SEP] 1. Same problem [CLS] [SEP] Though I have noticed that it only occurs for a subset of my dataset and not with the whole thing [CLS] [SEP] That is, if I do TSNE on the whole data set it works, if I do it on a reduced set it does not [CLS] [SEP] O o;; This just in, if I repeat the same 'broken' subset that doesn't work by means of list 10 then it works [CLS] [SEP] Multiplying each individual vector by 10 doesn't work, but duplicating the date does [CLS] [SEP] just doubling the length of the list is insufficient [CLS] [SEP] Maybe this is some kind of degrees of freedom check run amok [CLS] [SEP] ivan krukov I bit the bullet today and installed an El Capitan VM [CLS] [SEP] Unfortunately I can not reproduce your problem [CLS] [SEP] Concomitant can you reproduce the error on the stand alone example given in LINKLINK [CLS] [SEP] jnothman it doesn't seem to be happening only on Python 3 [CLS] [SEP] 5 so if you could try to reproduce with Python 2 [CLS] [SEP] 7 snippet: LINKLINK that would be great [CLS] [SEP] lesteve I can reproduce the issue [CLS] [SEP] CODELCODEL. Following the same code, however: CODELCODEL. Bizarre [CLS] [SEP] I cannot reproduce either with python 3 [CLS] [SEP] 1, numpy 1 [CLS] [SEP] 11 [CLS] [SEP] scipy 0 [CLS] [SEP] 17 [CLS] [SEP] 1 and scikit learn 0 [CLS] [SEP] 17 [CLS] [SEP] 1 from miniconda with MKL on a virtualbox with OSX El Capitan [CLS] [SEP] I will try on a real mac hardware later [CLS] [SEP] Also joelkuiper and Concomitant can you please check that you can reproduce the problem on the current state of the scikit learn master branch [CLS] [SEP] lesteve and others I cannot reproduce the error with the LINKLINK on the latest master with python 2 [CLS] [SEP] System info: CODELCODEL. I tried again on a real mac running OSX El Capitan 10 [CLS] [SEP] 11 [CLS] [SEP] 3 with anaconda's latest numpy scipy and scikit learn, same setting as reported by Concomitant in LINKLINK but could not reproduce the problem either tried running the snippet several times [CLS] [SEP] What is weird though it that the despite the CODESCODES line I get different results for the output of CODESCODES [CLS] [SEP] This might be a bug in itself [CLS] [SEP] Actually I read Concomitant's code snippet too quickly: instead of CODESCODES it should be CODESCODES otherwise the numpy RNG is not reseeded appropriately and one cannot get deterministic results [CLS] [SEP] Also I now realized that I read the whole discussion too quickly and that the bug only happens with python 2 [CLS] [SEP] Will try again [CLS] [SEP] I cannot reproduce either with python 2 [CLS] [SEP] 12 from conda on OSX 10 [CLS] [SEP] 11 [CLS] [SEP] 3 either [CLS] [SEP] Actually Ekliptor can reproduce the issue with python 3 [CLS] [SEP] 1 from conda so it's probably not related to the version of Python either [CLS] [SEP] Maybe it depends on the minor version of OSX [CLS] [SEP] Will upgrade and retry [CLS] [SEP] I cannot replicate either with OSX 10 [CLS] [SEP] 11 [CLS] [SEP] I tried both with Python 2 [CLS] [SEP] 12 and 3 [CLS] [SEP] 2 installed with conda along with numpy 1 [CLS] [SEP] 11 [CLS] [SEP] scipy 0 [CLS] [SEP] 17 [CLS] [SEP] 1 and scikit learn 0 [CLS] [SEP] 17 [CLS] [SEP] I don't know what to do [CLS] [SEP] If one of you can reproduce the problem, please try to find a numpy random seed that trigger the issue using CODESCODES instead of CODESCODES in the above snippet and communicate the value here along with the version of OSX and you python packages [CLS] [SEP] I can confirm the issue is fixed with the latest version [CLS] [SEP] I can not reproduce it anymore as before [CLS] [SEP] I only updated numpy: numpy [CLS] [SEP] version [CLS] [SEP] version 1 [CLS] [SEP] 11 [CLS] [SEP] 1. To all people working with Tensorflow I can add: Thanks Ekliptor for checking that it works with scikit learn master [CLS] [SEP] joelkuiper and Concomitant do you confirm that scikit learn master also work for you [CLS] [SEP] If so we can close this issue [CLS] [SEP] I installed master, the code snippet runs cleanly now [CLS] [SEP] seems to work for everybody now [CLS] [SEP] closing [CLS] [SEP] Sorry, but I still get this on Python 3 [CLS] [SEP] 1, scikit 0 [CLS] [SEP] 17, scikit learn 0 [CLS] [SEP] 18 commit 9e913c04d748, and Numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 1 on Mac OS 10 [CLS] [SEP] 11 [CLS] [SEP] dmyersturnbull do you get the error when running the snippet from LINKLINK [CLS] [SEP] lesteve I did with that exact snippet, yes [CLS] [SEP] However, I no longer get it after clearing my Anaconda installation and reinstalling from scratch with Python 3 [CLS] [SEP] 2 [CLS] [SEP] I get the same problem with Python 3 [CLS] [SEP] 2, scikit learn 0 [CLS] [SEP] 17 [CLS] [SEP] scipy 0 [CLS] [SEP] 17 [CLS] [SEP] numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 1 on Mac OS X El Capitan 10 [CLS] [SEP] 11 [CLS] [SEP] It works when I have more than 2100 points but fails for lower values [CLS] [SEP] Analogically fails for low points' values. Reopen, please. I am getting the same problem on OS X 10 [CLS] [SEP] 11 [CLS] [SEP] python 3 [CLS] [SEP] 1, sklearn 0 [CLS] [SEP] 17 [CLS] [SEP] 1 and numpy 1 [CLS] [SEP] 11 [CLS] [SEP] On this dataset: LINKLINK with np [CLS] [SEP] savetxt. Lucidyan I don't understand what you mean by that [CLS] [SEP] pbnsilva can you try this snippet posted below [CLS] [SEP] You may need to run it multiple times because unfortunately the seed is not set appropriately you need to use CODESCODES rather than CODESCODES [CLS] [SEP] CODELCODEL. Bonus points if you can find a seed argument to CODESCODES and a CODESCODES argument to CODESCODES that makes the snippet deterministic [CLS] [SEP] Alternatively some people reported that this bug was fixed in master [CLS] [SEP] Could you try to build scikit learn master to see whether the problem disappears [CLS] [SEP] lesteve I meant that I get the same error with a small number of instances, with the same system parameters Python 3 [CLS] [SEP] 2, scikit learn 0 [CLS] [SEP] 17 [CLS] [SEP] scipy 0 [CLS] [SEP] 17 [CLS] [SEP] numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 1 on Mac OS X El Capitan 10 [CLS] [SEP] 11 [CLS] [SEP] 3. I tried it, and it fails with X SIZE 1750 Y SIZE 20, n components 2 became constants [CLS] [SEP] if I start to change the constants increase with fixed X SIZE 1750, it fails too [CLS] [SEP] Lucidyan could you try the same snippet with scikit learn master and see whether it fails too [CLS] [SEP] yea not working for me numpy 1 [CLS] [SEP] 11 [CLS] [SEP] El capitan [CLS] [SEP] 10 [CLS] [SEP] 11, sklearn 0 [CLS] [SEP] 17 [CLS] [SEP] python 3 [CLS] [SEP] 2 annoyingly it has broken old code that did work [CLS] [SEP] what did you guys change [CLS] [SEP] act65 we are more than keen to get to the bottom of this but we haven't been able to reproduce and it seems like we are getting mixed reports from users so far unfortunately [CLS] [SEP] So if you haven't already unfortunately we are not mind readers and not working for me does not tell us what you tried could you try to run the snippet mentioned above in LINKLINK [CLS] [SEP] Try to run it multiple times just in case because the random seed is not set properly and there may be some randomness left in the snippet [CLS] [SEP] Then what would be really great if you could try with the 0 [CLS] [SEP] 18 release candidate which is straightforward to install highly recommended to do it in a separate virtualenv or conda env: CODELCODEL. Edited: 0 [CLS] [SEP] 18 has been released so you can just use no need to use CODESCODES: CODELCODEL. and re run the snippet to see whether it is fixed in 0 [CLS] [SEP] 18 as some users have reported in this thread already [CLS] [SEP] 0 [CLS] [SEP] 18 is going to be released in a few weeks if not days so you know what you have to do if you want to help us to get to the bottom of this before the release ; [CLS] [SEP] yea my bad, should have been clearer [CLS] [SEP] I had tried roughly the same thing others had, just on MNIST [CLS] [SEP] anyway, it works [CLS] [SEP] thanks thumbs up. CODESCODES fixed it. OK, thanks for reporting back and great to hear that this is fixed for you in the 0 [CLS] [SEP] 18 release candidate [CLS] [SEP] This seems to match what other have reported when they say it was fixed in master [CLS] [SEP] Just for completeness though, it is recommended to stick to released versions for production code, so you may need to wait a little bit more until the 0 [CLS] [SEP] 18 release is out [CLS] [SEP] lesteve. I tried the LINKLINK on version 0 [CLS] [SEP] 18rc2, installed by. And it seems working [CLS] [SEP] Cheers [CLS] [SEP] Thanks Lucidyan for giving it a try [CLS] [SEP] Sorry, I'm still getting this error with above code snippet after upgrading to scikit learn 0 [CLS] [SEP] 18 CODESCODES in conda env [CLS] [SEP] Here is my system info: OS X El Capitan Version 10 [CLS] [SEP] 11 [CLS] [SEP] 4. Python 2 [CLS] [SEP] 12. sklearn 0 [CLS] [SEP] 18 got the the same error on sklearn 0 [CLS] [SEP] 17 [CLS] [SEP] 1 as well. numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 1 got the same error on numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 2 as well. scipy 0 [CLS] [SEP] 18 [CLS] [SEP] 1. However, I ran the same code snippet on Linux system, I didn't get an error [CLS] [SEP] The system info of the Linux system is: Ubuntu 14 [CLS] [SEP] 04 [CLS] [SEP] 5 LTS GNU Linux 3 [CLS] [SEP] 13 [CLS] [SEP] 0 91 generic x86 64. Python 2 [CLS] [SEP] 6. sklearn 0 [CLS] [SEP] 18. numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 2. scipy 0 [CLS] [SEP] 13 [CLS] [SEP] 3. Try uninstalling and reinstalling numpy, scipy and scikit learn [CLS] [SEP] If that still fails, try in a different virtualenv or conda environment if you are using conda to make sure something is not wrong in your Python environment [CLS] [SEP] Still get the same error CODESCODES in sklearn 0 [CLS] [SEP] 18 CODESCODES via conda [CLS] [SEP] The pip wheels seem to work fine though [CLS] [SEP] Hmmm interesting [CLS] [SEP] could you try using conda packages without mkl, for example something like CODESCODES so we can see whether that is a MKL vs openblas thing [CLS] [SEP] Also bonus points if you can provide a snippet reproducing the problem with a fixed random seed for example using CODESCODES that can be used as a reference snippet going forward [CLS] [SEP] Up until now the snippet we have is non deterministic CODESCODES is used and has no influence of numpy [CLS] [SEP] random seed [CLS] [SEP] Sure, no problem [CLS] [SEP] This may be be a BLAS problem indeed, the CODESCODES env works fine [CLS] [SEP] Regarding the snippet [CLS] [SEP] this gets interesting [CLS] [SEP] E [CLS] [SEP] g [CLS] [SEP] CODELCODEL. reproduces the problem on my machine [CLS] [SEP] However, when I replace CODESCODES by CODESCODES it seems to be fine [CLS] [SEP] Would be good to find a more light weight example maybe, to add this particular case to the travis tests [CLS] [SEP] EDIT: Same is true for iris [CLS] [SEP] CODESCODES works in fit transform, a splitted dataset CODESCODES does not [CLS] [SEP] Maybe there's sth funny going on in CODESCODES [CLS] [SEP] However, both CODESCODES and CODESCODES seem to be float 64 arrays [CLS] [SEP] What about the snippet from LINKLINK, you didn't find a way to make it deterministic and still fail on your machine [CLS] [SEP] The snippet. CODELCODEL. reproduces the error but it works fine on the nomkl env. OK thanks a lot for this, at least we have a deterministic snippet now [CLS] [SEP] For the record, can you post the output of this snippet: CODELCODEL. Also, just for the sake of sanity, can you make sure you can reproduce the problem in a fresh conda environment [CLS] [SEP] To be honest, I am not sure where we go from this [CLS] [SEP] I haven't tried since but I was not able to reproduce on an El Capital Virtual box, ogrisel could not reproduce either on a OSX laptop, so at the time he said there might be some hardware specific problem involved [CLS] [SEP] Sure, the machine that causes this problem: CODELCODEL. tested it in a fresh conda environment. I think you may be onto sth [CLS] [SEP] I tried it on my other mac, and it works fine there [CLS] [SEP] The only difference is to the output above it is running on an older kernel CODESCODES [CLS] [SEP] Haven't updated the second mac to macOS Sierra yet, which is running on the former machine that has this problem [CLS] [SEP] Could be OS related [CLS] [SEP] I will upgrade the second machine to Sierra in the next month or so I am in the middle of a project and don't want to break things, but I can let you know if the update to Sierra leads to this issue on the second machine or maybe someone else with macOS Sierra could test it so that we now if it is an OS thing. Given that the problem has been reported on different OSX versions, I kind of doubt this is only a OSX version issue [CLS] [SEP] IIRC ogrisel's hunch was that it was CPU architecture related [CLS] [SEP] Another more time intensive way to debug this problem would be to track down where the NaNs appear in the code [CLS] [SEP] Hm, how would the conda scikit learn version differ from the pip wheels [CLS] [SEP] Because the latter seem to work on the same machine [CLS] [SEP] Maybe it's somehow related to conda. I noticed that the gradient in LINKLINK explodes, until it becomes CODESCODES in one position after the 25th iteration in the LINKLINK for loop. CODELCODEL. On the other machine the one that works fine, the gradients are all 0 after the same iteration [CLS] [SEP] So, somehow the CODESCODES function doesn't work properly maybe due to some BLAS thing [CLS] [SEP] The pip wheels are using OpenBLAS and you don't have the problem when using OpenBLAS with conda through the CODESCODES trick so this does look like a MKL problem, which on top of that is likely CPU specific [CLS] [SEP] Great job debugging the issue by the way [CLS] [SEP] Bonus points if you manage to further isolate the problem for example by pickling the data before the iteration CODESCODES appear [CLS] [SEP] The problem arises very likely in some cython code in sklearn manifold barnes hut tsne [CLS] [SEP] pyx [CLS] [SEP] Shouldn't this issue be re opened given the latest findings [CLS] [SEP] I hit it as well and also managed to get past it with the nomkl trick, but feels like an active bug vs [CLS] [SEP] a closed one, no [CLS] [SEP] Others that have been hitting this: LINKLINK You are right, reopening [CLS] [SEP] This one is a serious one, seems hardware specific and none of the core devs could reproduce it [CLS] [SEP] The only way this can get fixed is if people having the issue invest some time in debugging the problem further [CLS] [SEP] I am happy to look into it further in December after all the November deadlines [CLS] [SEP] However, even this can be further isolated, I am curious if there's a fix for such a hardware specific problem [CLS] [SEP] Maybe, until this is fully resolved, it may be worthwhile to raise a more specific exception warning if the gradient contains infs with a note about this problem [CLS] [SEP] I just created a new conda virtualenv and built a devp version of sklearn from the source code freshly forked from the sciki learn master branch, the error disappeared [CLS] [SEP] Is the devp sklearn built from source code using OpenBLAS instead of MKL [CLS] [SEP] Sounds great, thanks a lot [CLS] [SEP] Not sure about a fix, one hope would be if we can change our cython code to work around problem once we have isolated it [CLS] [SEP] Also it could well be an openblas issue and that would be great reporting it upstream, especially since wheels use openblas [CLS] [SEP] Adding some advice to the error message only on OS X, sounds like a good idea, but I am not sure what it should say, maybe consider using conda and install scikit learn with MKL or something like this [CLS] [SEP] zhongyuk depends which library you have installed [CLS] [SEP] One way to know once you have built scikit learn from source is to run the equivalent of CODESCODES Google seems to say CODESCODES on CODESCODES name will be different if you are using Python 3, for example something like CODESCODES [CLS] [SEP] On my Ubuntu machine for example, I get this: CODELCODEL. So you can see from the third line, that it is using MKL [CLS] [SEP] I just wanted to write that I think you got it flipped: the wheels worked find and the issue only occured when I was using it via conda with MKL [CLS] [SEP] Now, I think I have good news in some way: I just wanted to rerun the above example that previously caused this issue to confirm. CODELCODEL. and I am no longer getting this problem [CLS] [SEP] I remember that I reininstalled miniconda the other week due to some other problems [CLS] [SEP] Do you think it could be related to some issue in the old conda [CLS] [SEP] Would be great if some other people who had this issue could maybe also try updating reinstalling conda and check if that solves the problem for them [CLS] [SEP] Meanwhile, I will try to see if I can find an old backupstate to find out which conda version I had installed previously [CLS] [SEP] right now, I have conda 4 [CLS] [SEP] 12 Just wanna say that I ran CODESCODES on CODESCODES I assume this is the t sne [CLS] [SEP] py compiled file [CLS] [SEP] it seems like it's indeed using BLAS [CLS] [SEP] And the one which threw error seems to use MKL [CLS] [SEP] The conda version I have is 4 [CLS] [SEP] 13, both the env which throws the error and the env with source built sklearn which does not throw error are inside conda [CLS] [SEP] Hm, interesting, so it's not a conda issue after all then [CLS] [SEP] Curious why it works for me now: all I can think that has changed except for reinstalling conda was rebooting: P. Yeah, sorry about that [CLS] [SEP] I'll edit the issue title to try to remember it right for next time [CLS] [SEP] all I can think that has changed except for reinstalling conda was rebooting: P. Hmmm, random guess maybe the mkl version, although if I believe the output of CODESCODES the latest mkl version 11 [CLS] [SEP] 3 is from 2016 05 thumbs down 3 [CLS] [SEP] zhongyuk try to build scikit learn inside a conda env that uses mkl, I believe this should be enough for mkl to be picked up probably a good idea in this case to do CODESCODES and then CODESCODES to rebuild from scratch [CLS] [SEP] lesteve I built scikit learn in two conda virtual environments from source code branch 0 [CLS] [SEP] 18 release, the one uses MKL indeed throws the error; the one uses libBLAS does not throw error [CLS] [SEP] The output running CODESCODES on CODESCODES is here in case MKL version gives you any clue [CLS] [SEP] CODESCODES ib compatibility version 0 [CLS] [SEP] 0, current version 0 [CLS] [SEP] 0. rpath libmkl intel thread [CLS] [SEP] dylib compatibility version 0 [CLS] [SEP] 0, current version 0 [CLS] [SEP] 0. rpath libmkl core [CLS] [SEP] dylib compatibility version 0 [CLS] [SEP] 0, current version 0 [CLS] [SEP] 0. rpath libiomp5 [CLS] [SEP] dylib compatibility version 5 [CLS] [SEP] 0, current version 5 [CLS] [SEP] 0. usr lib libSystem [CLS] [SEP] B [CLS] [SEP] dylib compatibility version 1 [CLS] [SEP] 0, current version 1226 [CLS] [SEP] 10 [CLS] [SEP] 1 zhongyuk great [CLS] [SEP] For completeness, can you post the output of CODESCODES in your MKL conda environment [CLS] [SEP] While we are at it your CPU information CODESCODES according to Google and your platform information CODESCODES would be great [CLS] [SEP] What would be really great is to continue where rabst stopped and further isolate the problem: LINKLINK. Since this is related to BLAS, my hunch is that something goes wrong in this LINKLINK causing the gradient to have some non finite values [CLS] [SEP] lesteve Output of conda MKL environment info: CODELCODEL. CPU info: CODESCODES. Platform info: CODESCODES. I'll look into the gradient exploding issue that rabst found in the other comment and the line you pointed out sometime this week and or next week, I'll keep everyone updated with any interesting findings [CLS] [SEP] zhongyuk If it helps, I have a very similar setup can't reproduce the issue anymore since reinstalling miniconda, except that I have macOS Sierra instead of OS X El Capitan and that I have numpy 1 [CLS] [SEP] 11 [CLS] [SEP] 2 instead of 1 [CLS] [SEP] 11 [CLS] [SEP] rasbt hmm, I wonder if the problem goes away in Sierra [CLS] [SEP] I don't want to upgrade OS yet b z I thought I read somewhere that TensorFlow doesn't support Sierra yet could be mistaken or no longer be true anymore since I don't remember where or how long ago I read it [CLS] [SEP] And I don't wanna break my projects with TF dependency zhongyuk Hm, I think it's unlikely that it is related [CLS] [SEP] Before I reinstalled miniconda, I also had the problem in macOS Sierra [CLS] [SEP] PS: Tensorflow works fine for me on Sierra, but I only do CPU and prototyping on my macs so I don't know about GPU issues related to Sierra rasbt hmm, that's good to know that TF works fine on Sierra [CLS] [SEP] Do you wanna run CODESCODES on the CODESCODES file in your platform to see which math library sklearn using underneath [CLS] [SEP] At least that way we might know if the problem went away after reinstalling miniconda is fundamentally linked to math library [CLS] [SEP] I am getting the following on CODESCODES: CODELCODEL rasbt Hmm, that's really interesting [CLS] [SEP] It's using MKL as well [CLS] [SEP] I don't know enough about the math library to speculate what does this mean [CLS] [SEP] lesteve probably will be able to infer more from this [CLS] [SEP] I noticed that in my platform CODESCODES is not loaded [CLS] [SEP] Is it possible that caused the problem [CLS] [SEP] WOW, yes [CLS] [SEP] it is caused by CODESCODES not loaded [CLS] [SEP] I found LINKLINK and then ran CODESCODES, then ran CODESCODES on the CODESCODES file, then CODESCODES loaded up, and ran the code snippet, error went away [CLS] [SEP] Have five team work [CLS] [SEP] rasbt. If anyone else could check on their platform and see if the error went away after making sure CODESCODES is loaded, that would be great [CLS] [SEP] lesteve Since it does look like a lot of ppl has hit this problem, and it does look like it's related to some version of [CLS] [SEP] conda not extracting full MKL libraries my understanding of the situation so far, even though it's not a scikit learn bug, I do think either add some kind of remark or warning or error messages to OS X users would be nice [CLS] [SEP] That way at least they can check if MKL lib is fully extracted in their platform and then fix it if it's not [CLS] [SEP] zhongyuk awesome, glad to hear that you were able to narrow it down [CLS] [SEP] Hopefully, it's just the broken link incomplete install of the CODESCODES that would be awesome in terms of knowing what's going on thumbs up [CLS] [SEP] That would also explain why it works for me now after re installing Miniconda [CLS] [SEP] Would be great if someone else could try the fix [CLS] [SEP] If the aforementioned CODESCODES really caused this issue, the remaining question would be how to deal with that in scikit learn [CLS] [SEP] I mean, this bug is kind of hideous and it may be a bit tricky for folks to figure out that it's due to CODESCODES [CLS] [SEP] I probably wouldn't inject an additional if gradient contains inf raise error + message in the code in scikit learn since it could be quite annoying performance wise [CLS] [SEP] However, i think that adding a note or comment in the installation and or T SNE docs would be a good idea [CLS] [SEP] Just want to add a quick update: I had 2 virtual envs in conda both using MKL [CLS] [SEP] One of them is equipped with CODESCODES and the other is equipped with CODESCODES [CLS] [SEP] Running CODESCODES indicated that both of them somehow didn't have CODESCODES loaded [CLS] [SEP] After making sure CODESCODES loaded up, the error disappeared in the virtual env with CODESCODES [CLS] [SEP] However, the error remained appearing in the env with CODESCODES [CLS] [SEP] After upgrading CODESCODES to 1 [CLS] [SEP] 11 [CLS] [SEP] I can no longer reproduce the error in either conda virtual environment [CLS] [SEP] As it sounds complicated and the exact cause of the error is still obscure, I speculate it's probably a complication interweaved by incomplete MKL library loading and scikit learn dependent libraries possibly numpy [CLS] [SEP] Although I haven't tried to create an virtualenv with MKL and CODESCODES to see if this would reproduce the error [CLS] [SEP] And I second rasbt suggestion on adding some kind of note, comment or docs [CLS] [SEP] zhongyuk glad you got it fixed [CLS] [SEP] It seems that reinstalling packages with conda may help but I am afraid there doesn't seem to be a very clear picture of the cause of the problem thumbs down [CLS] [SEP] This is a conda bug, right [CLS] [SEP] Or did anyone experience the bug not using conda [CLS] [SEP] I managed to find a way to reproduce I think by installing the numpy wheel and then scikit learn via conda on top of it got the hint from the CODESCODES output in LINKLINK where two CODESCODES are listed [CLS] [SEP] CODELCODEL. then execute the snippet from LINKLINK [CLS] [SEP] So it seems like this is happening when mixing numpy installed via pip and conda [CLS] [SEP] In my book this is never a good idea to mix pip and conda for a given package but I guess this can happen without realizing it quite easily for example you install a project that depends on numpy via pip, and then scikit learn via conda [CLS] [SEP] Why this exactly happens I don't know [CLS] [SEP] and it seems to happen only on OSX by the way for example not on my Ubuntu box [CLS] [SEP] For anyone affected by this, this should fix it: CODELCODEL. Let me know if that doesn't work for you [CLS] [SEP] Thanks for the deep dive again [CLS] [SEP] lesteve I thought we would never get to the bottom of this one to be honest thumbs up [CLS] [SEP] OK it's not quite the bottom but it's low enough as far as I am concerned [CLS] [SEP] I have to admit I would still like to understand what's happening within the numpy installed with both pip and conda [CLS] [SEP] Hi. I tried two setups, where. TSNE works well with one setup where Tensorflow is de activated, Python 3 [CLS] [SEP] x, however, TSNE does not work with the other setup where Tensorflow is activated, Python 2 [CLS] [SEP] x [CLS] [SEP] The set up where TSNE works well: Terminal: CODELCODEL. Jupyer notebook: CODELCODEL. CODELCODEL. Note: I tried. CODELCODEL. to make TSNE work well with Tensorflow deactivated [CLS] [SEP] However, with the new setup below where I have to use Tensorflow, this does not work any more [CLS] [SEP] The set up where TSNE does not work: Terminal: CODELCODEL. Jupyer notebook: CODELCODEL. CODELCODEL. Error: ValueError: array must not contain infs or NaNs. Any suggestions [CLS] [SEP] Thanks a lotInteresting [CLS] [SEP] I think it has nothing to do with tensorflow; my guess is that. vs. is the culprit [CLS] [SEP] Thanks for response thumbs up Any suggested solutions to do list [CLS] [SEP] Need use both. Tensorflow and. TSNE. in Jupyter notebook [CLS] [SEP] BTW: just tried from future import division in Python 2 [CLS] [SEP] x and did not solve the problem [CLS] [SEP] Hm, not sure if that helps personally, I am not getting this mysterious issue anymore with. CODELCODEL. I am on Tf now 1 [CLS] [SEP] 0 as well, and I don't have this CODESCODES issue anymorewhen I execute. CODELCODEL. which previously didn't work [CLS] [SEP] Maybe try to create a new python 3 [CLS] [SEP] 5 env and try the above mentioned snippet to see if it works without error: CODELCODEL. Hi rasbt, Yes I made TSNE work on Python 3 [CLS] [SEP] However, for some other reason I'd better use Python 2 [CLS] [SEP] so I have to continue to explore [CLS] [SEP] cross fingers. Thanks for your help [CLS] [SEP] Do you have an old er Miniconda Anaconda 2 [CLS] [SEP] 7 distro installed [CLS] [SEP] In this case, maybe consider installing one of the more recent ones, or update your conda root or default python and give it another try or create a new py 27 env by substituting the 3 [CLS] [SEP] 5 by 2 [CLS] [SEP] 7 in CODESCODES [CLS] [SEP] not sure if this is really the reason, but I think CODESCODES may be an issue; since the error doesn't seem to occur via CODESCODES Update: TSNE perplexity 30, n components 2, init 'pca', n iter 1000, method 'exact' make it worked [CLS] [SEP] method 'exact' was the trick [CLS] [SEP] Also been having this problem [CLS] [SEP] Using method 'exact' seems to works for me, but it is so painfully slow [CLS] [SEP] Is there really no other solution that people have found [CLS] [SEP] Have you read LINKLINK and LINKLINK [CLS] [SEP] The only way I managed to reproduce this problem was to install numpy with both pip and conda in the same conda environment [CLS] [SEP] If you create a conda environment from scratch you should not have this problem [CLS] [SEP] In case your problem do not seem to match this description, please post the exact commands you ran to create your conda environment, so we can try to reproduce [CLS] [SEP] Hi, I read the above comments and can reproduce this [CLS] [SEP] I re ran code from a few weeks ago and now this issue appears [CLS] [SEP] Here's a minimal example that now reproduces this issue: CODELCODEL. And the output of. CODELCODEL. is. CODELCODEL. Again, changing the method to exact CODESCODES gets rid of the error [CLS] [SEP] More generally, I have noticed wildly different results when using sklearn's TSNE with identitical perplexity and other parameters from the bh implementation published by Laurens van der Maaten and the MATLAB version [CLS] [SEP] I wonder if there may be a connection [CLS] [SEP] Did you refer to LINKLINK That fixed it [CLS] [SEP] My apologies I had separately uninstalled an reinstalled numpy, scikit learn and scipy, but not like in 6665 [CLS] [SEP] I had the same problem as reported here, and I do not use conda [CLS] [SEP] My Python version is installed via brew on macOS Sierra 10 [CLS] [SEP] 12 [CLS] [SEP] 4. CODELCODEL. Adding CODESCODES solved my problem [CLS] [SEP] lesteve: i had this error using the setup you describe two versions of numpy installed [CLS] [SEP] simply updating the conda install of numpy to the same version as the pip install 1 [CLS] [SEP] 12 [CLS] [SEP] 1 did the trick for me [CLS] [SEP] i did remove the pip numpy install, though, as i didn't intend to have two versions thumbs up lesteve: Thank you for the solution [CLS] [SEP] I happened to have this error and then I found this discussion [CLS] [SEP] Fix it right away after remove the duplicated version of numpy [CLS] [SEP] Replicated I have removed pip installs of numpy and updated conda [CLS] [SEP] Darwin thumbs down 6 [CLS] [SEP] 0 x86 64 i386 64bit. 'NumPy', '1 [CLS] [SEP] 13 [CLS] [SEP] 1'. 'SciPy', '0 [CLS] [SEP] 19 [CLS] [SEP] 0'. 'Scikit Learn', '0 [CLS] [SEP] 18 [CLS] [SEP] 1'. It seems fine on my linux machine Linux: Linux 3 [CLS] [SEP] 101 0 [CLS] [SEP] 47 [CLS] [SEP] 71 default x86 64 with SuSE thumbs down 1 x86 64. 'NumPy', '1 [CLS] [SEP] 12 [CLS] [SEP] 1'. 'SciPy', '0 [CLS] [SEP] 19 [CLS] [SEP] 1'. 'Scikit Learn', '0 [CLS] [SEP] 18 [CLS] [SEP] 1'. wolfiex so you did. CODELCODEL. Somewhat related I recommend you update to scikit learn 0 [CLS] [SEP] 19 which has some fixes in t SNEgetting the same error nowHi rahulsnair, do you mind opening a new issue, with reproducible code, your traceback and the versions you are using [CLS] [SEP] This issue is pretty old and the code has changed a lot [CLS] [SEP] Thanks [CLS] [SEP] 