My experiment may run long time hours [CLS] [SEP] It seems the notebook stop running after the browser tab closed [CLS] [SEP] How to keep it running and updating the notebook [CLS] [SEP] Unfortunately there are no current simple way to do that [CLS] [SEP] We are aware of the issue and working on it [CLS] [SEP] In the meantime, I would suggest wrapping all the computation you are doing in CODESCODES, in order to query for results only interactively [CLS] [SEP] CLosing as this is already tracked in many places, but feel free to continue asking questions [CLS] [SEP] Thanks for you reply, Carreau [CLS] [SEP] I'm fresh to python notebook and not quite understand the Futures you mentioned [CLS] [SEP] Could you give me a simple example [CLS] [SEP] Great great thanks [CLS] [SEP] A future is an object representing a task it provides a way to see if the task is done, and get the result or error when it's finished [CLS] [SEP] They're a general concept, but Python provides an implementation in LINKLINK [CLS] [SEP] They're normally used in code that's doing more than one thing at once [CLS] [SEP] I think that's probably more complex than you need, though [CLS] [SEP] A cell that you've started running will keep going when you close the browser tab, but the output it produces is lost [CLS] [SEP] The easiest workaround is just to leave the browser tab open tabs are cheap, I've got 50 open now [CLS] [SEP] If you can't do that for some reason, make sure it assigns any results you want to keep to a variable they should still be available when you open it again [CLS] [SEP] You can also use the LINKLINK to store printed output into a variable you can get later [CLS] [SEP] I am struggling with this issue as well for some time now [CLS] [SEP] The kernel keeps running your job on the server, but there is no way to see the console output after closing the browser [CLS] [SEP] My workaround was to write all my logs to a file, so that when my browser closes indeed when a lot of logs come through browser it hangs up too I can see the kernel job process by opening the log file the log file can be open using Jupyter too [CLS] [SEP] CODELCODEL. thumbs up on this or some kind of long running process managementI'm confused why this is difficult [CLS] [SEP] Since a serialized jupyter notebook contains cell output, it should be possible to keep track of output when a user closes a tab and returns to the notebook by adding to the notebook json as it runs in the background, in which case the output generated while running in the background would be in the notebook [CLS] [SEP] Why can't jupyter just keep writing to the json file [CLS] [SEP] It doesn't write to the JSON files as soon as output is sent by the kernel it is sent to the browser, which adds it in to the notebook document [CLS] [SEP] When you save it or an autosave occurs, the notebook document is converted to JSON and written to disk as a whole [CLS] [SEP] We're planning to change that so that the server keeps the notebook model and sends updates to the browser, but that's a big change to the architecture [CLS] [SEP] That would be great [CLS] [SEP] Is there an current issue or milestone where I can track the progress [CLS] [SEP] I don't know of one Carreau might be able to give you more info on the progress [CLS] [SEP] That would be great [CLS] [SEP] My group works on remote servers [CLS] [SEP] So being able to reconnect to a session would be very valuable [CLS] [SEP] I'm working on remote servers too [CLS] [SEP] It would be really handy to be able to do this, hope it'll be implemented soon [CLS] [SEP] As a suggestion, I think that having the possibility to reconnect to a session even if that means to lose all the output when you weren't connected but having the possibility to save the new output would be great and more simple to implement [CLS] [SEP] That way if you're working on a remote server and you have a network disconnection you can still continue the work with little loss [CLS] [SEP] None AFAICT from the Notebook Lab side [CLS] [SEP] nteract might be closer with CODESCODES [CLS] [SEP] That's probably not going to be implemented soon [CLS] [SEP] Realtime will likely come sooner but will require a running browser [CLS] [SEP] so where are the open issues for this [CLS] [SEP] there’s still issues being opened about this for example 2446 and i can’t find the earlier, open ones [CLS] [SEP] Any news about this issue please [CLS] [SEP] This doesn't help if you are on a flaky connection to the server for example, accessing a remote jupyter server, or tunnelling to one through SSH [CLS] [SEP] We are aware of the issues there is not much written about it – we should get a comprehensive document about that – but this need a significant reactor of the frontend, plus likely some change in the backend [CLS] [SEP] cocalc [CLS] [SEP] com does allow that but ou need a server side model, and basically you deprecate all the extension for a given frontend – which is easy for cocalc as it is without extensions [CLS] [SEP] Though it is indirectly moving forward via Jupyterlaband nteract Comutable, and once this is out we can likely start to think about an isomorphicJsApp that keep state and the browser being only a view on this state [CLS] [SEP] My personal opinion is that this can be done without changes to the protocol as a separate app and anyone is welcomed to chime in, and write up a IPep RFC Prototype that lays out the ground infrastructure [CLS] [SEP] It is a significant enough amount of work that we can't just do that on the side, and will need at least a FTE to do that [CLS] [SEP] from my understanding, the frontend runs in the browser [CLS] [SEP] so if no tab is open, there is no frontend and there definitely need to be changes in the backend [CLS] [SEP] or do you mean different parts than me [CLS] [SEP] architecturally, i’d assume that the notebook server needs to start writing responses to the notebook file as long as there’s no browser tab attached [CLS] [SEP] for example instead of receiving the responses in a browser tab and manually saving the notebook, it gets saved automatically after any batch of responses. You need to move some pieces from frontend to backend [CLS] [SEP] it likely can be done with a proxy server in between notebook server and browser [CLS] [SEP] Yes and no [CLS] [SEP] The notebook file does not – and cannot – store all the necessary information especially while the kernel is still running for example mapping from message id to handlers [CLS] [SEP] You need an extra store that can be in server RAM and has a richer representation than ipynb [CLS] [SEP] If you have that, then the frontend need to understand this as well which start o be complicated [CLS] [SEP] Carreau By proxy server, you actually mean something like an off screen browser, right [CLS] [SEP] I'm quite not sure how the interaction of your actual browser and that off screen proxy thing should look like [CLS] [SEP] Do you have any knowledge of any peace of software which can do that [CLS] [SEP] Maybe, a browser which itself renders its interface as HTML and provides it via HTTP [CLS] [SEP] No, not completely [CLS] [SEP] Browser like imply HTML and rendering [CLS] [SEP] You can store non html models on the proxy server side [CLS] [SEP] I only care about the ipynb+some info on the server side [CLS] [SEP] The rendering is a detail [CLS] [SEP] The point is the state you care about – which is not the HTML rendering should live and be able to be updated without needing to have an open browser [CLS] [SEP] Thing of Google Drive RT API if you wish [CLS] [SEP] I've seen things ex mozilla tow truck I think trying to do that with HTML [CLS] [SEP] Any isomorphic App these days does similar things [CLS] [SEP] do we have any update on this, this should be essential for the cloud use case [CLS] [SEP] If you check the 2nd reference, which says This is an intended outcome of the notebook model LINKLINK [CLS] [SEP] So we will get it in jupyterlab, althought reading it I'm thinking it will save the results but it would not let us open again a closed notebook to keep working on it, or check the results after letting it working in background [CLS] [SEP] Is that any hack we can do [CLS] [SEP] for example assign the output of each cell to a internal variable, and when we re connect the kernel, get these variables and display them [CLS] [SEP] idning yes, storing results and outputs in variables continues to work [CLS] [SEP] You can redisplay variables still in memory at any time [CLS] [SEP] CODELCODEL. You can also capture displayed outputs not results with the CODESCODES cell magic: CODELCODEL. However, if it really is a long running computation, avoiding recomputing even when the kernel dies is probably useful [CLS] [SEP] In that case, using a caching scheme such that you write intermediate results to disk and only re execute if the cache doesn't exist on disk is preferable [CLS] [SEP] This is what I have done for my long running notebooks long ago [CLS] [SEP] In this way, re running a whole notebook after it's run once, even with a new kernel, may only take a few seconds and will produce all of the original output [CLS] [SEP] There are lots of ways to do this with different tradeoffs of rigor vs cache performance, which is part of why there isn't a simple example to link to [CLS] [SEP] Yet another option is to run the notebook entirely headless with nbconvert: CODELCODEL. which will create a new notebook with all of the output in tact [CLS] [SEP] I think the typical use case for that is when running longer computations in the notebook; here, it's important to keep in mind that nbconvert is not very generous with the default timeout limit per cell [CLS] [SEP] E [CLS] [SEP] g [CLS] [SEP] for longer computations, one might want to provide a custom timeout limit, for example, for computations that run for a day, something as follows: jupyter nbconvert execute to notebook mynotebook [CLS] [SEP] ipynb ExecutePreprocessor [CLS] [SEP] timeout 86400I have a really hard time understanding why this is a problem [CLS] [SEP] Basically, whatever would be sent to the browser is instead written to a file [CLS] [SEP] When the user logs back in, send it to the browser [CLS] [SEP] Something like that is now implemented messages go into a buffer when there's no client connected, and are replayed when one reconnects [CLS] [SEP] But the details are never as simple as they seem [CLS] [SEP] I have not seen any reference to this functionality in the docs, maybe we should advertise it a little more [CLS] [SEP] I am deeply interested in this functionality [CLS] [SEP] takluyver, that sound interesting, so when will this function be published [CLS] [SEP] People working on remote cloud engine might need this eagerly [CLS] [SEP] Should be there since 5 [CLS] [SEP] 2 added in PR 2871 takluyver In this PR, I can only find the demo for network drop off, but CODESCODES issue doesn't seem to be solved [CLS] [SEP] I tested this in my notebook version 5 [CLS] [SEP] 0, I run the code bellow and then close the chrome tab, when i reopen the notebook, the unsaved changes were all gone including the latest output [CLS] [SEP] CODELCODEL can confirm, have the same issue also v5 [CLS] [SEP] 0, Safari browser From the server's point of view, I think network issues should have a similar result to closing and reopening a tab [CLS] [SEP] rgbkrk minrk am I right in that [CLS] [SEP] If so, I'm not sure why it wouldn't be working [CLS] [SEP] The state of the notebook is entirely client side, which means that any outputs that come in that aren't captured in the document do not get saved back to disk [CLS] [SEP] What 2871 did was buffer any outputs and other messages until the user reconnects it will only help you for cases where you're reconnecting the same tab [CLS] [SEP] Ah, so it doesn't work for closing a tab and reopening it later [CLS] [SEP] I've been misleading people [CLS] [SEP] Thanks Kyle [CLS] [SEP] rgbkrk I feel like that was sort of a shutdown to all the people who want this feature [CLS] [SEP] Furthermore, that may be your model of a notebook, but that is not mine, and clearly not a great many other people's either [CLS] [SEP] Can you direct us to a mission statement or global definition of sorts that defines exactly what a notebook is supposed to be [CLS] [SEP] Back to the client side the fact is, sometimes the client side needs to close their laptop and go home for the day [CLS] [SEP] That should not prevent them from continuing their client side work after an evening with their family, a good night's sleep, and a fresh cup of coffee in the morning [CLS] [SEP] Instead of using a notebook, we could start a screen session and run our job in a vanilla Python shell or an IPython shell [CLS] [SEP] But then we lose the wonderful features that Jupyter has to offer [CLS] [SEP] I misunderstood as well, good that that's cleared up now thumbs up. abalter Overall, I agree with you regarding issues with that use case scenario [CLS] [SEP] The reason why I stumbled upon looked for this GitHub issue is not that I want to close browser tabs but to keep things running when I for example, temporarily have to close my laptop with a notebook session running on a different machine [CLS] [SEP] Mainly, I use my laptop for most of my work because of the app ecosystem on macOS, but I also realize that it's not the greatest computing platform so that I run the code mainly on my Linux machine or HPC cluster [CLS] [SEP] The reason why would prefer Jupyter notebooks vs python scripts for that is that I like to collect outputs and create plots of an sequential workflow all in one place [CLS] [SEP] I don't want to sound too demanding though, since I really appreciate that Jupyter Notebook is open source, free software by a non profit organization, it would be nice though if such a feature would exist some time in future [CLS] [SEP] Also, this feature may already supported then via. I have to check thumbs up. Thanks for raising that back up [CLS] [SEP] I'm not stating it as my ideal model either, more of a this is how it works currently [CLS] [SEP] This doesn't get to the true ideal, which is a server side model of the notebook that is synchronized to the frontends [CLS] [SEP] I'm likely to work on that during the coming year, 2871 was a stop gap to help people in a basic way before we re architecture [CLS] [SEP] My opinion is that we can re open this issue, which I'll do now [CLS] [SEP] Could someone please tell me whether this is related to colab [CLS] [SEP] research [CLS] [SEP] google [CLS] [SEP] com [CLS] [SEP] formerly colaboratory [CLS] [SEP] jupyter [CLS] [SEP] org. As you might guess, I'm totally new to Jupyter Notebook, although I know Python [CLS] [SEP] The thing is that I'd like to experiment with TensorFlow, but some tasks might run for hours [CLS] [SEP] I was wondering then, if I could run the experiments online instead of locally on my machine [CLS] [SEP] Thanks [CLS] [SEP] Colaboratory is a separate project made by Google which uses Jupyter notebook files on Google drive [CLS] [SEP] It appears that you can run Tensorflow on it [CLS] [SEP] I don't know whether there are any limitations on how long a computation can run for you'd have to ask Google about that [CLS] [SEP] takluyver thanks for the info, it's very much appreciated [CLS] [SEP] Anything like an output log could save much time although not for real solution just for backup [CLS] [SEP] Is there a way to dump all text contents sent to the client [CLS] [SEP] Unfortunately I'm not familiar with how Jupyter works, but if someone could give me a brief instruction of how I could realize it, I can try to implement it myself There's no option to dump it to a file at the moment [CLS] [SEP] The code that buffers output when there's no browser connected is here: LINKLINK takluyver Wow, thank you [CLS] [SEP] I'll try that when I get some time [CLS] [SEP] Having another machine keep the tab open also seems to allow getting some updates supposing it auto saves [CLS] [SEP] Which also allows getting some progress information for long running tasks [CLS] [SEP] Could a virtual browser like PhantomJS be a hacky solution [CLS] [SEP] wernight I don't think that's a hacky solution at all [CLS] [SEP] It might be a really simple and direct approach [CLS] [SEP] Jupyter runs in a browser, and if that browser just happens to be virtual, fine [CLS] [SEP] This would just keep updating the JSON version of the notebook, and when you log back in, that file updates the browser [CLS] [SEP] I'm having a hard time understanding why this is difficult [CLS] [SEP] SGTM [CLS] [SEP] I've even a Dockerizer PhantomJS if you're interested: LINKLINK takluyver. I'm not trying to be obnoxious, but tell me where my thinking is wrong here: Typical web application function: server receives request from client client side application. server creates response. server sends response to client essentially passes it a stream. loop until tab is closed. Hypothetical way jupyter web app functions: jupyter server receives request from client jupyter notebook due to user input. jupyter server creates response for example runs code. jupyter server sends response to client essentially passes it a stream. client responds that message was received. client displays output. loop until computation finished. loop until tab is closed. Suppose user does not interact with notebook. jupyter server receives request from client jupyter notebook. jupyter server creates response for example runs code. jupyter server sends response to client essentially passes it a stream. client responds that message was received. client displays output. loop until computation finished. client responds that message was received. Suppose tab is currently closed. jupyter server receives request from client jupyter notebook. jupyter server creates response for example runs code. jupyter server sends response to client essentially passes it a stream. AND. writes response to a file. client responds that message was received. client displays output. loop until computation finished. client responds that message was received. Suppose tab is reopened. jupyter server send cached stream to notebook. client responds that message was received. client displays output. jupyter server resumes normal operation. I can't emphasize enough how important this is to our workflow and that of many others [CLS] [SEP] This is a MAJOR shortcoming of Jupyter compared to RStudio Server and should be a top priority [CLS] [SEP] This probably has been said several hundred times already, but once again, I wish to request the kind developers of this project to take this issue on priority [CLS] [SEP] It's baffling to me how such a basic necessity has not been taken care of for so long [CLS] [SEP] I mean, most jobs with large amounts of data take several hours to run, at the least, on a remote server [CLS] [SEP] I'd have thought this feature is included by default [CLS] [SEP] I was surprised when I kept my server running overnight, logged in and saw that no output was stored [CLS] [SEP] I even couldn't tell which cell was currently executing since all the cells had a blank instead of an which is there when a cell is running [CLS] [SEP] EDIT: I'd like to add that I realize Jupyter is free software and the developers have other commitments too and only so much time, but I love Jupyter and this feature would make life easier for so many people [CLS] [SEP] Thanks in advance thumbs up To the risk of also repeating ourselves one more time [CLS] [SEP] Jupyter is mostly developed by people on their free time, and is given away for free [CLS] [SEP] We do suffer the same bugs and annoyance than you do [CLS] [SEP] We prioritize what we can prioritize, and even for those of us who are allowed to contribute to Jupyter professionally, it is 1 not always their main occupation, 2 have often tasks that are assigned by management or higher ups [CLS] [SEP] We don't owe features to users, even if we do care, but we do have obligations to finish the projects for which non profit that gave us money – at least for those of us employed totally or partially via these funds [CLS] [SEP] We cannot – and will not try – to force volunteers to prioritize what they wish to work on [CLS] [SEP] We can try to lead by example and hope this foster collaboration [CLS] [SEP] It is not because this issue is still open that people are not working on it [CLS] [SEP] We already added a band aid by replaying messages, and there is significant work that is currently done on this front, in part with JupyterLab with a server side model and CRDT [CLS] [SEP] It is extremely difficult work, especially if you can't spend several hours focused on it, which not many of us can afford [CLS] [SEP] So if you wish for this work to go faster, please do not insult us, shout on us or write bold on the internet which is equivalent and find ways to help, even indirectly [CLS] [SEP] There are many ways you can do so even if you are not a genius coder: Convince your company institution government to donate to numfocus. This will allow us to hire people to work full time with a correct living wages [CLS] [SEP] If we get even more money we could even hire talents that otherwise cross the street to get their salary double, triple or sometime more than quintupled [CLS] [SEP] Convince your company institution government to contribute time. Ask if you or someone else would be allowed to spend 1 afternoon per month helping [CLS] [SEP] If Jupyter is used at your work, your company likely would gain in having an expert, and fixing things upstream [CLS] [SEP] We also have plenty of things that are not code related where we need help legal, design, event planning [CLS] [SEP] Respond to issues on mailing list, help triage [CLS] [SEP] You will free us time [CLS] [SEP] Not having to respond to easy issue allow us to sometime get 1 or 2 hours strait where we can attempt difficult work [CLS] [SEP] Contribute code on your free time. Getting familiar with even small issues will increase your knowledge of the codebase, and who knows after a couple of month you may commit right and can help fix long standing issues like this one [CLS] [SEP] You sometime don't even have to start from scratch, there are many PR that some of us started, but need to polish fix test, rebase, document [CLS] [SEP] with the nice decentralized github you can propose fixes to existing PRs [CLS] [SEP] Help manage the community. Twitter, GitHub, Facebook, Youtube, mailing list, Proof read our blog, being friendly and remind people to be respectful to each other [CLS] [SEP] We are sorry if you are encountering issues, or if you have lost work, but please don't us that as a excuse to suggest that we don't care, are incompetent, haven't thought about how to fix it, how to implement it, and how to not break backward compatibility [CLS] [SEP] Many thanks, and much love from the Jupyter team, doing their best [CLS] [SEP] Also nice reads are LINKLINK and LINKLINK from Brett Cannon. Carreau You probably didn't read the edit in my comment above [CLS] [SEP] Please read it [CLS] [SEP] I realize Jupyter is free and the developers don't owe us anything [CLS] [SEP] It's just a request [CLS] [SEP] I'm sorry if I gave offense [CLS] [SEP] It was totally not my intention [CLS] [SEP] I have utmost respect for you and all the wonderful people who contribute to all OSS [CLS] [SEP] I may have misunderstood the situation, since I read somewhere above that implementing this shouldn't be difficult [CLS] [SEP] But since you have clarified that it's not easy work, I believe you [CLS] [SEP] I hope this issue is solved in near future, and once again, thanks for all your work on Jupyter [CLS] [SEP] I really do appreciate it thumbs up. I deeply apologize for yelling [CLS] [SEP] Bad choice of typesetting [CLS] [SEP] I wanted to somehow find a way to bump this up on the priority level, but that wasn't the way to do it [CLS] [SEP] Is there a way to make sure this feature makes it onto the road map [CLS] [SEP] Is there a priority system for the road map [CLS] [SEP] Until this feature is ready, it's a big reason to use RStudio Server over Jupyter, and the more people that use Jupyter, the better for the entire project [CLS] [SEP] Believe me, if I felt confident enough to dive into the code and actually make a difference, I would do that instead of spending time writing long issue comments [CLS] [SEP] Maybe I need to get over that and dive in, but I fear going down a rabbit hole and being of no help to anyone [CLS] [SEP] Suppose I wanted to join up with a few more experienced programmers to look at this, what would be a way to find those others and form that group [CLS] [SEP] I think the best way I could contribute would be to help bring outside resources to the Jupyter project [CLS] [SEP] Is there already a task force for that [CLS] [SEP] This is on the roadmap for JupyterLab, cf LINKLINK with more explicit language around this [CLS] [SEP] Essentially, we need a server side representation of the notebook model, which is then rendered by the front end [CLS] [SEP] Please see discussion LINKLINK [CLS] [SEP] Thank you, I did not in fact saw it, The response was not target toward abalter or tanmay kulkarni, it just happen to have two comments in a short time and that is often a trigger that let other people also add their comments that degenerate, and was more attempting to defuse and tell people to pay attention [CLS] [SEP] Written communication is hard, and many physical cue from in person conversation are not present [CLS] [SEP] Thanks for clarifying your meaning [CLS] [SEP] Have a look at my LINKLINK if you want to get some confidence [CLS] [SEP] Some of the history is not there anymore github didn't kept comments on code at the time [CLS] [SEP] I was putting semi colon at end of line [CLS] [SEP] Deep code diving is not the only thing that would help, we are for example exploring how to foster community: LINKLINK. If your contribution for a few weeks is to follow along and send a weekly summary to the advance done on this front and other that would be of tremendous help [CLS] [SEP] No, but do you want to try to organise this or make a proposal [CLS] [SEP] See also 641, which seems like it is the same issue [CLS] [SEP] In the meantime, a dirty hack to keep the output from a notebook while the browser is closed is to print to the console rather than the notebook using something like. import sys. sys [CLS] [SEP] stdout open ' dev stdout', 'w'. print 'this is printed in the console' I'm actually thinking of trying a hack when I get time [CLS] [SEP] Start a headless browser in a flask app that communicates with jupyter and regurgitates its current page view to the browser [CLS] [SEP] Then I would interact with the headless browser through that page [CLS] [SEP] The headless browser would pass the interaction on to jupyter and capture the response [CLS] [SEP] You can workaround to the issue for the moment running a container with a browser on the same server where you have your notebook running, and connect to it with VNC [CLS] [SEP] For example LINKLINK already provides Firefox with a VNC server installation that you can expose and connect to [CLS] [SEP] Of course the container with firefox will eat some resources of your server the author of CODESCODES suggest to have at least 2GB of shared memory [CLS] [SEP] For example on a server where the user is CODESCODES, I have created a folder CODESCODES where I put my noteboks and run the following: CODELCODEL. Then you can use any VNC client to connect to the browser [CLS] [SEP] There may be other solutions based on LINKLINK basically using the same basic idea of LINKLINK, but probably the setup would be a little more complicated [CLS] [SEP] EDIT: one thing I should mention is that you have to be careful with the setup if the server is reachable from the internet [CLS] [SEP] I have in mind a typical scenario where you are using a machine in your local cluster or local network where who can reach the machine is trusted [CLS] [SEP] PhantomJS should use a lot less memory, but you still need to log in and. keep the same files open [CLS] [SEP] So I don't think it's really a solution for now [CLS] [SEP] Werner.+41 44 668 01 01. wrote: Worth pointing out another workaround: LINKLINK which allows running notebooks through a terminal cli and outputs results in a separate notebook: CODESCODES. This combined with tmux seems to be a viable workflow for remote running notebooks [CLS] [SEP] This might not be exactly related to the asked question, but still should be a useful trick [CLS] [SEP] I call my lengthy text output generating scripts in google colab like this: CODESCODES. Up until today whenever my laptop went to sleep for example got disconnected from net, the process would die and become irretrievable [CLS] [SEP] Today almost randomly I found that having another dummy cell in the same notebook and running it after resuming, not only resurrects the main cell's running process, but also retrieves and displays the text output that was cut right after the apparent death of the process [CLS] [SEP] The dummy cell can be as simple as: CODESCODES. Is it a sensible idea to let our long running cells in a queue system such as LINKLINK [CLS] [SEP] Turning a regular function into a remote functions is not hard at all, it's just one decorator to add [CLS] [SEP] I just wanted to share a simple approach that I've found satisfactory for watching outputs after exiting out of a browser tab [CLS] [SEP] This works when print functions are being used to produce output [CLS] [SEP] I define this function and then replace print statements with jprint [CLS] [SEP] CODELCODEL. The jupyter outputs [CLS] [SEP] txt file must already exist [CLS] [SEP] Then if I exit out of the browser tab and wish to start watching the output again, I log in via ssh and run something like: CODESCODES. This could be a nice strategyWhy can Google Colab make the output cell updating after you closed your browser [CLS] [SEP] Google miracle [CLS] [SEP] I hope the new version of jupyter also has this functionNo news yet [CLS] [SEP] Has updating the output been considered at all here [CLS] [SEP] 