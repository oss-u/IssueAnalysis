This is an issue that I am opening for discussion [CLS] [SEP] Problem: Sample weights in various estimators, group labels for cross validation objects, group id in learning to rank are optional information that need to be passed to estimators and the CV framework, and that need to kept to the proper shape throughout the data processing pipeline [CLS] [SEP] Right now, the code to deal with this is inhomogeneous in the codebase, the APIs are not fully consistent ie passing sample weights to objects that do not support them will just crash [CLS] [SEP] This discussion attempt to address the problems above, and open the door to more flexibility to future evolution. Core idea. We could have an argument that is a dataframe like object, ie a collection dictionary of 1D array like object [CLS] [SEP] This argument would be sliced and diced by any code that modifies the number of samples CV objects, train test split, and passed along the data [CLS] [SEP] Proposal A. All objects could take as a signature fit X, y, sample props None, with y optional for unsupervised learners [CLS] [SEP] sample props name to be debated would be a dataframe like object ie either a dict of arrays, or a dataframe [CLS] [SEP] It would have a few predefined fields, such as weight for sample weight, group for sample groups used in cross validation [CLS] [SEP] It would open the door to attaching domain specific information to samples, and thus make scikit learn easier to adapt to specific applications [CLS] [SEP] Proposal B. y could be optionally a dataframe like object, which would have as a compulsory field target, serving the purpose of the current y, and other fields such as weight, group [CLS] [SEP] In which case, arguments sample weights and alike would disappear into it [CLS] [SEP] People at the Paris sprint including me seem to lean towards proposal. Implementation aspects. The different validation tools will have to be adapted to accept this type of argument [CLS] [SEP] We should not depend on pandas [CLS] [SEP] Thus we will accept dict of arrays and build a helper function to slice them in the sample direction [CLS] [SEP] Also, this helper should probably accept data frame but given that data frames can be indexed like dictionaries, this will not be a problem [CLS] [SEP] Finally, the CV objects should be adapted to split the corresponding structure [CLS] [SEP] Probably in a follow up to 4294. To track the evolution of ideas here previous mentions of related idea: LINKLINK. It would fix 2879, and be a clean alternative to 1574 and 3524. Sorry to be obtuse, but where does the reticence to depend or better integrate CODESCODES come from [CLS] [SEP] It's hard to find applied examples of CODESCODES in the community that don't include CODESCODES these days, and the marginal dependencies over CODESCODES and CODESCODES are only CODESCODES and CODESCODES [CLS] [SEP] It seems as if we'd have to reinvent much of the masking and group by wheel anyway to support data dependent CV use cases [CLS] [SEP] I never use it: my data are images, and images don't fit well in pandas [CLS] [SEP] Only masking, which is trivial, not group by [CLS] [SEP] Proposal A along with dict of arrays seems like a good solution to me [CLS] [SEP] thumbs up. GaelVaroquaux IIRC, you said you were considering a dataset object for out of core learning [CLS] [SEP] If that's indeed the case, this should probably part of our reflexion [CLS] [SEP] thumbs up for. I'm still reflecting whether we need to change the API of all estimators, though [CLS] [SEP] I'd like to avoid that, but I'm not sure it is possible [CLS] [SEP] I have nothing better than CODESCODES. It means that everybody that uses CODESCODES needs to change their code [CLS] [SEP] Which is better than everybody that ever used CODESCODES needs to change their code which they'd have to for B [CLS] [SEP] What's the advantage of A over kwargs [CLS] [SEP] can you elaborate [CLS] [SEP] A is a dict of names with array values [CLS] [SEP] These variables could be passed directly as kwargs, similarly resulting in a dict, without changing the current sample weight handling [CLS] [SEP] So you would add CODESCODES to all fit methods and ignore those that are not used [CLS] [SEP] Perhaps not, but I want to know in what ways this is really a worse. solution than sample props [CLS] [SEP] On 8 April 2015 at 00:59, Andreas Mueller wrote: Two aspects [CLS] [SEP] First, it would implie that models tend to swallow arguments without. raising errors [CLS] [SEP] For instance if I don't know that Python is case. sensitive, I write. fit X, Y y, I won't be getting an error message that I didn't pass a valid argument. Second, exposing sample props as one argument will be making it more. obvious that it is a homogenous type [CLS] [SEP] It will also make people's life. easier if they are already using pandas [CLS] [SEP] I must say that I am a bit. scared of coupling too much with pandas, upgrades to pandas tend to. break our code, as in 4540 [CLS] [SEP] I also find that kwargs is harder to understand for someone who is. not a Python expert [CLS] [SEP] I think mostly in being a little stricter with the interface [CLS] [SEP] Also, there could be arguments to fit that are not of length n samples thought we try to avoid them [CLS] [SEP] GaelVaroquaux I think the issue you mentioned is caused by upgrading sklearn, not upgrading pandas thumbs up. Well pandas [CLS] [SEP] Series [CLS] [SEP] dtype [CLS] [SEP] kind was certainly present in Pandas 0 [CLS] [SEP] 14 [CLS] [SEP] I. didn't check for 0 [CLS] [SEP] 15 [CLS] [SEP] I just thought it worth raising as devil's advocate, so thanks for the initial responses [CLS] [SEP] Sure, though naming errors are as much a real issue with CODESCODES [CLS] [SEP] Indeed a confused user may have CODESCODES or CODESCODES instead of CODESCODES [CLS] [SEP] Another issue in which all proposed solutions fail but the incumbent approach of pass CODESCODES explicitly works fine: if an estimator does not have CODESCODES support but then it is implemented, its behaviour will change implicitly though the data does not [CLS] [SEP] Is there any way we can avoid this backwards compatibility issue [CLS] [SEP] I don't think the friendly answer is CODESCODES. Yes, I agree [CLS] [SEP] I think that the proposal is slightly better than. kwargs in this respect but not much better [CLS] [SEP] That's a very good point [CLS] [SEP] We could suggest a global flag raise, warn, ignore to deal with unknown sample props, controlled in the same style. as np [CLS] [SEP] seterr, which is an incredibly useful debugging feature in numpy [CLS] [SEP] Somewhat related question: will transformers also output a modified CODESCODES [CLS] [SEP] They must, right [CLS] [SEP] Or perhaps we should at least have a way of introspecting which sample. props an estimator or method knows about so that the user can make. assertions in upgrades [CLS] [SEP] Too frameworkish [CLS] [SEP] On 8 April 2015 at 04:06, Andreas Mueller wrote: Fixes 2630, also see LINKLINK. To summarize the current state of the discussion, I think something like this would be a nice solution: Estimator: CODELCODEL. User: CODELCODEL. ValueError Sample properties 'weights' are missing, unknown sample properties 'weight'. The only thing that is missing is a good way to document the required and optional sample properties of an estimator [CLS] [SEP] I have no idea how we can do this [CLS] [SEP] An advantage of having CODESCODES as an explicit argument in CODESCODES is that you can directly see that an estimator uses it and it is obvious whether the description in the docstring is missing or not [CLS] [SEP] I think just mentioning it in the fit docstring and or the estimator docstring should be fine, shouldn't it [CLS] [SEP] I don't think sklearn [CLS] [SEP] seterr raise is good btw [CLS] [SEP] It should be CODESCODES [CLS] [SEP] I could see CODESCODES or CODESCODES or convergence issues etc [CLS] [SEP] That sounds reasonable [CLS] [SEP] I think this is a more general feature that has an impact on many parts of the library [CLS] [SEP] We should make a separate pull request for it before we deal with the sample properties, shouldn't we [CLS] [SEP] Are there any disadvantages of having such a global state [CLS] [SEP] thumbs up for a separate PR [CLS] [SEP] Anything in the way of implementing A [CLS] [SEP] I don't think the error mechanism is a requirement, it is just an added precaution [CLS] [SEP] thumbs up. Maybe the data independent CV should be merged first [CLS] [SEP] So, CODESCODES will go to CODESCODES [CLS] [SEP] amueller pointed out that it should be taken and also returned by CODESCODES [CLS] [SEP] Would it also go to CODESCODES [CLS] [SEP] To CODESCODES [CLS] [SEP] I suppose so [CLS] [SEP] LINKLINK, jnothman speculated an estimator that would play nicely with memmapped arrays in multiprocessing by fitting and scoring with cross validation binarized sample weights [CLS] [SEP] If using this in CODESCODES with a custom scorer, it'd need to be passed to CODESCODES [CLS] [SEP] This goes back to the routing discussion in 3524 [CLS] [SEP] Now, is there any reason why objects doing cross validation searches, cross val score would not slice and route all of these parameters everywhere [CLS] [SEP] If there is, we could use the param routing constructor attribute suggested by jnothman [CLS] [SEP] Either way, the slicing and routing code should ideally be in one place [CLS] [SEP] EDIT: I just realized my comment would maybe be more relevant in 4632 [CLS] [SEP] The routing idea could solve the question how to specify whether scoring should be weighted or not [CLS] [SEP] and in learning to rank, CODESCODES definitely needs to be sliced and passed to scoring [CLS] [SEP] Not sure whether to post this here or in 4632, but here goes a case study that I think could test the API [CLS] [SEP] On Reddit there are many posts, and under each post there are multiple comment threads [CLS] [SEP] Let's say I want to learn to rank comments or learn to predict the best comment in a Reddit comment thread [CLS] [SEP] Threads are tree structured, but let's linearize them here for simplicity [CLS] [SEP] CODELCODEL. All threads under a post are roughly on the same topic, but they are independent conversations [CLS] [SEP] When training, predicting, and scoring I want to only compare samples from the same thread CODESCODES [CLS] [SEP] For cross validation though I'd like to split over posts CODESCODES. Things I'd need: Group aware scorer that could express things like is the true highest scoring sample among the k best samples my classifier returns among this thread [CLS] [SEP] CODESCODES or preferably just CODESCODES actually that splits across posts [CLS] [SEP] This should mostly look like standard classification, except for the definition of a custom scorer and a custom group aware learner [CLS] [SEP] This would mean support in search objects and things like CODESCODES the latter should take dict of arrays sample props too [CLS] [SEP] So I could do. CODELCODEL. This is clearly a desirable use case [CLS] [SEP] How much of this should be in scikit learn's scope [CLS] [SEP] I'd argue that cross validating by a certain label should be in scope [CLS] [SEP] And I'd like it to be supported by other CV generators, not just the CODESCODES estimators [CLS] [SEP] Currently none of the estimators support any CODESCODES in predict or score, but they should probably support CODESCODES, so we could allow other props to tag along [CLS] [SEP] This would allow learning to rank, and all sorts of controlled paired classifiers when you don't always want to form all possible pairs [CLS] [SEP] Clearly useful in my research, I wonder how you feel [CLS] [SEP] What I wonder is if there is a common case where the CODESCODES for learning to rank is different to that for cross validation; we have a problem here of global namespacing [CLS] [SEP] Would I then need name mangling like CODESCODES and CODESCODES [CLS] [SEP] Or will we just assume that the user will glue things together manually if it doesn't fit into the global meaning of CODESCODES keys [CLS] [SEP] regarding. I get the impression that Gaël's idea of CODESCODES means all these are passed around globally [CLS] [SEP] In which case you want the CV object to pick up the CODESCODES and the estimator and scorer to pick up the CODESCODES [CLS] [SEP] This would indeed allow me to implement what I proposed above, even if the CV objects in scikit learn would be hardcoded to use CODESCODES, assuming that the scorer and estimator have to be implemented by me [CLS] [SEP] So I can make them use any CODESCODES I want [CLS] [SEP] Good point, I guess it kind of works [CLS] [SEP] Until scikit learn will provide some estimator that uses some sort of CODESCODES or CODESCODES [CLS] [SEP] Am I missing anything [CLS] [SEP] Would passing them around globally break anything [CLS] [SEP] Also, should CODESCODES then use CODESCODES if a CODESCODES is passed and it's available [CLS] [SEP] Alternatively, to avoid the need for any routing or horrible name mangling in the future, any function or object that will look at CODESCODES could have arguments that specify which prop to use [CLS] [SEP] for example CODESCODES [CLS] [SEP] It would add an avoidable arg, but in the context of data coming from some other source such as a pandas DataFrame, this could actually make code more readable [CLS] [SEP] I didn't get the argument why the labels are needed for CODESCODES with a custom scorer [CLS] [SEP] The scorer should get the sample weights, right [CLS] [SEP] I'm not sure I'm entirely following your train of thought vene [CLS] [SEP] The idea was that all sample properties are spliced by cross val core and GridSearchCV [CLS] [SEP] What do you mean by routing [CLS] [SEP] I thought we wanted to pass all properties everywhere [CLS] [SEP] Why wouldn't this work with sklearn estimators using CODESCODES [CLS] [SEP] To provide a good API to the user, the CODESCODES function should be grouping aware [CLS] [SEP] In learning to rank, you would want to return a ranking for each group [CLS] [SEP] Even more, for some models, it would be impossible to predict without having the group labels explicit pairs might need to be formed [CLS] [SEP] The good news is this would only impact CODESCODES which is only called by CODESCODES [CLS] [SEP] But it would still mean a change to all CODESCODES signatures in the code base [CLS] [SEP] At least there is no CODESCODES or CODESCODES [CLS] [SEP] EDIT: or just explicitly warning CODESCODES is not supported in CODESCODES, if passed [CLS] [SEP] I'd rather do this, than change all CODESCODES s to add an argument that's not used [CLS] [SEP] About the routing, sorry [CLS] [SEP] That part is noise, I think [CLS] [SEP] I had missed that we'd pass all properties everywhere [CLS] [SEP] When Joel pointed that out I realized that my case study would work [CLS] [SEP] But I still think there's value in thinking about a end to end use case like that [CLS] [SEP] It shows that CODESCODES needs changing too, for instance [CLS] [SEP] Therefore so would CODESCODES CODESCODES [CLS] [SEP] And it raises the question whether CODESCODES should look for a CODESCODES and avoid mixing it [CLS] [SEP] I am not arguing against the proposal, I'm just trying to push it and see how it could be used [CLS] [SEP] Change to predict signature will also affect the scorer's call to. predict decision function [CLS] [SEP] On 29 April 2015 at 08:05, Vlad Niculae wrote: Yes, but default scorers could avoid passing the props, and third party estimators that require the props in predict will require custom scorers which they probably will anyway [CLS] [SEP] FYI I was working on an implementation of the proposal, but it is a bit stalled as I'm sick thumbs down. I'm wondering what we should do with CODESCODES [CLS] [SEP] Should we deprecate the slicing there [CLS] [SEP] It kinda duplicates this functionality, only with the wrong interface [CLS] [SEP] Btw, is CODESCODES the name we want to go with [CLS] [SEP] I realize my branch uses CODESCODES because that is what agramfort suggested when I started coding it [CLS] [SEP] If we agree on CODESCODES I can change it now [CLS] [SEP] don't always do what I suggest thumbs up. attributes, sample props, sample info all work for me [CLS] [SEP] I would prefer having the word CODESCODES in the name [CLS] [SEP] CODESCODES, CODESCODES, CODESCODES seem a bit better than CODESCODES etc [CLS] [SEP] votes on sample props vs sample properties vs sample attrs vs sample attributes [CLS] [SEP] Hum, one more thing: if this is added to the interface, all thrid party estimators will break [CLS] [SEP] So will we check if fit has it and otherwise raise a deprecation warning [CLS] [SEP] And deprecate all instances of sample weights [CLS] [SEP] What would be a good test for the API [CLS] [SEP] CODELCODEL. That is currently not possible, right [CLS] [SEP] See 4696 for wip. If we ever provide such functionality, I would rather add a new method, like CODESCODES for instance [CLS] [SEP] For the time being, I would require the user to call CODESCODES classifier or CODESCODES regressor on each group to obtain scores and then sort the samples by scores [CLS] [SEP] GaelVaroquaux's proposal is a bit vague w [CLS] [SEP] r [CLS] [SEP] t [CLS] [SEP] the goals [CLS] [SEP] To make it more concrete, I propose these two use cases: CODELCODEL. and. CODELCODEL. The second clearly needs the data independent CV, but I think we can still have it in mind [CLS] [SEP] I'm not sure if we agreed on what should happen with parameters that are not used supported [CLS] [SEP] Gael said he doesn't want the estimator to crash [CLS] [SEP] What do we want [CLS] [SEP] Optional warnings [CLS] [SEP] With the default being what [CLS] [SEP] In the two examples above, the groups will only be looked at by the CV objects, while the weights will only be looked at by the estimators [CLS] [SEP] How can I make sure that I don't get a warning here, but I would get a warning when using an estimator that doesn't support sample weights [CLS] [SEP] Yes, so the nested CV cases is why we might want everything to just be grouped into CODESCODES or similar [CLS] [SEP] A more explicit and hence safe but verbose alternative is: CODELCODEL. Not to derail the discussion, but is there any long term plan for attaching properties to columns features as well, as it could impact API choices on how this is implemented [CLS] [SEP] eg [CLS] [SEP] categorical variables in 3346 for instance [CLS] [SEP] trevorstephens Very good point [CLS] [SEP] I think we should design a solution that can handle column meta data as well [CLS] [SEP] One option we haven't discussed yet is creating a Dataset class in scikit learn [CLS] [SEP] The idea would be to pass X as an instance of this object in fit, score, etc [CLS] [SEP] The advantage is that we can encapsulate extra meta data [CLS] [SEP] Of course, NumPy arrays and SciPy sparse matrices would still be supported [CLS] [SEP] In the future, if we want to tackle out of core learning, such a dataset object could be responsible for loading small batches from an on disk dataset [CLS] [SEP] Some algorithms such as SGD could be rewritten to take advantage of this [CLS] [SEP] The dataset could also potentially be used to do cross validation without allocating the sliced dataset, which is something I would like to have [CLS] [SEP] I know that we have been avoiding dataset objects so far but we should at least consider it a small prototype would be nice [CLS] [SEP] I am a bit afraid of adding a dataset class [CLS] [SEP] Things seem to be pointing in this direction, though [CLS] [SEP] I would really like to ground this discussion in concrete usecases [CLS] [SEP] So a dataset class would be nice for online learning [CLS] [SEP] But that could probably also be done by just accepting an iterator, right [CLS] [SEP] Iterators would be nice for sequential learning with an iterator you loose the notion of fixed dataset of size n samples x n features [CLS] [SEP] A dataset object would be nice for out of core learning, which is different [CLS] [SEP] But before going into that, we should decide whether a dataset object would solve the present issue better than the sample props approach a dictionary like object containing extra data used for fit score transform [CLS] [SEP] I am not saying that it would, but we should at least discuss the pros and cons [CLS] [SEP] One advantage is that the extra data is encapsulated into the same object as the main data and thus, we don't need to add an extra argument to all methods in the project [CLS] [SEP] Would the dataset approach work for nested CV [CLS] [SEP] For the dictionary like approach, a better name than CODESCODES would be CODESCODES or CODESCODES or CODESCODES if we want to handle trevorstephens 's use case [CLS] [SEP] Well, the condition on the dictionary like approach was somewhat that each value is n sample long [CLS] [SEP] So that wouldn't really handle trevorstephens usecase [CLS] [SEP] If we drop this assumption, how are we going to decide what to slice [CLS] [SEP] The dataset would solve the nested CV [CLS] [SEP] Everything that starts with CODESCODES [CLS] [SEP] do we have an actual use case for attaching meta data to the columns [CLS] [SEP] so categorical vs numerical for trees [CLS] [SEP] And we want to do that by passing in a dictionary and not using pandas [CLS] [SEP] categorical vs [CLS] [SEP] numerical would be useful for OneHotEncoder too, I guess [CLS] [SEP] I think a DataFrame is a dict of 1d arrays of all the same size can't mix n samples arrays and n features arrays [CLS] [SEP] So maybe we need CODESCODES and CODESCODES then thumbs up. Maybe we should look more into how R does these things [CLS] [SEP] They already solved all problems, right thumbs up. We should really come up with a list of requirements, I'd love to get some feedback from GaelVaroquaux who started this thread [CLS] [SEP] And does anyone have a better idea on how to be safe than jnothman above [CLS] [SEP] I feel jnothman's version is a bit too verbose to be practical, but are we ever going to give helpful error messages without being that explicit [CLS] [SEP] Or do we just give up on that [CLS] [SEP] Maybe add a CODESCODES method to CODESCODES [CLS] [SEP] The method would return the routing rules for CODESCODES and CODESCODES by default but could be overridden for returning more [CLS] [SEP] For example, if an estimator needs CODESCODES, it would need to specify the routing rules for it by overriding CODESCODES [CLS] [SEP] Or maybe the method could be added to the dataset object, if we have one [CLS] [SEP] For me the problem was more what if I'm passed more than I need [CLS] [SEP] So if the estimator doesn't handle CODESCODES what will happen [CLS] [SEP] If you are not passed something that is necessary, you can always just crash [CLS] [SEP] I agree it's too verbose for what we want [CLS] [SEP] It is less verbose when you. consider that we will set a backwards compatible sensible default and. ignore any props that have routing specifications but aren't provided, perhaps with a warning that weighted scoring will become default such that. providing weights but having unweighted scorer will raise exception by. default, albeit after a slow fit process: s [CLS] [SEP] I only think routing needs to. be dealt with in metaestimators, such as pipeline where perhaps only some. transformers want weighting, etc and CV where you may need to pass. everything to the base estimator in a nested CV context [CLS] [SEP] In sample props approach, the estimator will ignore it silently I presume [CLS] [SEP] In a routing approach, if sample weights is provided and the estimator. doesn't support sample weights then an exception is possible and. appropriate [CLS] [SEP] Sure [CLS] [SEP] The problem is the case of optional support; and worse, the case where no. support changes to optional support, which I think is a real concern [CLS] [SEP] Again, consider the change to weighted scoring [CLS] [SEP] On 14 May 2015 at 05:37, Andreas Mueller wrote: I'd be happy to chat maybe jnothman can join us [CLS] [SEP] What is not entirely clear to me is: what should CODESCODES do in a pipeline [CLS] [SEP] You could warn error if none of the steps support it, or you could warn error if any of the steps doesn't support it [CLS] [SEP] Or you could provide an explicit list of which steps it should be passed to [CLS] [SEP] The last one seems a bit complicated, though [CLS] [SEP] when can we skype [CLS] [SEP] I personnally don't think that a skype is a more efficient than a written. discussion backed by thoughts and constructed arguments [CLS] [SEP] I find that in a. skype, the flow of thoughts is hard to follow [CLS] [SEP] I also like that in a. discussion like the one we are having on this issue, it is easy to go. back and look at the points made by various people [CLS] [SEP] The fact that I am. not commenting does not mean that I am not reading this thread, trying. to understand everybody's point of view, and trying to have a big. picture [CLS] [SEP] I just find it's hard thumbs up [CLS] [SEP] ok [CLS] [SEP] I'm fine with either [CLS] [SEP] I agree that in comments it is easier to structure arguments, and share code [CLS] [SEP] I would really appreciate if you could come up with some use cases that you had in mind when writing your original issue [CLS] [SEP] Did you guys have time to discuss this [CLS] [SEP] Some [CLS] [SEP] The main use case is subsampling and labeled cross validation I believe [CLS] [SEP] I still don't know how to deal with the fact that some attributes are given to the estimator and some to the cross validation [CLS] [SEP] So the example I gave above is still unclear to me: CODELCODEL. should this warn about anything [CLS] [SEP] If this doesn't warn, can we ever warn without giving very explicit routing [CLS] [SEP] What is sample weights is only supported by some steps in a pipeline [CLS] [SEP] Should we warn [CLS] [SEP] Also, I am not entirely sold on other properties apart from the labels to split on and sample weights, but that might be because I am not familiar with the ranking setting you mentioned [CLS] [SEP] I guess there are two routes as outlined by jnothman above: route everything explicitly and give meaningful errors, or pass around CODESCODES to everything and silently ignore things that you don't use [CLS] [SEP] Which will lead to silent behavior changes if we add sample weights support to anything, for example [CLS] [SEP] amueller vene GaelVaroquaux jnothman this will be the next thing I'll work on [CLS] [SEP] Which route do I take [CLS] [SEP] rvraghav93 I think I would rather work on nesting grid search and EstimatorCV [CLS] [SEP] vene what do you think [CLS] [SEP] I have a PR that the sample props partially in 4696 [CLS] [SEP] The main issue was that we don't have that many use cases and that we have ill specified requirements [CLS] [SEP] For the nesting grid search and EstimatorCV, it is pretty clear what needs to happen, I think [CLS] [SEP] Sorry, I'm catching up still [CLS] [SEP] Hi all, I saw there is an ongoing discussion on how to include the sample weight option into RFECV, but I'm not sure to understand what the current status is [CLS] [SEP] I'm working at my PhD thesis and I need to apply event by event weights to a given sample when using RFECV, in order to take the mis modeling of the generated events into account [CLS] [SEP] I attach an example of what I would like to do which is not not working at the moment, since the sample weight option is not recognised [CLS] [SEP] Could you help me [CLS] [SEP] Not sure what the status of this is, but after reading this discussion I'm using the following on something I'm doing: CODELCODEL. The screened wrapper checks automatically drops any kwargs not supported in the function signature var kwargs imply all kwargs can be supported [CLS] [SEP] It completely ignores the previous API with the special param names, though implementing both would be pretty trivial [CLS] [SEP] Caveat utilitor: I think there might be an oddity about how method wrappers are treated back in python 2 [CLS] [SEP] Thinking about this again given the merge of 8278, I would like to note a couple of things about my routing proposal: As long as the sample props are always passed, it is generally possible to do routing and renaming of sample props sought by vene by wrappers, mixins and the like: simply remove the CODESCODES column or rename it to opt out of its use [CLS] [SEP] However it remains necessary for compatibility across versions to have an explicit way to specify routing in meta estimators and CV estimators, and default routing needs to maintain former behaviour for example not pass sample weights to CODESCODES scorers, nor transformers in a CODESCODES as clear from an issue like 4632 [CLS] [SEP] The only safe wrt backwards compatibility alternative to this is that every time CODESCODES or another attribute support is added to something pre existing, it needs to also add a parameter CODESCODES at least to facilitate deprecation in the short term [CLS] [SEP] The necessity of some kind of routing management is not contingent on a generic sample properties implementation [CLS] [SEP] It applies even in the simple case of enabling weighted scoring in CODESCODES or CODESCODES 4632 [CLS] [SEP] In CODESCODES we already have selective passage of CODESCODES parameters using double underscore notation, but this requires that the fit parameter be repeated for each target estimator [CLS] [SEP] I think with these semantics extended to other contexts, this would still have full expressive power of routing, but with a routing parameter in CODESCODES and other meta CV estimators, the routing specification becomes more localised and this multiplication of input parameters not to mention the munging of names is avoided [CLS] [SEP] So while it's a separate but related issue, I'd like to hear which is preferable: a routing parameter, or always route but require attributes to be ignored by default over a deprecation period [CLS] [SEP] Hi [CLS] [SEP] So is there a way to take sample weights into account for cross validation and gridsearch [CLS] [SEP] Thanks in advance [CLS] [SEP] for fitting, yes, for scoring no [CLS] [SEP] See fit params in cross val score, for. instance. If we had a deep approach, where the user needs to explicitly specify the path they want a sample prop to take when passing in the sample prop, would it be acceptable to have non identifier keyword argument names [CLS] [SEP] For example: CODELCODEL. Python accepts this [CLS] [SEP] And if we want such a deep path based solution unlike my 9566, we need to express paths with more than just double underscores which should be reserved for nested estimators [CLS] [SEP] I note that such deep property mechanism makes modifying sample properties in resamplers as in 3855 problematic: a resampler would need to return props modified with the fully qualified names [CLS] [SEP] Any updates on being able to use 'sample weights' when performing RFECV [CLS] [SEP] Sigh [CLS] [SEP] No [CLS] [SEP] I would like to be able to spend time on this for 0 [CLS] [SEP] 21 [CLS] [SEP] but I'm. not sure where that time is going to come from, and I need to get some. commitment from other core devs that they will review it if I work on it [CLS] [SEP] No worries, completely understandable [CLS] [SEP] Thanks for all your hard work on Sklearn library [CLS] [SEP] I love how simple and universal this package is [CLS] [SEP] One last question, do you have any suggestions for a quick and dirty way to implement sample weights to RFECV [CLS] [SEP] I just want to mess around with how samples weights change the features I get [CLS] [SEP] Solution here for those interested: LINKLINK. Basically, you can define your own scorer and do index matching to get the right weights inside that function [CLS] [SEP] GridSearchCV RandomizedSearch won't do the splitting for you yet [CLS] [SEP] Yes, that's quite a neat pandas based hack [CLS] [SEP] Another solution would put the. weights as a column in X then have a transformer that drops them for. training [CLS] [SEP] I have not read all of the referenced PRs, issues and comments it's a lot but I went over this thread briefly [CLS] [SEP] One comment I have: would it be possible to introduce this new parameter while keeping the existing CODESCODES, CODESCODES, etc [CLS] [SEP] parameters [CLS] [SEP] Then as things get updated to support the new parameter, there can be a check that raises an error or warning if the user specifies both CODESCODES as it's own parameter and also CODESCODES within CODESCODES [CLS] [SEP] Then once CODESCODES is fully implemented in the ecosystem support for CODESCODES could be dropped, with warning of course [CLS] [SEP] I am also going to briefly detail my use case and results below to support this feature [CLS] [SEP] I am working on classifying activity data accelerometer [CLS] [SEP] My data looks something like this: subject walk feature 1 feature 2 y true y pred. 0 0 0 [CLS] [SEP] 2784 0 [CLS] [SEP] 146 1 [CLS] [SEP] 0 0 0 [CLS] [SEP] 1428 0 [CLS] [SEP] 1286 1 [CLS] [SEP] 0 1 0 [CLS] [SEP] 127 0 [CLS] [SEP] 8127 2 [CLS] [SEP] 1 0 0 [CLS] [SEP] 8721 0 [CLS] [SEP] 328 3 [CLS] [SEP] 1 1 0 [CLS] [SEP] 146 0 [CLS] [SEP] 376 2 [CLS] [SEP] 1 1 0 [CLS] [SEP] 4879 0 [CLS] [SEP] 274 2 [CLS] [SEP] In this case, CODESCODES would be CODESCODES and CODESCODES are the 'sample properties' [CLS] [SEP] I use CODESCODES as the groups in LOGO cross validation because my end goal is to predict for a subject with no existing data [CLS] [SEP] I need to classify each CODESCODES into one of the categories in CODESCODES, but I don't really need to classify each datapoint in reality, I have thousands of datapoints for each walk [CLS] [SEP] So ideally I would group CODESCODES by CODESCODES and select datapoints for each CODESCODES that either have above a certain threshold of prediction probability or pick the top 3 datapoints, etc [CLS] [SEP] The physical reasoning for this is that if the subject did something weird for 1 2 steps I am happy to discard that because I have a lot of other data to work off of [CLS] [SEP] I was able to achieve this by essentially copy pasting CODESCODES and hacking it up to passthrough a parameter CODESCODES a CODESCODES to the CODESCODES function, which I made to have the signature CODESCODES [CLS] [SEP] Doing this increased my cross validation scores considerably, I guess I had a lot of bad data points that I am now discarding [CLS] [SEP] I've not yet looked at all of your contribution yet, adriangb, but you might want to check out the latest proposal at 16079I haven't contributed to scikit learn jnothman, but would love to start [CLS] [SEP] Thanks for referring me to the current discussion, I will comment there [CLS] [SEP] This is a very intricate place to start [CLS] [SEP] It has challenged those of us who. know scikit learn API deeply for years [CLS] [SEP] Well, I don't expect to be able to do too much, but it cant' hurt to try [CLS] [SEP] I was also interested in working on IterativeImputer LINKLINK [CLS] [SEP] That's probably not any easier [CLS] [SEP] IterativeImputer doesn't have as many API quandaries and intricacies. involved [CLS] [SEP] More algorithmic questions [CLS] [SEP] 