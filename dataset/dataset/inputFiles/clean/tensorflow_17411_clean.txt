 System information
 Have I written custom code as opposed to using a stock example script provided in TensorFlow: No
 OS Platform and Distribution for example, Linux Ubuntu 16.04: Linux Ubuntu 16.04
 TensorFlow installed from source or binary: binary
 TensorFlow version use command below: 
1.0 cp27 cp27mu manylinux1 x86 64 can only guess since CODESCODES gives me an error already 
 Python version: Python 2.12
 Exact command to reproduce: CODESCODES 

I created a fresh virtual environment: CODESCODES 
And installed tensorflow: CODESCODES 
 CODESCODES gives me CODESCODES 

Please help me understand what's going on and how I can fix it. Thank you.

CPU information:
 CODELCODEL 
 EDIT 
Stacktrace obtained with gdb:

 CODELCODEL 

 EDIT 2 
Bazel version: N A
CUDA cuDNN version: N A
GPU model and memory: N A

After downgrading to an older version of tensorflow the error goes away. I've been advised that my CPU see information above might not work with some improvements in the new API. If this is the case, I suppose there's no solution for my problem. Therefore, I will close this thread. Feel free to correct me though. Thank you for your supportThank you for your post. We noticed you have not filled out the following field in the issue template. Could you update them if they are relevant in your case, or leave them as N A? Thanks.
Bazel version
CUDA cuDNN version
GPU model and memoryI'm having the same or similar illegal instruction problem when I run

 import tensorflow as tf

I'm only using the CPU 1.6 version on 64 bit Ubuntu Linux.

After downgrading to the CPU 1.5 version, it doesn't have this problem. How i can downgrade to the CPU 1.5 version?Try running
pip uninstall tensorflow
And then
pip install tensorflow 1.5

EDIT
just to give credit, solution is from here:
 LINKLINK Thanks konnerthg, even i was having the same problem. Your command helped me to sort this issue. Thanks again.Same here. 
With the latest wheel, I had the illegal instruction problem on Ubuntu 16.04, however I downgraded to tensorflow gpu 1.5 and it works!downgrade to 1.5 worked for me, too konnerthg Downgrading to 1.5 is just work around, this issue is not solved yet.
Which commit PR solved this issue?I am also getting this error in python 3.6Hey!
Thank you for your solution! Really. I have this problem for a week now and I was starting to become crazy! Thx!THANKS for solution. It worked on my Ubuntu 16.04, 64 bit, python3.Thanks for the solution! Downgrading to version 1.5 fixed the issue. Tested on a Ubuntu 16.04 server with python 2.7Same issue, downgrading from Tensorflow 1.6 to 1.5 solved it. Running Xubuntu 16.04 64 bit, Python 3.Thanks for all this solve my issue on Python 3.6 









now works without any problem. 

This is really weird. Does anyone know what causes the issue? I'm surprised that TensorFlow 1.6 would have a bug this big.I am encountering this issue as well with tensorflow gpu 1.0, on linux, using python 3.4. I have installed tensorflow using pip itself. Simply running this produces a SIGILL:

 CODELCODEL 
I get stack traces similar to what is mentioned in this ticket's description.

This seems to be occurring due to the use of AVX instructions in the latest Tensorflow packages uploaded to pip. Running python3 through GDB and disassembling the crashing function points to this instruction:

 CODELCODEL 

Which is an AVX instruction not supported on older or less featureful CPUs that do not have AVX support. The tensorflow gpu 1.0 pip packages do not use AVX instructions, and thus there are no problems using it with these CPUs.

The solution would be for a build of tensorflow gpu that is not compiled with AVX instructions to be published or to build a copy locally. The provided LINKLINK do not mention any specific CPU requirements nor how to determine compatibility with the provided binaries.

In the meantime, reverting to tensorflow gpu 1.0 using something like what NinemillaKA mentioned above is an effective workaround.I have the same issue, and, as many have commented, downgrade from CODESCODES to CODESCODES.

For the record, I tried running tensorflow CPU only version on 2 different computers:

Computer 1:
 CODELCODEL 
Computer 2:
 CODELCODEL 

I agree with nacl that we should have those requirements about the instruction set more clear, and if possible, a separated, updated build for processors that doesn't support AVX instructions. To be honest, I find a bit discouraging have to work with outdated version of any technology, I think many feel the same.
The alternative to having a different build for each architecture type is to use dynamic dispatch. IE, PyTorch has one binary for all architectures and selects most efficient ops during runtime caisq ThanksI also encounter the same issue. I tried it on two machines, and it works on one of them.

First, I installed it on my MacBook Pro. And I did not have any issues.
 CODELCODEL 

So I upgraded my MacPro. But this time, I am getting CODESCODES when I try to import tensorflow.

 CODELCODEL 

 Update on 3 30 2018 
The same problem with TensorFlow 1. So I guess I use TensorFlow 1. This is still an issue in 1.6 and potentially in 1. Why is this closed? yaroslavvb 's solution seems reasonable. I have downgraded to 1.5 for now.Not sure but from this link, since ver1.0, intel CPU instruction optimizer had been introduced to tensorflow. I think that probably this is the cause.
 LINKLINK  captainst that's Intel specific release, different from the official release that you get by doing CODESCODES. SIGILL issues after 1.6 upgrade are likely caused by adding AVXI have the same issue.
Ubuntu 18.04 x64
Python 3.5rc1
TensorFlow 1.0I had the same issue. Downgrade to 1.5 worked for me.Same here.Me too. Arch Linux and Intel CPU.Same here on Ubuntu 17. 10.1 VM, KVM hypervisor on Slackware, Intel KabyLake CPU I think I figured it out. I have a G4600 CPU which lacks AVX support and this was added in 1. Yes, I lock of AVX support too.To fix this on v1.6 and above, you need to compile tensorflow from source. I want to use the latest tensorflow gpu 1.7 and don't want to stick to 1. So is the solution to build tensorflow from source without AVX support enabled? I have an old Xeon E5420 but am using tensorflow gpu













You can build from source from the git clone master. It should auto adjust
to ur cpu.
 
Regards,

Jin
Downgrading to version 1.5 fixed the issue. I am using Ubuntu 16.04 with python 2.7Same Problem
Ubuntu 16.10
python 3.6
pip 9.3
with tensorflow gpu 1.7
NVIDIA GTX 1070
CUDA 9.0

solved by:
pip3 install tensorflow gpu 1.5the same problemsame problem
Ubuntu 16.04
with tensorflow gpu 1.7 and 1.6Same problem on LINKLINK running in a Paperspace notebook.

Issue is with versions 1.6 and 1.7Having the same issue, downgraded to 1. Tensorflow imports now but I'm running a script that needs tensorflow hub. Script is throwing RuntimeError: TensorFlow Hub depends on 'tf nightly' build after 20180308 or 'tensorflow 1.7'. Found tf. VERSION 1.0thanks going back to version 1.5 worked for me alsoI had the same problem with tf 1.8 on CentOS 7, CPU only. Downgrading to 1.5 worked.For those that do not want to downgrade if you build from source the problem is resolved.Having the same problem, Downgrading to 1.5 worked for me.Just had this issue too, on tensorflow gpu 1.0, at paperspace fast. ai template machineI have the same issue with tensorflow thumbs down.0. The problem is I can't downgrade to version 1.5 as I want to train with retrain. py and for this tensorflow version greater than 1.7 is a requirement. So, any suggestions? Will it be helpful if I build tensorflow from source?Same issue here:
paperspace VM with fast. ai template
GPU: nvidia quadro P4000
tensorflow 1.0 installed in virtualenv as in LINKLINK gave the error above including when installing the recommended wheel mentioned at the bottom of the page 
ubuntu 16.04, python 3.3
 CODESCODES fixed the problem. I have not tried compiling from source yet.

As a side note, CODESCODES returns nothing, so my VM's cpu doesn't support avx instructions.Hello everyone, building from source solved the issue for me.





















I phase the same problem, but after shift to tensorflow thumbs down.5 it worked for me.
My Problem: error core dumped
Processor: AMD¬Æ A4 3330mx apu with radeon tm hd graphics √ó 2 
Graphics: AMD¬Æ Sumo
GNOME: 3.28.1
OS type: 64 bit, Ubuntu 18.04 LTS

Credit: LINKLINK of course it works with earlier versions of tensorflow but i need more specifically the 1.0 version that is compatible with the new tensorflowjs. How can? mctrjalloh buy new CPU, I guessI solved it. Not by buying new CPUüòè
You have to build from sources it's not that complicated Same issue in tensorflow gpu 1.0 as well

OS: Ubuntu 18.04
Python: 3.5
Same for me:

OS: Ubuntu 16.04
Python: 3.5
NVIDIA Driver Version: 384.130

 Edit: building from sources worksThank you so much!CUDA9.0+cuDNN7.1+Tensorflow gpu1.5 is workingSame problem. Tested on Ubuntu 16 and Ubuntu 17, on 3 different machines each with 8GB RAM and 4ghz CPU. Also getting issue with GPU machines. Same problem on my Ubuntu Server 16.04. Solved by compiling TensorFlow r1.8 from source and pip install from that locally thumbs up The issue comes with docker images too. I don't want to compile from source. Is there a way around it? I don't want to downgrade either.In my case, compiling TensorFlow on Ubuntu 18.04 with Bazel solved the issue. The compilation did take time though.My case as well, recompiling TensorFlow 1.9 solved the issue. However I encountered another issue related to numpy 1.15. Downgrading to numpy 1.14.5 and the compilation worked, and been able to install the pip package.Why is this issue closed? It's still occurring in TensorFlow 1.10.I posted some links to a few community builds of tensorflow LINKLINK which might help avoid having to build from source.Indeed, I followed the instructions found at LINKLINK and get nothing more than the Illegal instruction core dumped when testing as requested on that installation page.

This issue should either not be closed or have an actual solution that makes sense for example not installing version 1.5 

It worked on Ubuntu 18.04. So again, mentioning the version on the installation page may be a good idea as a solution about what works and what doesn't.
well this issue seems to still going on. but i have a very simple solution
that will make you follow the trends at the same time:

INSTALL CONDA!
to install conda, just google it: 

create a conda evironment if you like:

conda create 

and simply run:

conda install tensorflow

if the last command doesn't work then search through another channel by
running:

anaconda search tensorflow

this outputs a list of channels from where you can download it.
choose one channel and run:

anaconda show 

this will prompt you the command you need to enter to downloading
tensorflow.
Run that command.

That's it!

MOVE TO CONDA!


wrote:

















Root problem may have to do with protobuf and incompatibility around pthread once and std: call once. I ran into a segfault myself when importing tensorflow right after another google package called sentencepiece, and the maker of sentencepiece fixed it by making a patch for protobuf that replaces the std: call once implementation with another.

 LINKLINK To make this issue more constructive, I think it would be useful it TensorFlow would check for instructions it requires on the CPU first, and print an error if they are missing. Similarly how it currently says that some instructions are available but not compiled against. Then it would be easier to differentiate between bugs and simply not using correct binary for a given CPU.Mr royyannick. Infact i have been searching google for many times and it has affected my studying both Keras and Tensoflow but today you have made my day. You are great.
ThanksTried both virtual environment and f. ing conda you, dude upstream, go f y s! on the tensorflow 1.10.1 latest in Ubuntu 16.04 with the same error. Switched to the previous version 1.9 everything works fine.I happened to reproduce this issue on a machine running an old CPU. Here is LINKLINK.

Those who want to install the latest TensorFlow for old CPU without AVX support but does not have the time to build from source can also download the WHL file from LINKLINK.This is BS. I rolled my installation back to 1.9 not 'before 1.6' as you say in this article and the binary worked the day before yesterday.
If you run this on command line:

1 

 lsb release a grep Release awk ' print 2 '

2 



and see CODESCODES for 1 and CODESCODES or CODESCODES for 2 in the output, it can be another problem that is not related with AVX support.

If those flags are not there, that's something that I should add into my note, thanks to you.Same error here,

CentOS 7, Python 3.5, Intel CPU core2 duo e8500. pip install.

version 1.9 does't work. version 1.5 imports ok.

version 1.10 seems ok on my laptop which has Ubuntu 18.04 and Intel i5 6200U.This is stated at LINKLINK 
 Note: Starting from 1.6 release, our prebuilt binaries will use AVX instructions. Older CPUs may not be able to execute these binaries. 

I think that might have been mentioned at the much more prominent location!This solved my issue:
After installing NVIDIA driver, CUDA Toolkit, and CUDNN.
First uninstall CODESCODES: 
 CODELCODEL 
Then install tensorflow gpu using LINKLINK:
 CODELCODEL 








Thanks it worksMaybe related to AVX instruction. pip prebuilt tensorflow thumbs down.6 and higher versions are built with AVX instruction, some CPUs don't have AVX instruction. pip prebuilt tensorflow thumbs down.5is not built with AVX instruction.
Suggestion: 1: use lower version of tensorflow
2: compile higher version of tensorflow from sourceYes. Indeed. It would be better, though, if the software would tell me rather than just crash. I don't have a problem with the requirement, just the way it is handled. On Linux, it would be very easy to check in CODESCODES for the CODESCODES line where CODESCODES would need to appear. If not, generate an error and CODESCODES.

Here is my flags on my old computer without AVX


System information

 
 Lenovo G500 8GB RAM description: CPU
 product: Intel R Core TM i3 CPU M 330 2.13GHz
 bus info: cpu 0
 version: CPU Version
 OS; Ubuntu thumbs down 6.05
pip: 18 version latest
I dont have gpu

 i also getting illegal instruction core dumped. tensorforflow 1.5 is working for me, 
but 
I need to install tensorflowv1.10 0r latest for my project.

I tried to to install in tensorflow in different ways, those are without anacoda, python 2. using pip. pip install upgrade tensorflow
2 without anacoda, python 3. using pip 
3. without anacoda, python 3. using pip 
4. with anacoda, python 2. using conda conda install c conda forge tensorflow 
5. without anacoda, python 2. using pip 
6. without anacoda, python 2. using pip 

neither worked for me,
what is the issue. bandarikanth 

The manner in which you install tensorflow shouldn‚Äôt matter. The problem is that the tensorflow 1.6+ prebuilt binaries require the 
 LINKLINK instruction set extensions, and your processor doesn‚Äôt support AVX. You can either build from source, move to a computer with a new enough processor, or stick with 1.Thanks

On Sun, 30 Dec 2018, 12:24 am Dan Stine wrote:


















works for me if downgrade to 1.5 pip install tensorflow 1.5 Related: LINKLINK I have this issue with tensorflow gpu 2.0 
 CODELCODEL 
 CODELCODEL 

 CODELCODEL I'm getting this crash on an i7 3520M which LINKLINK.

EDIT: Nevermind, the crash happens on a CODESCODES instruction which is part of AVX2. At least it shows that vanilla AVX support is not enough.Still have the problem with tensorflow 1.14.0 and 2.0b1.Same error on Linux Mint 19 with 2.0b1. 
Just installed with pip3 like instructed from the install page of the official sitetf1.5 isn't available in the Debian 8.8 repos.

Time to try avx.This was ridiculously hard to find on managed cluster nodes, since the OS kills the related python processes before they can even write and flush this Illegal instructions line to a output log file, and the exit code of the python process seems to be 

I was also using 2.0 beta1, currently finding out if replacing it with 2.0 fixes this.I also got this problem. I'm using CODESCODES. Downgrading to the CPU 1.5 version helped.I'm having this problem with Tensorflow 2 runing in a virtual environment in Ubuntu 18.04. It just blows my mind that the Tensorflow developers would put TF 2 as ready and available with this crap happening. NOT Impressed, you TF developers.

dmesg output from bash:
 traps: python trap invalid opcode ip:7f8c46e6d820 sp:7ffc87609f78 error:0 in pywrap tensorflow internal. so 
linuxmint 19
Intel R Pentium R CPU P6200 2.13GHz
8Gb ram kingston 

This is a BIG CPU RELATED issue.After reading this thread and having the same experience, my problem is that my linux conputer is older and has a CPU which does not support the AVX instruction set. I have tensorflow 1.5 on another virtual environment, bu to use tensorflow 2, I amd going to have to run my scripts on Google ColabI don't have the knowledge to say if the requirement of AVX makes sense or not. What I know is that the problem presents itself not only with older CPUs, but also with fairly recent ones, like mine Intel N5000. I get that doing deep learning on a N5000 is a bit of a stretch, but if the tensorflow is supported also by the RaspberryPi, I don't see the problem.

Anyway, I installed the last version of TensorFlow 2.0 on my Intel N5000 by compiling it from source. It took 14 hours because I had to run the compilation on a single core, since it needs a lot of RAM and I have only 4Gb invited to the party. 

I took inspiration from this guide LINKLINK but the experience was far from smooth, there were constantly dependencies missing that I need to install and re launch the compilation. And some other stuff too that I solved when the compilation crashed.

Have fun and thanks for the hassle. Providing through pip a binary already compiled for non AVX was clearly too much to add in your continuous integration workflow Thanks for your response, Luca. I have a really old Ubuntu 18.04 desktop
which works really well except in running the TF2 and as a matter of fact,
the latest PyTorch 1.0 I think.
Torch 1.0 works fine for me, and regarding TF2, I use Google Colab which
works fine. Am a retired data analyst and maintaining my hobbyist profile

Thans for your post


wrote:
































 
Clive DaSilva CPA, CMA
Home: 416 421 2480 Mobile: 416 560 8820
Email: 
LinkedIN: LINKLINK 
I had the same problem when running CI pipelines on a Gitlab server. The emulated CPU of the runners did not provide AVX instructions.

Installing Tensorflow with Conda instead of using PyPI's wheels fixed the problem. thumbs up I have the same issue with Tensorflow 2.0. What to do?
 CODELCODEL I managed to fix my problem by building from source using bazel. It created a whl file. Then I did pip install whl file pathYes, if your CPU does not support AVX the likely cause for CODESCODES error then you need to compile from source. This causes the code to be generated without AVX instructions and then you can use it.

Furthermore, this guarantees that the pip is built with the highest optimization level available to your platform, so you might actually see some speedup compared to using a pip built on a different platform. Focus on might.To install tensorflow with conda run this command: 
conda install c conda forge tensorflow
it works for me.
