[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327306718",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327306718",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327306718,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMwNjcxOA==",
    "user": {
      "login": "eseiver",
      "id": 5547078,
      "node_id": "MDQ6VXNlcjU1NDcwNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5547078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eseiver",
      "html_url": "https://github.com/eseiver",
      "followers_url": "https://api.github.com/users/eseiver/followers",
      "following_url": "https://api.github.com/users/eseiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/eseiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eseiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eseiver/subscriptions",
      "organizations_url": "https://api.github.com/users/eseiver/orgs",
      "repos_url": "https://api.github.com/users/eseiver/repos",
      "events_url": "https://api.github.com/users/eseiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eseiver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T21:19:32Z",
    "updated_at": "2017-09-05T21:19:32Z",
    "author_association": "NONE",
    "body": "Here's some of the error output:\r\n```\r\nLinkError: post-link script failed for package conda-forge::jupyter_contrib_nbextensions-0.3.1-py36_0\r\nrunning your command again with `-v` will provide additional information\r\nlocation of failed script: /Users/eseiver/miniconda3/envs/py3/bin/.jupyter_contrib_nbextensions-post-link.sh\r\n==> script messages <==\r\n+ /Users/eseiver/miniconda3/envs/py3/bin/jupyter-contrib-nbextension install --sys-prefix\r\n[I 10:54:16 InstallContribNbextensionsApp] jupyter contrib nbextension install --sys-prefix\r\n[W 10:54:16 InstallContribNbextensionsApp] Error: Cannot configure while the Jupyter notebook server is running\r\n[I 10:54:16 InstallContribNbextensionsApp] To perform actions even while a notebook server is running,you may use the flag\r\n    --skip-running-check\r\nTraceback (most recent call last):\r\n  File \"/Users/eseiver/miniconda3/envs/py3/bin/jupyter-contrib-nbextension\", line 11, in <module>\r\n    load_entry_point('jupyter-contrib-nbextensions==0.3.1', 'console_scripts', 'jupyter-contrib-nbextension')()\r\n  File \"/Users/eseiver/miniconda3/envs/py3/lib/python3.6/site-packages/jupyter_core/application.py\", line 267, in launch_instance\r\n    return super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)\r\n  File \"/Users/eseiver/miniconda3/envs/py3/lib/python3.6/site-packages/traitlets/config/application.py\", line 658, in launch_instance\r\n    app.start()\r\n  File \"/Users/eseiver/miniconda3/envs/py3/lib/python3.6/site-packages/jupyter_contrib_nbextensions/application.py\", line 226, in start\r\n    super(ContribNbextensionsApp, self).start()\r\n  File \"/Users/eseiver/miniconda3/envs/py3/lib/python3.6/site-packages/jupyter_core/application.py\", line 256, in start\r\n    self.subapp.start()\r\n  File \"/Users/eseiver/miniconda3/envs/py3/lib/python3.6/site-packages/jupyter_contrib_nbextensions/application.py\", line 173, in start\r\n    toggle_install_files(self._toggle_value, **kwargs_files)\r\n  File \"/Users/eseiver/miniconda3/envs/py3/lib/python3.6/site-packages/jupyter_contrib_nbextensions/install.py\", line 60, in toggle_install_files\r\n    'Cannot configure while the Jupyter notebook server is running')\r\njupyter_contrib_nbextensions.install.NotebookRunningError: Cannot configure while the Jupyter notebook server is running\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327330771",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327330771",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327330771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMzMDc3MQ==",
    "user": {
      "login": "eseiver",
      "id": 5547078,
      "node_id": "MDQ6VXNlcjU1NDcwNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5547078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eseiver",
      "html_url": "https://github.com/eseiver",
      "followers_url": "https://api.github.com/users/eseiver/followers",
      "following_url": "https://api.github.com/users/eseiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/eseiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eseiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eseiver/subscriptions",
      "organizations_url": "https://api.github.com/users/eseiver/orgs",
      "repos_url": "https://api.github.com/users/eseiver/repos",
      "events_url": "https://api.github.com/users/eseiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eseiver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T23:24:50Z",
    "updated_at": "2017-09-05T23:26:37Z",
    "author_association": "NONE",
    "body": "Another update after much detective work: checked runtime info in `Library/Jupyter/runtime/` and there's an nbserver json file that includes server information:\r\n```\r\n{\r\n  \"base_url\": \"/\",\r\n  \"hostname\": \"localhost\",\r\n  \"notebook_dir\": \"/Users/eseiver/PLOS_Corpus_Project\",\r\n  \"password\": false,\r\n  \"pid\": 1287,\r\n  \"port\": 8888,\r\n  \"secure\": false,\r\n  \"token\": [TOKEN],\r\n  \"url\": \"http://localhost:8888/\"\r\n}\r\n```\r\nI'll delete this file, but I suspect there's some kind of caching/clean-up issue at play here.\r\n\r\nUpdate: running `notebook.notebookapp.list_running_servers()` ([code](https://github.com/jupyter/notebook/blob/d4c6fe46cea2d7daa6dbe2647d766eec57ebb56e/notebook/notebookapp.py#L1518-L1532)) did NOT delete that file",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327332327",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327332327",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327332327,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMzMjMyNw==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T23:34:40Z",
    "updated_at": "2017-09-05T23:34:40Z",
    "author_association": "MEMBER",
    "body": "So looking at the linked code: \r\n\r\nhttps://github.com/jupyter/notebook/blob/d4c6fe46cea2d7daa6dbe2647d766eec57ebb56e/notebook/notebookapp.py#L1525-L1532\r\n\r\nIt would be nice to have the cleanup functionality separated from the listing functionality. That way we could define a separate app just to handle this kind of use case. Telling people that the only way to clean up these files automatically is via the \"list\" functionality which magically cleans stuff up in the background seems confusing at best.\r\n\r\nAt the least we should have a way to raise an explicit error rather than silently pass if removing a file fails. Ideally, that error would include a message informing the user of which file they might need to `rm` manually because the auto-removal failed.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327335597",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327335597",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327335597,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMzNTU5Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-05T23:57:07Z",
    "updated_at": "2017-09-05T23:57:07Z",
    "author_association": "MEMBER",
    "body": "The \"cannot upgrade\" should also be fixed in the contrib repository. There should be a way to force upgrade, and not track that file down manually. \r\n\r\nThe file not being deleted is likely because PID are reused – they are assigned in sequence –, we could – for example – store in the json file the date at which the server was started, and check if that was before (`now` minus `machine uptime`), in which case we can remove the file, as the PID has likely been given to another process.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327336130",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327336130",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327336130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMzNjEzMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-06T00:01:06Z",
    "updated_at": "2017-09-06T00:01:06Z",
    "author_association": "MEMBER",
    "body": "There seem to be an [uptime](https://pypi.python.org/pypi/uptime/) package on PyPI that provides a `boottime()` function.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327339886",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327339886",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327339886,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzMzOTg4Ng==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-06T00:28:27Z",
    "updated_at": "2017-09-06T00:28:27Z",
    "author_association": "MEMBER",
    "body": "I wanted to say \"Couldn't we also check the process name currently attached to the PID?\" and then proceed to suggest appropriate logic to handle watching for \"jupyter/ipython\" named processes (though that wouldn't be foolproof)… however I just spent some time looking at how you would get the name of a process given it's PID… and it seems pretty hard to do in an OS independent way… and even if we continued our OS dependence in ([our code](https://github.com/jupyter/notebook/blob/master/notebook/utils.py#L277-L300)) it seems like it's hard to do without introducing a new dependency like [this SO post](https://stackoverflow.com/a/4189747/1816995) suggests with a package like [psutil](https://github.com/giampaolo/psutil).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327346627",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327346627",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327346627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzM0NjYyNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-06T01:18:31Z",
    "updated_at": "2017-09-06T01:18:31Z",
    "author_association": "MEMBER",
    "body": "Yes, and in many case we could not even find \"jupyter\" or \"ipython\" in the process name, we would just get `python`. The other possibility would be to make a request to given ip/port and see if we get a reply. But I'm unsure this is reasonable.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/327430489",
    "html_url": "https://github.com/jupyter/notebook/issues/2829#issuecomment-327430489",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2829",
    "id": 327430489,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzQzMDQ4OQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-06T09:35:42Z",
    "updated_at": "2017-09-06T09:35:42Z",
    "author_association": "MEMBER",
    "body": "> The other possibility would be to make a request to given ip/port and see if we get a reply. \r\n\r\nThis ought to work. It should identify itself as a tornado server in the headers, at least. We do have something tricky in this particular case because there are *two* leftover runtime files, each claiming to be on the same http endpoint (unsurprising, since it's the default). That's probably pretty common, come to think of it.\r\n\r\n@eseiver I think you're exactly right that a runtime file was leftover after a server stopped, for whatever reason. Removing it by hand is an AOK workaround while we figure out why the file was leftover and how we can do better cleaning up after this event occurs. In general, the runtime directory should be safe to delete in its entirety if no Jupyter processes are running.",
    "performed_via_github_app": null
  }
]
