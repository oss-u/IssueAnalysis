[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/358389727",
    "html_url": "https://github.com/jupyter/notebook/issues/3106#issuecomment-358389727",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3106",
    "id": 358389727,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODM4OTcyNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-17T18:01:37Z",
    "updated_at": "2018-01-17T18:01:37Z",
    "author_association": "MEMBER",
    "body": "The process is running the IPython kernel - it waits for a message such as an execution request, then processes it and goes back to waiting for another message.\r\n\r\nWhen you fork, there are now two processes running the same code. The parent process behaves normally, but the child process finishes the code you wrote and goes back to waiting for a message on sockets that belong to the parent process. I don't know exactly what's meant to happen in that case, but I'm pretty sure it's not supported.\r\n\r\nForking is fiddly. If you do it in the kernel, I'd guess you need to make absolutely sure that the child process exits when it finishes the code you meant it to run, e.g. by calling [os._exit(0)](https://docs.python.org/3/library/os.html#os._exit).",
    "performed_via_github_app": null
  }
]
