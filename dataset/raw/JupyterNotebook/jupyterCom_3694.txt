[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/398302486",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-398302486",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 398302486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODMwMjQ4Ng==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T07:29:51Z",
    "updated_at": "2018-06-19T07:29:51Z",
    "author_association": "NONE",
    "body": "Most converters use Jupyter cell metadata to map the cell-specific rendering options available in R markdown. Yet no standard metadata seems yet covers this usage. Let's see if we can normalize this at https://github.com/jupyter/notebook/issues/3700",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/398515191",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-398515191",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 398515191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODUxNTE5MQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-19T19:22:36Z",
    "updated_at": "2018-06-19T19:22:36Z",
    "author_association": "MEMBER",
    "body": "Generally I'm interested in exploring new formats and supporting markdown formats more readily. Most of what holds things back is a desire to maintain the current formats people are working with.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/398769103",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-398769103",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 398769103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODc2OTEwMw==",
    "user": {
      "login": "grst",
      "id": 7051479,
      "node_id": "MDQ6VXNlcjcwNTE0Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7051479?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grst",
      "html_url": "https://github.com/grst",
      "followers_url": "https://api.github.com/users/grst/followers",
      "following_url": "https://api.github.com/users/grst/following{/other_user}",
      "gists_url": "https://api.github.com/users/grst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grst/subscriptions",
      "organizations_url": "https://api.github.com/users/grst/orgs",
      "repos_url": "https://api.github.com/users/grst/repos",
      "events_url": "https://api.github.com/users/grst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T14:26:28Z",
    "updated_at": "2018-06-20T14:26:28Z",
    "author_association": "NONE",
    "body": "Would be nice to have a text-based format officially supported. \r\nI don't see how this conflicts with maintaining compatibility with the current format. \r\n\r\nDo you have suggestions for a way forward? ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/398786802",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-398786802",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 398786802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODc4NjgwMg==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-20T15:10:43Z",
    "updated_at": "2018-06-20T15:10:43Z",
    "author_association": "MEMBER",
    "body": "> I don't see how this conflicts with maintaining compatibility with the current format.\r\n\r\nApologies, \"maintain\" was a bit loaded. Maintenance includes keeping old things working and moving current things forward. The limitation is in time / resources, not in ability.\r\n\r\n> Do you have suggestions for a way forward?\r\n\r\nHere are some approaches to start with\r\n\r\n* Find all the current proposals and proposers. Collate the approaches in an issue (like this one!)\r\n  * Examples: [ipymd](https://github.com/rossant/ipymd), [cabinet](https://github.com/nteract/cabinet)\r\n* Propose your own and implement it in at least two frontends (classic notebook, nbconvert, jupyterlab, nteract, etc.)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/406160703",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-406160703",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 406160703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjE2MDcwMw==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-19T05:39:38Z",
    "updated_at": "2018-07-19T05:39:38Z",
    "author_association": "NONE",
    "body": "Hello @rgbkrk , we've made some progresses on our own implementations, maybe it's a good time to chat a bit more on alternative, text-only formats for the notebooks.\r\n\r\nI have experimented two directions\r\n- Jupyter notebooks as R markdown, at [nbrmd](https://github.com/mwouts/nbrmd). That solution has the advantage of being based on a [well known standard](https://rmarkdown.rstudio.com/), and possibly enhances Jupyter notebooks with the advanced conversion tools for R markdown (see the recent _R Markdown: The Definitive Guide_ [announcement](https://bookdown.org/yihui/rmarkdown/))\r\n- Jupyter notebooks as plain python scripts at [nbsrc](https://github.com/mwouts/nbsrc).\r\n\r\nAs suggested by @grst, the text version works in pair with the standard `.ipynb` file. When the text version of the notebook is edited outside of Jupyter, and the notebook is reloaded, then inputs are taken from text version, and outputs from the `.ipynb` file.\r\n\r\nWe have implemented support for\r\n- jupyter notebook\r\n- jupyter nbconvert\r\n\r\nSupport for jupyter lab is in the pipe, and depends on https://github.com/jupyterlab/jupyterlab/issues/3896.\r\n\r\nI think the python script notebook is promising, as it sounds familiar to most Jupyter users, and allows the edition of notebooks in python IDEs. First difficulty however it to make sure that we start with a good file format for this. May I have your feedback on the proposed [specifications](https://github.com/mwouts/nbrmd/blob/master/tests/python_notebook_sample.py)? (I note that there used to be an official solution for this with [nbpy](https://github.com/jupyter/nbformat/blob/master/nbformat/v3/nbpy.py) in nbformat v3, but for some reason it was not ported to v4)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/406706661",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-406706661",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 406706661,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjcwNjY2MQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-20T19:40:24Z",
    "updated_at": "2018-07-20T19:40:24Z",
    "author_association": "MEMBER",
    "body": "Thank you! I'm loving what I see so far. @mpacer -- check this out ^__^",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/414613419",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-414613419",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 414613419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDYxMzQxOQ==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T09:33:48Z",
    "updated_at": "2018-08-21T09:33:48Z",
    "author_association": "NONE",
    "body": "Hi Kyle, I just published a new release of the [nbrmd](https://github.com/mwouts/nbrmd/) package (companion Python script, or R markdown notebook, for Jupyter notebooks). I think it's becoming good enough for starting a larger beta-testing phase. Feel free to forward to people how may be interested. Thanks",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/414627450",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-414627450",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 414627450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDYyNzQ1MA==",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T10:25:37Z",
    "updated_at": "2018-08-21T10:25:37Z",
    "author_association": "MEMBER",
    "body": "@mwouts Very cool! I don't think I have ever seen a code coverage that high (95%) for such a project. \r\n\r\nHave you thought about a related variation:\r\n\r\n1. A command that, while editing the notebook, turn all cells into one big code cell cell that has been parsed into your pure Python/R version.\r\n2. User edits the big code cell (moves sections around, etc)\r\n3. Parse the pure code cell back into its individual notebook cells.\r\n\r\nThat would make the notebook editor able to do anything that a regular editor can.\r\n\r\nAlso, do you actually need the ipynb file? If it didn't exist (or wasn't visible) it would be less confusing to the user as to what the goal of your project is.\r\n\r\nThanks for sharing!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/414658171",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-414658171",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 414658171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDY1ODE3MQ==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T12:34:58Z",
    "updated_at": "2018-08-21T12:34:58Z",
    "author_association": "NONE",
    "body": "Thanks @dsblank , I appreciate your comments! Actually this is my first open source contribution, so I dedicated quite a lot of time, indeed, to coverage...\r\n\r\nThanks for suggesting the variation, that's interesting. Do I understand correctly that you suggest a new cell magic that would work similarly to `%load` and `%%writefile`, but instead of the cell, allow to edit the code for the full notebook?\r\n\r\nI agree that editing the python code directly is very comfortable. My current process for this is\r\n- open notebook in Jupyter, with metadata (or global config) `nbrmd_formats=\"ipynb,py\"`\r\n- save notebook (both py and ipynb files are created/updated)\r\n- open py file in an IDE, refactor it there\r\n- refresh Jupyter notebook in Jupyter (Ctrl+R, after making sure URL has no # after file name)\r\n\r\nWhat I obtain at that point is\r\n- a notebook with up-to-date inputs taken from the py file\r\n- outputs that match unchanged inputs are taken from the ipynb file\r\n- Jupyter kernel is unchanged\r\n\r\nI think the result is similar in functionality to what you're expecting above - could you confirm? Differences to your suggestion are\r\n- source edition is done with a third party tool\r\n- a file is created on disk\r\n- and the user needs to refresh the notebook.\r\n\r\nRegarding your second question, when a user does not want the ipynb file, he should change the default configuration (equal to \"ipynb\") to \r\n```\r\nc.ContentsManager.default_nbrmd_formats = \"\"\r\n```\r\nBut then, he won't be able to store (source) notebooks outputs. Also, the above manipulation would have the effect of removing all outputs from the notebook.\r\n\r\nI agree that having files working in pair is not that common, yet I think the purpose of each is clear. For instance, when `nbrmd_formats=\"ipynb,py\"`,\r\n- each of py and ipynb file opens the *same* notebook in Jupyter. And Jupyter updates both.\r\n- the py file is the source of the notebook, ipynb both contains source and outputs\r\n- sharing just one of these is enough to reconstruct the notebook (provided that running the notebook yields the current ipynb outputs!)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/414815832",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-414815832",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 414815832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDgxNTgzMg==",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T20:44:57Z",
    "updated_at": "2018-08-21T20:44:57Z",
    "author_association": "MEMBER",
    "body": "@mwouts Yes, something similar. I imagine a keyboard command, or a button that you would press, that would turn the entire notebook into one cell. After editing it as usual, then pressing the button again would parse it back into many cells of the appropriate type.\r\n\r\nI may have made a mistake, but when I edited the .ipynb (using the myminder), saved, and closed, the .py file wasn't updated. That's why I was confused.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/414827652",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-414827652",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 414827652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDgyNzY1Mg==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-21T21:28:05Z",
    "updated_at": "2018-08-21T21:28:05Z",
    "author_association": "NONE",
    "body": "I see - in other words, the command or button would switch the notebook view to the text editor view, and then refresh the notebook view again. It sounds feasible - switching from raw view to notebook view should not be too difficult, but that belongs to a different part of Jupyter (i.e. notebook or lab application) than the one I've been exploring till now (the contents manager).\r\n\r\nMay I ask which file you have been editing? The default 'nbrmd_formats' for the binder demo is 'ipynb', thus saving notebook will not create py files, until a \"nbrmd_formats\" metadata is added to the file (that includes \"py\" in its values). \r\n\r\nA sample py/ipynb file with that metadata activated is 'Sample notebook with python representation' in the demo folder - a notebook that actually describes an experimentation similar to the one we are discussing (switching manually from notebook to editor view on py, and refresh notebook).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/415384543",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-415384543",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 415384543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTM4NDU0Mw==",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-23T11:38:20Z",
    "updated_at": "2018-08-23T11:38:38Z",
    "author_association": "MEMBER",
    "body": "It doesn't have to switch to the text editor view, just concat everything (via your algorithm to convert to text) as one cell in the notebook. Then do the reverse (parse back into cells via your code) when done editing.\r\n\r\nI'll have to try the mybinder again.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/415406640",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-415406640",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 415406640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTQwNjY0MA==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-23T13:04:30Z",
    "updated_at": "2018-08-23T13:04:30Z",
    "author_association": "NONE",
    "body": "Sure ! Please retry the mybinder, especially the _Sample notebook with python representation_, which I do expect to work (tested yesterday).\r\n\r\nWould you like to open an issue at https://github.com/mwouts/nbrmd/ ? Converting notebook to text is as easy as `text = nbrmd.writes(nb, ext='.py')`, and reading back is `nb = nbrmd.reads(text, ext='.py')`. You could also try that in the mybinder with:\r\n```\r\nimport nbrmd\r\nnb = nbrmd.readf('Sample notebook with python representation.ipynb') # Load notebook from file\r\ntext = nbrmd.writes(nb, ext='.py')                                   # Write to text\r\nnb = nbrmd.reads(text, ext='.py')                                    # Read notebook from text\r\n```\r\nHowever, as mentioned above I have no idea how to map a Jupyter button or shortcut to these functions, so we will probably have to work together on this ;-)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/417877890",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-417877890",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 417877890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzg3Nzg5MA==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-01T18:16:53Z",
    "updated_at": "2018-09-01T18:16:53Z",
    "author_association": "NONE",
    "body": "@rgbkrk, I like the Hydrogen package for Atom, and also the fact that it works with classical python scripts. Is it right that, currently, it cannot open Jupyter notebooks? I have the feeling that we could change that easily with the [jupytext](https://github.com/mwouts/jupytext) package (same project as before, we just found a better name!).\r\n\r\nCommand line conversion are\r\n```\r\njupytext notebook.ipynb .py                      # create or overwrite notebook.py\r\njupytext notebook.py      .ipynb --update  # update notebook.ipynb (preserve outputs for unchanged cells)\r\n```\r\n\r\nRunning these commands when the file is opened/closed seems fairly accessible, right? Obviously you may prefer the `jupytext` package to become stable first, but I think we're not so far now (feedback is very welcome!). \r\n\r\nPossibly too much anticipation for now, but I also note that we could even collect the outputs of executed code in Hydrogen to update the original Jupyter notebook - `jupytext` already does the matching of python cells versus the notebook, and if I'm correct, the outputs you are getting from the kernel look like very much the ones in the ipynb file...",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/418236803",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-418236803",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 418236803,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODIzNjgwMw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T04:20:35Z",
    "updated_at": "2018-09-04T04:20:35Z",
    "author_association": "MEMBER",
    "body": "Finally got a chance to read through this issue today. 😄  \r\n\r\nThat's right that Hydrogen does not open jupyter notebooks. It also doesn't use the jupyter notebook server, instead opting to connect directly to kernels. The outputs are all in memory (and yes the same format as the notebook as they come straight from the kernels).\r\n\r\n@benrussert ^^ see above",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/418257770",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-418257770",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 418257770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODI1Nzc3MA==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T06:41:31Z",
    "updated_at": "2018-09-04T06:41:31Z",
    "author_association": "NONE",
    "body": "Great! So it should be doable to update Jupyter notebooks with results of execution within Hydrogen. But we will see that later on, right? \r\n\r\nFor now we could discuss identification of cells in python scripts (and possibly in a specific Hydrogen issue if you prefer!). If I get it correctly, in Hydrogen the start of cell pattern is `# %%` - while in `jupytext` it is `# + {}` (with metadata allowed inside the curly brackets). How do you identify end of cell in Hydrogen (in `jupytext`: end of python paragraph when no explicit start of cell is provided, otherwise next explicit start of cell, or `# -`) ?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/418458990",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-418458990",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 418458990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODQ1ODk5MA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T17:49:57Z",
    "updated_at": "2018-09-04T17:49:57Z",
    "author_association": "MEMBER",
    "body": "I _think_ it's the next occurrence of the `# %%` marker (or the end of the document if not another marker). I personally haven't been using it.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/421607647",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-421607647",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 421607647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTYwNzY0Nw==",
    "user": {
      "login": "BenRussert",
      "id": 10860657,
      "node_id": "MDQ6VXNlcjEwODYwNjU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10860657?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BenRussert",
      "html_url": "https://github.com/BenRussert",
      "followers_url": "https://api.github.com/users/BenRussert/followers",
      "following_url": "https://api.github.com/users/BenRussert/following{/other_user}",
      "gists_url": "https://api.github.com/users/BenRussert/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BenRussert/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BenRussert/subscriptions",
      "organizations_url": "https://api.github.com/users/BenRussert/orgs",
      "repos_url": "https://api.github.com/users/BenRussert/repos",
      "events_url": "https://api.github.com/users/BenRussert/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BenRussert/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-15T17:55:45Z",
    "updated_at": "2018-09-15T17:55:45Z",
    "author_association": "NONE",
    "body": "> So it should be doable to update Jupyter notebooks with results of execution within Hydrogen. But we will see that later on, right?\r\n\r\nYes, this could even be done via a hydrogen plugin package using kernel middleware. This will make development much cleaner and easier. I will be very happy to help you understand the api and middleware and may even get this repo started if I find the time. For more info, check out the example plugins [listed on our readme](https://github.com/nteract/hydrogen/#plugins-for-hydrogen). I'll add a couple more links to that page later, you want an example using kernel middleware which most of these do.\r\n\r\n> If I get it correctly, in Hydrogen the start of cell pattern is # %% - while in jupytext it is # + {} (with metadata allowed inside the curly brackets). How do you identify end of cell in Hydrogen (in jupytext: end of python paragraph when no explicit start of cell is provided, otherwise next explicit start of cell, or # -) ?\r\n\r\nThe cell patterns below are all *currently* supported, of course, we could discuss and change that in a future version if people agree that is the way to go.  Here is an example file containing a total of 5 cells (using all the supported comment markers). You can try this out in hydrogen.\r\n```python\r\nprint(\"The first cell is implied, so you dont have to put the separator comment there\")\r\n\r\n# empty lines or normal comments are just ignored\r\n\r\nprint(\"This is still part of the first cell\")\r\n# %%\r\nprint(\"This is the second cell. Empty lines do not make a difference, only cell separator comments\")\r\n\r\n# <codecell>\r\nprint('This is another (currently) supported cell syntax')\r\n\r\n# In[]:\r\nprint('Another syntax, mimicing a notebook execution count')\r\n\r\n# In[42]:\r\nprint('You can put numbers here if you want')\r\n\r\n# anything below the last cell comment will be part of the last cell\r\n\r\n```\r\n You can get more info about the *current* way cells work in hydrogen [here](https://nteract.gitbooks.io/hydrogen/docs/Usage/GettingStarted.html#hydrogen-run-cell)\r\n\r\nThanks for the mention @rgbkrk , this is good stuff!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/421616615",
    "html_url": "https://github.com/jupyter/notebook/issues/3694#issuecomment-421616615",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3694",
    "id": 421616615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTYxNjYxNQ==",
    "user": {
      "login": "mwouts",
      "id": 29915202,
      "node_id": "MDQ6VXNlcjI5OTE1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/29915202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwouts",
      "html_url": "https://github.com/mwouts",
      "followers_url": "https://api.github.com/users/mwouts/followers",
      "following_url": "https://api.github.com/users/mwouts/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwouts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwouts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwouts/subscriptions",
      "organizations_url": "https://api.github.com/users/mwouts/orgs",
      "repos_url": "https://api.github.com/users/mwouts/repos",
      "events_url": "https://api.github.com/users/mwouts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwouts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-15T18:56:07Z",
    "updated_at": "2018-09-15T18:56:07Z",
    "author_association": "NONE",
    "body": "Thanks @BenRussert . I like very much Hydrogen and also the concept of working with simple scripts!\r\n\r\nI will not be able to contribute a JavaScript as I have do not know the language. Yet I will soon be working on a Python plugin for Jupyter that will allow to open and edit Hydrogen Python scripts in Jupyter as notebooks (and save notebooks as Hydrogen scripts), which I think may still be useful to Hydrogen users.\r\n\r\nI will be happy to discuss an extension of Hydrogen's syntax at https://github.com/mwouts/jupytext/issues/59. Most important question in my opinion is how to represent cell type and cell metadata.\r\n\r\nA little detail: I intend to support only the `# %%` syntax there, in order to offer a stable round trip conversion (I guess the other syntaxes are found in the scripts generated by either `nbformat.v3.nbpy` or `jupyter nbconvert --to script`, i.e. scripts that were extracted from a Jupyter notebook, and could be generated directly as Hydrogen compatible script from the notebook itself using Jupytext).",
    "performed_via_github_app": null
  }
]
