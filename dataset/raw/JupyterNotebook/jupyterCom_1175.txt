[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/192670998",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-192670998",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 192670998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MjY3MDk5OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-05T15:20:33Z",
    "updated_at": "2016-03-05T15:20:33Z",
    "author_association": "MEMBER",
    "body": "Have a look at [ipycache](https://github.com/rossant/ipycache) if you have long-running cells that you don't always want to re-run. I don't think we want to get into defining a DAG of cells.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/193361660",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-193361660",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 193361660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MzM2MTY2MA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-07T17:31:53Z",
    "updated_at": "2016-03-07T17:31:53Z",
    "author_association": "MEMBER",
    "body": "There is a [long thread](https://mail.scipy.org/pipermail/ipython-dev/2013-July/011839.html) we had a few  years[*] ago about that on the mailing list. \n\n[*] OMG I'm old now. \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/297582787",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-297582787",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 297582787,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzU4Mjc4Nw==",
    "user": {
      "login": "JamiesHQ",
      "id": 476301,
      "node_id": "MDQ6VXNlcjQ3NjMwMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/476301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamiesHQ",
      "html_url": "https://github.com/JamiesHQ",
      "followers_url": "https://api.github.com/users/JamiesHQ/followers",
      "following_url": "https://api.github.com/users/JamiesHQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamiesHQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamiesHQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamiesHQ/subscriptions",
      "organizations_url": "https://api.github.com/users/JamiesHQ/orgs",
      "repos_url": "https://api.github.com/users/JamiesHQ/repos",
      "events_url": "https://api.github.com/users/JamiesHQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamiesHQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-27T01:05:25Z",
    "updated_at": "2017-04-27T01:05:25Z",
    "author_association": "MEMBER",
    "body": "@nvdv : We're doing a little housekeeping on our issue log and noticed this thread from 2016. Has this issue been resolved to your satisfaction and can it be closed? thanks!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/297619337",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-297619337",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 297619337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzYxOTMzNw==",
    "user": {
      "login": "nvdv",
      "id": 745431,
      "node_id": "MDQ6VXNlcjc0NTQzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/745431?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nvdv",
      "html_url": "https://github.com/nvdv",
      "followers_url": "https://api.github.com/users/nvdv/followers",
      "following_url": "https://api.github.com/users/nvdv/following{/other_user}",
      "gists_url": "https://api.github.com/users/nvdv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nvdv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nvdv/subscriptions",
      "organizations_url": "https://api.github.com/users/nvdv/orgs",
      "repos_url": "https://api.github.com/users/nvdv/repos",
      "events_url": "https://api.github.com/users/nvdv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nvdv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-27T05:57:25Z",
    "updated_at": "2017-04-27T05:57:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "It is feature request. I am not sure it was implemented, but its up to you\nto close it if you think its out of scope.\n\nOn Apr 27, 2017 04:05, \"JamieW\" <notifications@github.com> wrote:\n\n@nvdv <https://github.com/nvdv> : We're doing a little housekeeping on our\nissue log and noticed this thread from 2016. Has this issue been resolved\nto your satisfaction and can it be closed? thanks!\n\nâ€”\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<https://github.com/jupyter/notebook/issues/1175#issuecomment-297582787>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AAtf16APooTt3sBAP6TLQPtctfkAultEks5rz-nXgaJpZM4HqAPF>\n.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/426709007",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-426709007",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 426709007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNjcwOTAwNw==",
    "user": {
      "login": "adam-m-jcbs",
      "id": 10675925,
      "node_id": "MDQ6VXNlcjEwNjc1OTI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10675925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adam-m-jcbs",
      "html_url": "https://github.com/adam-m-jcbs",
      "followers_url": "https://api.github.com/users/adam-m-jcbs/followers",
      "following_url": "https://api.github.com/users/adam-m-jcbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/adam-m-jcbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adam-m-jcbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adam-m-jcbs/subscriptions",
      "organizations_url": "https://api.github.com/users/adam-m-jcbs/orgs",
      "repos_url": "https://api.github.com/users/adam-m-jcbs/repos",
      "events_url": "https://api.github.com/users/adam-m-jcbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adam-m-jcbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-03T16:42:10Z",
    "updated_at": "2018-10-03T16:42:10Z",
    "author_association": "NONE",
    "body": "The [long thread](https://mail.scipy.org/pipermail/ipython-dev/2013-July/011839.html) discussing this, linked above by @Carreau , is unreachable for me.  So apologies if I'm rehashing things discussed there.\r\n\r\nI certainly agree managing a DAG of cells is not desirable.  But it would be cool if there was a built-in cell magic for stating cells to be automatically run first before running the current cell.  Naively, this doesn't seem to be too burdensome a feature to implement, but I'm mostly a Jupyter notebook user, not developer, so I could be wrong.  Does there exist any such cell magic, or a cell magic that could be used for this purpose?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/430602794",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-430602794",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 430602794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDYwMjc5NA==",
    "user": {
      "login": "mrgutkun",
      "id": 8048966,
      "node_id": "MDQ6VXNlcjgwNDg5NjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8048966?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrgutkun",
      "html_url": "https://github.com/mrgutkun",
      "followers_url": "https://api.github.com/users/mrgutkun/followers",
      "following_url": "https://api.github.com/users/mrgutkun/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrgutkun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrgutkun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrgutkun/subscriptions",
      "organizations_url": "https://api.github.com/users/mrgutkun/orgs",
      "repos_url": "https://api.github.com/users/mrgutkun/repos",
      "events_url": "https://api.github.com/users/mrgutkun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrgutkun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-17T12:09:37Z",
    "updated_at": "2018-10-17T12:09:37Z",
    "author_association": "NONE",
    "body": "For future reference: the long thread was [moved](https://mail.python.org/pipermail/ipython-dev/2013-July/010725.html).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/441130788",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-441130788",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 441130788,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTEzMDc4OA==",
    "user": {
      "login": "nickurak",
      "id": 1140821,
      "node_id": "MDQ6VXNlcjExNDA4MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1140821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickurak",
      "html_url": "https://github.com/nickurak",
      "followers_url": "https://api.github.com/users/nickurak/followers",
      "following_url": "https://api.github.com/users/nickurak/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickurak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickurak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickurak/subscriptions",
      "organizations_url": "https://api.github.com/users/nickurak/orgs",
      "repos_url": "https://api.github.com/users/nickurak/repos",
      "events_url": "https://api.github.com/users/nickurak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickurak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T22:53:08Z",
    "updated_at": "2018-11-22T22:53:08Z",
    "author_association": "NONE",
    "body": "Conversely, while a dependency graph might tell you you don't need to evaluate/re-evaluate cell B just because A changed, it **might also** tell you that you're going to have a bad time trying to evaluate C if C depends on A.\r\n\r\nIn accordance with https://jupyter-notebook.readthedocs.io/en/stable/security.html , if someone tried to execute a cell that depended on another, I wonder if it would make sense to do so automatically?\r\n\r\nAt a minimum, it might be helpful to have some visual feedback to indicate that the cell isn't runnable until some particular cell above satisfies its dependencies.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/557562640",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-557562640",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 557562640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzU2MjY0MA==",
    "user": {
      "login": "pedrovgp",
      "id": 2333868,
      "node_id": "MDQ6VXNlcjIzMzM4Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2333868?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrovgp",
      "html_url": "https://github.com/pedrovgp",
      "followers_url": "https://api.github.com/users/pedrovgp/followers",
      "following_url": "https://api.github.com/users/pedrovgp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrovgp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrovgp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrovgp/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrovgp/orgs",
      "repos_url": "https://api.github.com/users/pedrovgp/repos",
      "events_url": "https://api.github.com/users/pedrovgp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrovgp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T14:57:10Z",
    "updated_at": "2019-11-22T14:57:10Z",
    "author_association": "NONE",
    "body": "@takluyver, is there any reason for a DAG of cells to be out of question? Visualising cells in a graph would certainly allow both cell dependency to become clearer as well as improve story telling capabilities, since non-linear (branching) stories are hard to tell within today's notebooks.\r\n\r\nFor a simple concrete example: imagine a notebook to evaluate three real estate expansion plans for a given city. The first node of cells loads the current real estate data and describes the current state of affairs. From there, you get three branches, each of them following similar logic but following different scenario premisses and arriving to comparable (but different) end results.\r\n\r\nToday, this analysis could be done using a chapter for each scenario, but that still requires rolling up and down to compare, maybe unclear settings of which cell to run before scenario A, maybe (accidentally) re-running scenario A before B (run all is sooo easy to click on), etc.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/557589831",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-557589831",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 557589831,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzU4OTgzMQ==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T16:01:40Z",
    "updated_at": "2019-11-22T16:01:40Z",
    "author_association": "MEMBER",
    "body": "I think using a magic (or cell metadata) to explicitly define dependencies for a DAG of cells is a very interesting idea. I think automatically coming up with the DAG on the front end is probably prohibitively hard, given that we have a number of kernels of different languages. There was some work from a CalPoly group of students on a kernel that would keep track of a DAG, IIRC, somewhat like ObservableHQ.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/557713111",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-557713111",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 557713111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzcxMzExMQ==",
    "user": {
      "login": "nickurak",
      "id": 1140821,
      "node_id": "MDQ6VXNlcjExNDA4MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1140821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickurak",
      "html_url": "https://github.com/nickurak",
      "followers_url": "https://api.github.com/users/nickurak/followers",
      "following_url": "https://api.github.com/users/nickurak/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickurak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickurak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickurak/subscriptions",
      "organizations_url": "https://api.github.com/users/nickurak/orgs",
      "repos_url": "https://api.github.com/users/nickurak/repos",
      "events_url": "https://api.github.com/users/nickurak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickurak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T22:09:56Z",
    "updated_at": "2019-11-22T22:09:56Z",
    "author_association": "NONE",
    "body": "Because it's been a year, and this idea has been bouncing around my head a little -- here's a sketch of a thought in this area:\r\n\r\nI'd be really interested in a world where the cells run in actual scopes, and cells were more explict about what they were pulling in from each other. This might be reasonably easy in python, but maybe tricky in different languages.\r\n```\r\nlabel_cell(\"utility\")\r\ndef func_that_makes_a_df():\r\n   <code>\r\n```\r\n```\r\n<Some markdown explaining that function>\r\n```\r\n```\r\nlabel_cell(\"get_pf\")\r\nfrom cell(\"utilty\") import func that_makes_a_df()\r\ndf = func_that_makes_a_df()\r\n```\r\n```\r\n<Some markdown that talk about a dataframe>\r\n```\r\n```\r\nfrom cell(\"get_pf\") import df as plotttable_df\r\nimport plotly\r\n\r\nplotly.plot_something(plottable_df)\r\n```\r\nMaking the only things that are shared between cells super-explicit might help:\r\n- reduce all kinds of unexpected behavior and unexpected side-effects of scope mixing\r\n- allow Jupyter to reason about the dependencies\r\n- give good errors when the dependencies are missing\r\n- automatically execute cells as they're needed.\r\n\r\nI haven't really thought at all about what this might look like outside of the Python world.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/557713574",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-557713574",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 557713574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzcxMzU3NA==",
    "user": {
      "login": "nickurak",
      "id": 1140821,
      "node_id": "MDQ6VXNlcjExNDA4MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1140821?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickurak",
      "html_url": "https://github.com/nickurak",
      "followers_url": "https://api.github.com/users/nickurak/followers",
      "following_url": "https://api.github.com/users/nickurak/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickurak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickurak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickurak/subscriptions",
      "organizations_url": "https://api.github.com/users/nickurak/orgs",
      "repos_url": "https://api.github.com/users/nickurak/repos",
      "events_url": "https://api.github.com/users/nickurak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickurak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-22T22:11:45Z",
    "updated_at": "2019-11-22T22:11:45Z",
    "author_association": "NONE",
    "body": "In that world, attempting to refer to func_that_makes_a_df in a cell that isn't explicitly importing it from another cell would, for example, fail, with a `NameError: name 'func_that_makes_a_df' is not defined` exception.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/557929098",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-557929098",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 557929098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzkyOTA5OA==",
    "user": {
      "login": "pedrovgp",
      "id": 2333868,
      "node_id": "MDQ6VXNlcjIzMzM4Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2333868?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrovgp",
      "html_url": "https://github.com/pedrovgp",
      "followers_url": "https://api.github.com/users/pedrovgp/followers",
      "following_url": "https://api.github.com/users/pedrovgp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrovgp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrovgp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrovgp/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrovgp/orgs",
      "repos_url": "https://api.github.com/users/pedrovgp/repos",
      "events_url": "https://api.github.com/users/pedrovgp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrovgp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-24T21:19:54Z",
    "updated_at": "2019-11-24T21:19:54Z",
    "author_association": "NONE",
    "body": "@nickurak , I can see other use cases for that, but the use case you've described could be solved establishing cell dependency and splitting code in different cells accordingly. That would be a more generic approach as well, since it could apply to other languages.\r\n\r\nYour example would be something like:\r\n- Label cell 1 as \"utility\"\r\n- Label cell 2 as \"get_pf\"\r\n- Add \"depends on 'utility'\" to cell \"get_pf\"\r\n- Add \"depends on 'get_pf'\" to cell 3 (which plots something)\r\n\r\nIf you need a function (but not another) that is defined in a given cell, simply split it into two cells and add the dependency only to the one you need.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558344130",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558344130",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558344130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM0NDEzMA==",
    "user": {
      "login": "pedrovgp",
      "id": 2333868,
      "node_id": "MDQ6VXNlcjIzMzM4Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2333868?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrovgp",
      "html_url": "https://github.com/pedrovgp",
      "followers_url": "https://api.github.com/users/pedrovgp/followers",
      "following_url": "https://api.github.com/users/pedrovgp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrovgp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrovgp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrovgp/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrovgp/orgs",
      "repos_url": "https://api.github.com/users/pedrovgp/repos",
      "events_url": "https://api.github.com/users/pedrovgp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrovgp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T21:18:04Z",
    "updated_at": "2019-11-25T21:18:04Z",
    "author_association": "NONE",
    "body": "I have worked on a (quick and dirty) visual proposition of how to use cell dependencies to facilitate story telling and organize notebook flows. It probably makes more sense in JupyterLab project, but anyway, this is what I envision: https://docs.google.com/presentation/d/1nWAjvuCZb4MEu9SiTy-QWfMWBThpDpZFnuKNp1S_fHs/edit?usp=sharing\r\n\r\nAny comments are appreciated.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558345273",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558345273",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558345273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM0NTI3Mw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T21:21:07Z",
    "updated_at": "2019-11-25T21:21:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If you need a function (but not another) that is defined in a given cell, simply split it into two cells and add the dependency only to the one you need.\r\n\r\nA question, which I see as a prerequisite for this discussion: is there already in any Jupyter plugin a standard, or at least popular, way to uniquely identify cells?\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558662835",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558662835",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558662835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODY2MjgzNQ==",
    "user": {
      "login": "pedrovgp",
      "id": 2333868,
      "node_id": "MDQ6VXNlcjIzMzM4Njg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2333868?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pedrovgp",
      "html_url": "https://github.com/pedrovgp",
      "followers_url": "https://api.github.com/users/pedrovgp/followers",
      "following_url": "https://api.github.com/users/pedrovgp/following{/other_user}",
      "gists_url": "https://api.github.com/users/pedrovgp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pedrovgp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pedrovgp/subscriptions",
      "organizations_url": "https://api.github.com/users/pedrovgp/orgs",
      "repos_url": "https://api.github.com/users/pedrovgp/repos",
      "events_url": "https://api.github.com/users/pedrovgp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pedrovgp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T14:47:46Z",
    "updated_at": "2019-11-26T14:50:09Z",
    "author_association": "NONE",
    "body": "Seems like it is going to be a part of JupyterLab Core [https://github.com/jupyterlab/jupyterlab-celltags]",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558699581",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558699581",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558699581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODY5OTU4MQ==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:07:07Z",
    "updated_at": "2019-11-26T16:07:07Z",
    "author_association": "MEMBER",
    "body": "> A question, which I see as a prerequisite for this discussion: is there already in any Jupyter plugin a standard, or at least popular, way to uniquely identify cells?\r\n\r\nYes. In the Jupyter official notebook format, a cell can have an optional unique `name` in its metadata: https://nbformat.readthedocs.io/en/latest/format_description.html#cell-metadata",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558713310",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558713310",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558713310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcxMzMxMA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:37:07Z",
    "updated_at": "2019-11-26T16:37:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Yes. In the Jupyter official notebook format, a cell can have an optional unique `name` in its metadata: https://nbformat.readthedocs.io/en/latest/format_description.html#cell-metadata\r\n\r\nCool! And is this already exposed somewhere?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558718257",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558718257",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558718257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcxODI1Nw==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:47:21Z",
    "updated_at": "2019-11-26T16:47:21Z",
    "author_association": "MEMBER",
    "body": "> Cool! And is this already exposed somewhere?\r\n\r\nIt's exposed everywhere, in the sense that any library or frontend that can write to cell metadata can write this key. Jupyter notebook and JupyterLab, for example, expose an interface for writing to the cell metadata.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558718696",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558718696",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558718696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODcxODY5Ng==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T16:48:14Z",
    "updated_at": "2019-11-26T16:48:14Z",
    "author_association": "MEMBER",
    "body": "(To be clear, as with any metadata, it is optional and up to the writer to set this value. It is not set by default in JupyterLab, though it may be set in the notebook by default to some sort of UUID).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558804451",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558804451",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558804451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODgwNDQ1MQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T20:29:28Z",
    "updated_at": "2019-11-26T20:29:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> It's exposed everywhere, in the sense that any library or frontend that can write to cell metadata can write this key.\r\n\r\nYes, sorry, my question was misleading. I should have asked: is there already some UI for allowing the user to see/change this?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558821324",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558821324",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558821324,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODgyMTMyNA==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T21:18:46Z",
    "updated_at": "2019-11-26T21:18:46Z",
    "author_association": "MEMBER",
    "body": "Yes (though it's just a json editor). In JupyterLab, it's the wrench icon in the left sidebar. In classic notebook, it's the View > Cell Toolbar > Edit Metadata.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558827830",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558827830",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558827830,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODgyNzgzMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T21:37:33Z",
    "updated_at": "2019-11-26T21:37:33Z",
    "author_association": "MEMBER",
    "body": "In case that has not been posted already, please see also https://github.com/dataflownb and https://github.com/stitchfix/nodebook",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/558828037",
    "html_url": "https://github.com/jupyter/notebook/issues/1175#issuecomment-558828037",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1175",
    "id": 558828037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODgyODAzNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-26T21:38:08Z",
    "updated_at": "2019-11-26T21:38:08Z",
    "author_association": "MEMBER",
    "body": "Both of those got talks at JupyterCon in 2018 so should be somewhere on Youtube. ",
    "performed_via_github_app": null
  }
]
