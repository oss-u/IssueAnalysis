[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230224796",
    "html_url": "https://github.com/jupyter/notebook/issues/1586#issuecomment-230224796",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1586",
    "id": 230224796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDIyNDc5Ng==",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-04T07:36:42Z",
    "updated_at": "2016-07-04T07:36:42Z",
    "author_association": "NONE",
    "body": "Also, it's somewhat confusing as to the `output` parameter in `history_request`. \n\nSpecifically, the output is clearly just text, not a `display_data`, whereas _all_ kernel outputs are not `display_data` (only via iopub `display_data` and `execute_result`). So there's no longer a real notion of a \"text\" output of a cell or line.\n\nSo, does that mean that the `output` for a cell (in the context of history) should be _only_ the plain text representation (`text/plain`) of the `display_data` and `execute_result` for that execution? And, is that only the `execute_result`, or also all associated `display_data`? (For example, for `print_and_return_input(\"Hello\")`, would `output` be just `\"Hello\"` or would it be something like `Hello\\n\"Hello\"`?)\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230278674",
    "html_url": "https://github.com/jupyter/notebook/issues/1586#issuecomment-230278674",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1586",
    "id": 230278674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDI3ODY3NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-04T12:24:17Z",
    "updated_at": "2016-07-04T12:24:17Z",
    "author_association": "MEMBER",
    "body": "You're right that this session is a separate concept from the session in the message header. A history session generally corresponds to the lifetime of a kernel process, though in IPython I think it's possible to get a new session without restarting the kernel. The idea is that a session contains the sequence of commands that operated on the same namespace. The references to 'lines' was written when we were only thinking about console interfaces; one notebook cell is one 'line' for this purpose.\n\n'Output' is only the plain text representation of the `execute_result`.\n\nThe history messaging was designed by exposing the entire IPython API for history access, and as far as I know, nothing uses most of the possibilities. I believe the only history_request that our own frontends make is a 'tail' request with `output=False`, for the console interfaces to fill their local history buffer. We may well simplify it in the next major revision of the message protocol.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230279331",
    "html_url": "https://github.com/jupyter/notebook/issues/1586#issuecomment-230279331",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1586",
    "id": 230279331,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDI3OTMzMQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-04T12:28:09Z",
    "updated_at": "2016-07-04T12:28:09Z",
    "author_association": "MEMBER",
    "body": "Also, while IPython implements the `output` part, it doesn't by default write output to its history database to record it after the current kernel dies. I don't know of any other kernel that implements the output part (maybe Julia does?), so it's probably of almost no use.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230319280",
    "html_url": "https://github.com/jupyter/notebook/issues/1586#issuecomment-230319280",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1586",
    "id": 230319280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDMxOTI4MA==",
    "user": {
      "login": "gibiansky",
      "id": 1865411,
      "node_id": "MDQ6VXNlcjE4NjU0MTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1865411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gibiansky",
      "html_url": "https://github.com/gibiansky",
      "followers_url": "https://api.github.com/users/gibiansky/followers",
      "following_url": "https://api.github.com/users/gibiansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/gibiansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gibiansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gibiansky/subscriptions",
      "organizations_url": "https://api.github.com/users/gibiansky/orgs",
      "repos_url": "https://api.github.com/users/gibiansky/repos",
      "events_url": "https://api.github.com/users/gibiansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gibiansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-04T15:59:21Z",
    "updated_at": "2016-07-04T15:59:21Z",
    "author_association": "NONE",
    "body": "Sounds good. It'd be great if some of that eventually made it into the docs.\n\nThanks for all the clarifications -- I'm working on rewriting the lower level of the IHaskell libraries to support arbitrary kernels with a type-safe version of the entire messaging protocol, so since I'm trying to get all the details totally clear and conformant to the spec and type-safe, these little things become important. \n\nThanks!\n",
    "performed_via_github_app": null
  }
]
