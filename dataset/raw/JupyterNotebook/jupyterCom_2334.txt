[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/288809346",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-288809346",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 288809346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODgwOTM0Ng==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T18:01:55Z",
    "updated_at": "2017-03-23T18:01:55Z",
    "author_association": "MEMBER",
    "body": "Hi @Analect, that looks like a bug in JupyterLab, mind moving this issue there?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/288885723",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-288885723",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 288885723,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODg4NTcyMw==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-23T22:57:54Z",
    "updated_at": "2017-03-23T22:57:54Z",
    "author_association": "NONE",
    "body": "@blink1073 ... happy to add problem ref meta-data not getting saved in jupyerlab ... but is this likely fixed by this [PR](https://github.com/jupyterlab/jupyterlab/pull/1986)?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/288964475",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-288964475",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 288964475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODk2NDQ3NQ==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T08:43:13Z",
    "updated_at": "2017-03-24T08:43:13Z",
    "author_association": "MEMBER",
    "body": "That was the goal ;).  Sorry, forgot to cross-link back.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/290027521",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-290027521",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 290027521,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDAyNzUyMQ==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-29T08:58:33Z",
    "updated_at": "2017-03-29T08:58:33Z",
    "author_association": "NONE",
    "body": "@gnestor ... sorry, but could you reopen this.  \r\n\r\nWhile the last part of the issue relating to jupyterlab may have been resolved, I haven't been able to resolve the part relating to how cell meta-data is failing to persist back to `model`  (the main purpose of the issue)  when using file_save hooks.  If it's a case that I am just doing this wrong, then if someone better informed could point me in the right direction, that would be great.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/290106574",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-290106574",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 290106574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDEwNjU3NA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-29T14:25:38Z",
    "updated_at": "2017-03-29T14:25:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Analect Sorry about that, I'm doing _Spring cleaning_ on this repo. Your hook looks fine to me. Deferring to @takluyver who wrote the docs on the subject üëç",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/290329762",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-290329762",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 290329762,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDMyOTc2Mg==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-30T07:46:13Z",
    "updated_at": "2017-03-30T07:46:13Z",
    "author_association": "NONE",
    "body": "@takluyver \r\nWould you have any thoughts on what I might be doing wrong here.  It seems when I push updates to the `model` cell meta-data programmatically, they don't persist ... or somehow on loading, `model` isn't loading the cell meta-data, when it has been added programmatically, as per my UUID example above. Thanks.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/292121871",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-292121871",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 292121871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjEyMTg3MQ==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-06T09:39:18Z",
    "updated_at": "2017-04-06T09:39:18Z",
    "author_association": "NONE",
    "body": "@takluyver \r\nStill struggling with this.  Would you have any pointers as to what I might be doing wrong ... or suggest someone else who might be able to help.  Thanks.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306102854",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306102854",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306102854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjEwMjg1NA==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-05T04:53:45Z",
    "updated_at": "2017-06-05T04:53:45Z",
    "author_association": "NONE",
    "body": "@takluyver or @minrk \r\nSorry to rattle on about this, but I can't rationalise this behaviour in the notebook.  Can you shed any light on what might be happening here?\r\n\r\nAs per the [top of this thread](https://github.com/jupyter/notebook/issues/2334#issue-216507596), I have a very basic post-save hook that adds cell meta-data (a UUID) to each cell, where it should skip over cells that already have a UUID (ie. NOT overwrite these with a new UUID).\r\n\r\nI have a pre-existing sample notebook (screenshot below) that I open up in Jupyterlab.  I add a new cell to the end of the notebook (red rectangle on lower left) ... and this generates the new cell with a new UUID in 'B', while leaving the existing cells (A) intact (ie. A = A1).  This is the expected behaviour.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4063815/26770761/608c804a-49b1-11e7-8ed5-fbf52c18818b.png)\r\n\r\nHowever, if I now create a new notebook in the jupyterlab environment (it hasn't pre-existed) and incrimentally add a series of cells, checking the ipynb file structure along the way, it ends up regenerating UUIDs for existing cells, so that A=!A1 and B=!B1. This is NOT the expected behviour.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4063815/26770664/80741504-49b0-11e7-80d7-e54ac7b9dea0.png)\r\n\r\nAm I missing something in my 'hook' that requires me to somehow re-initialise the `juptyer_notebook_config.py` file when new files are added to the compute environment.  The fact that the code works for a pre-existing notebook and not for a newly-generated one has me baffled.  Both notebooks are nbformat v4.2, as per the meta-data below.\r\n\r\n```\r\n\"metadata\": {\r\n  \"eolas\": {\r\n   \"eolasProjectId\": \"12345\",\r\n   \"gitlabProjectId\": 142,\r\n   \"id\": \"99ae4211-d313-463c-9524-cdc695824db7\"\r\n  },\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.6.0\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 2\r\n}\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306299178",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306299178",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306299178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjI5OTE3OA==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-05T20:41:50Z",
    "updated_at": "2017-06-05T20:41:50Z",
    "author_association": "MEMBER",
    "body": "I think issue here is that the frontend doesn't expect its contents to have changed on disk.  What I would have expected is that when it tries to auto-save it would see that the file on disk is different and give you the option to choose what is in the front end or merge.  It could be that the post save hook is not modifying the timestamp by enough time.  A way to test this fact would be to add a delay to the post save hook.  \r\n\r\nAnother thing to check is whether it works in the classic notebook.  From reading the autosave [source](https://github.com/jupyter/notebook/blob/e1ba0075f6c5d901f67918e41f434b1788d592f8/notebook/static/notebook/js/notebook.js#L2661) I'd expect the same friction between a post save hook on the server and the front end data model.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306418497",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306418497",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306418497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQxODQ5Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T08:31:00Z",
    "updated_at": "2017-06-06T08:31:00Z",
    "author_association": "MEMBER",
    "body": "Adding metadata in the pre-save hook doesn't modify the model on the page, which seems to be the source of the problem. So on every save, every cell gets a new UUID, at least until the next time the file has been loaded from disk. Changes made in this way can only get to the page if one does save followed by reload. If you want to create persistent cell IDs in the notebook, I think the only way to do it reliably is via a javascript extension, rather than a pre-save hook.\r\n\r\nThe timestamp check doesn't help because the file written by the hook *is* the file written by the request (some transform was allowed). A post-save hook, on the other hand, could modify the timestamp and cause the \"file changed on-disk\" dialog (not a pleasant one, but at least it would indicate that the page and file are out of sync).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306453735",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306453735",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306453735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQ1MzczNQ==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T11:06:37Z",
    "updated_at": "2017-06-06T11:06:37Z",
    "author_association": "NONE",
    "body": "@minrk ... \r\n> Adding metadata in the pre-save hook doesn't modify the model on the page, which seems to be the source of the problem.\r\n\r\nThanks for confirming this behaviour ... although I do notice that the notebook level (rather than the cell-level) meta-data does appear to modify the model ... as that gets set once and stays that way.  Is there any way that the cell-level meta-data could be set up to work the same way?\r\n\r\n> Changes made in this way can only get to the page if one does save followed by reload. \r\n\r\nIs there any way to achieve this within the hook ...so that the model can be 'forced' to update ..  without disturbing things on the front-end, since the notebook is still likely to be open.\r\n\r\n> If you want to create persistent cell IDs in the notebook, I think the only way to do it reliably is via a javascript extension\r\n\r\nI don't have much experience with these.  Would you happen to have a worked example?  Does this approach also seek to introspect the json representation of a notebook and append values?  Would it be loaded using the new jupyterlabextension mechanism?\r\n\r\nThanks ... your insights are always valuable.\r\n\r\n@blink1073 \r\n> What I would have expected is that when it tries to auto-save it would see that the file on disk is different and give you the option to choose what is in the front end or merge.\r\n\r\nI can't seem to reproduce now ... but I do sometimes get a warning dialogue on the front-end ... that the data has changed on disk (ie. when the cell meta-data has been added, presumably) ... and whether I should 'revert' (reload from file, I think) or 'discard' ... I can live with that and select 'revert' to preserve the added meta-data.\r\n\r\nThe other thing that doesn't work (until I close and reopen the workbook) is that the cell meta-data editor doesn't expose new meta-data added to the underlying file ... but that's also something I can live with.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306474773",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306474773",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306474773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjQ3NDc3Mw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T12:44:50Z",
    "updated_at": "2017-06-06T12:44:50Z",
    "author_association": "MEMBER",
    "body": "> Thanks for confirming this behaviour ... although I do notice that the notebook level (rather than the cell-level) meta-data does appear to modify the model ... as that gets set once and stays that way. Is there any way that the cell-level meta-data could be set up to work the same way?\r\n\r\nThis is not accurate. Any metadata set on save will not take effect until the notebook is re-opened. Any changes on the notebook are treated the same way.\r\n\r\n> Is there any way to achieve this within the hook ...so that the model can be 'forced' to update .. without disturbing things on the front-end, since the notebook is still likely to be open.\r\n\r\nOnly by making the changes in javascript instead of a pre-save hook.\r\n\r\n> Would you happen to have a worked example? Does this approach also seek to introspect the json representation of a notebook and append values? Would it be loaded using the new jupyterlabextension mechanism?\r\n\r\nThere are several examples [here](https://github.com/ipython-contrib/jupyter_contrib_nbextensions), though I'm not sure about JupyterLab extensions. You would probably want to trigger an event to set metadata on creation of new cells, rather than on the save event.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306511155",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306511155",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306511155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjUxMTE1NQ==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T14:52:19Z",
    "updated_at": "2017-06-06T14:52:19Z",
    "author_association": "NONE",
    "body": "@minrk @blink1073 \r\n> This is not accurate. Any metadata set on save will not take effect until the notebook is re-opened. \r\n\r\nEither I'm not fully comprehending what's happening here ... but I'm NOT seeing the different types of meta-data act in the same way, as you suggest above.\r\n\r\nYou can reproduce this for yourself.\r\nCreate a new notebook in jupyterlab, add a single markdown cell, observe the structure of the saved notebook (see FIRST SAVE below) by opening the file with the editor.\r\nAdd another cell(s) and resave, observe the structure (SECOND SAVE below).\r\nWith the notebook remaining open in jupyterlab between saves, the cell meta-data UUIDs (blue squares) keep getting replaced, HOWEVER the notebook meta-data id (red squares) does NOT.\r\n\r\nIf I close and reopen the notebook and then add a new cell, then the pre-existing cell meta-data will remain in place, but cell meta-data generated against any new cells will get replaced on each save.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4063815/26831699/0aa1fce0-4ac5-11e7-9a97-6d38fbd988b1.png)\r\n\r\nWhat might be happening ... and which perhaps could explain the seemingly different treatment of meta-data above is that a pre-save hook is applying the notebook-level meta-data before jupyterlab opens the file for the first time ... ie. after you fill the dialogue to rename from 'untitled' and select a kernel.  Below is the structure of notebook at that point .. before any content/cell has been added.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/4063815/26834972/e558dfc6-4ace-11e7-84d6-50c443f00eca.png)\r\n\r\n@blink1073 ... @minrk is suggesting a javascript notebook extension as a better way of setting cell meta-data.  He has pointed towards [jupyter_contrib_nbextensions](https://github.com/ipython-contrib/jupyter_contrib_nbextensions).  Are these types of extensions likely to work in a jupyterlab context?  If not, are you able to point to a sample extension that might emulate how I might set cell-level meta-data? Thanks.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/306524938",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-306524938",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 306524938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjUyNDkzOA==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T15:33:56Z",
    "updated_at": "2017-06-06T15:33:56Z",
    "author_association": "MEMBER",
    "body": "@Analect, yes, we ask the server to create a new file to start, and then load that file from disk, which explains the notebook level metadata being there.  The JavaScript APIs in JupyterLab are not compatible with those of the Notebook (there was explicitly no stable public API), so none of the existing extensions will work in a JupyterLab context.  We don't yet have an example of an extension that demonstrates interacting with the notebook model in JupyterLab.  Do you mind opening an issue asking there asking for one?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/307145383",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-307145383",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 307145383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzE0NTM4Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T15:50:13Z",
    "updated_at": "2017-06-08T15:50:13Z",
    "author_association": "MEMBER",
    "body": "> If I close and reopen the notebook and then add a new cell, then the pre-existing cell meta-data will remain in place, but cell meta-data generated against any new cells will get replaced on each save.\r\n\r\nThis makes sense now - the save hook modifies the notebook that's being written to disk, but those changes don't go back to the notebook you have loaded. So the open notebook in memory doesn't have the cell IDs, and when you save it again, the save hook generates new IDs for those cells.\r\n\r\nAs others have suggested, you may be better off with an nbextension, which can modify the notebook in memory.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/307168427",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-307168427",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 307168427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzE2ODQyNw==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-08T17:13:53Z",
    "updated_at": "2017-06-08T17:13:53Z",
    "author_association": "NONE",
    "body": "Thanks @takluyver  ... yes .. just not sure how to go about such an extension in a jupyterlab context ... eventhough @blink1073 left a few suggestions left [here](https://github.com/jupyterlab/jupyterlab/issues/2377).  I don't have a good enough grasp of the code-base, especially as it pertains to the notebook component with lab.  Hoping for a few more working implementations out there to get a better handle on it.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/307391966",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-307391966",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 307391966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzM5MTk2Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T13:42:21Z",
    "updated_at": "2017-06-09T13:42:21Z",
    "author_association": "MEMBER",
    "body": "I can't give you much help myself, but maybe some of these examples are useful: https://github.com/ipython-contrib/jupyter_contrib_nbextensions/",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/307446940",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-307446940",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 307446940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzQ0Njk0MA==",
    "user": {
      "login": "Analect",
      "id": 4063815,
      "node_id": "MDQ6VXNlcjQwNjM4MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4063815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Analect",
      "html_url": "https://github.com/Analect",
      "followers_url": "https://api.github.com/users/Analect/followers",
      "following_url": "https://api.github.com/users/Analect/following{/other_user}",
      "gists_url": "https://api.github.com/users/Analect/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Analect/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Analect/subscriptions",
      "organizations_url": "https://api.github.com/users/Analect/orgs",
      "repos_url": "https://api.github.com/users/Analect/repos",
      "events_url": "https://api.github.com/users/Analect/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Analect/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-09T17:13:31Z",
    "updated_at": "2017-06-09T17:13:31Z",
    "author_association": "NONE",
    "body": "@takluyver thanks ... I'm aware of those examples .. but I don't believe (as per [comment](https://github.com/jupyter/notebook/issues/2334#issuecomment-306524938) above) that any of those are compatible with the notebook in a jupyterlab context.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359597739",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-359597739",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 359597739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTU5NzczOQ==",
    "user": {
      "login": "p2ya",
      "id": 17534393,
      "node_id": "MDQ6VXNlcjE3NTM0Mzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/17534393?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p2ya",
      "html_url": "https://github.com/p2ya",
      "followers_url": "https://api.github.com/users/p2ya/followers",
      "following_url": "https://api.github.com/users/p2ya/following{/other_user}",
      "gists_url": "https://api.github.com/users/p2ya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p2ya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p2ya/subscriptions",
      "organizations_url": "https://api.github.com/users/p2ya/orgs",
      "repos_url": "https://api.github.com/users/p2ya/repos",
      "events_url": "https://api.github.com/users/p2ya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p2ya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-22T22:49:53Z",
    "updated_at": "2018-01-22T22:49:53Z",
    "author_association": "NONE",
    "body": "@Analect  Is there anyway to get access to notebook metadata inside the notebook ?\r\nI need to rewrite some part of metadata based on read parameters from a notebook cell.  ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359890975",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-359890975",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 359890975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg5MDk3NQ==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T18:49:19Z",
    "updated_at": "2018-01-23T18:49:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "@p2ya I assume you mean programmatic access of notebook metadata? See the NotebookModel class: http://jupyterlab.github.io/jupyterlab/classes/_notebook_src_model_.notebookmodel.html",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359968456",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-359968456",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 359968456,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTk2ODQ1Ng==",
    "user": {
      "login": "p2ya",
      "id": 17534393,
      "node_id": "MDQ6VXNlcjE3NTM0Mzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/17534393?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p2ya",
      "html_url": "https://github.com/p2ya",
      "followers_url": "https://api.github.com/users/p2ya/followers",
      "following_url": "https://api.github.com/users/p2ya/following{/other_user}",
      "gists_url": "https://api.github.com/users/p2ya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p2ya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p2ya/subscriptions",
      "organizations_url": "https://api.github.com/users/p2ya/orgs",
      "repos_url": "https://api.github.com/users/p2ya/repos",
      "events_url": "https://api.github.com/users/p2ya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p2ya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T23:33:24Z",
    "updated_at": "2018-01-23T23:33:24Z",
    "author_association": "NONE",
    "body": "@gnestor how can I use this to get the notebook metadata within the notebook ?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359972302",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-359972302",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 359972302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTk3MjMwMg==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T23:52:58Z",
    "updated_at": "2018-01-23T23:52:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "AFAIK it's not possible to access to JupyterLab API from within a notebook like you can with the classic notebook (by just running JS code in the browser console or in a code cell using the `%javascript` magic) since JupyterLab doesn't expose globals to the JS context. \r\n\r\nWhat you can do it right-click a notebook in JupyterLab's file browser and open with \"Editor.\" This will allow you to edit the notebook metadata.\r\n\r\n![](http://g.recordit.co/sprYQi8HxH.gif)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359976808",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-359976808",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 359976808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTk3NjgwOA==",
    "user": {
      "login": "p2ya",
      "id": 17534393,
      "node_id": "MDQ6VXNlcjE3NTM0Mzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/17534393?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p2ya",
      "html_url": "https://github.com/p2ya",
      "followers_url": "https://api.github.com/users/p2ya/followers",
      "following_url": "https://api.github.com/users/p2ya/following{/other_user}",
      "gists_url": "https://api.github.com/users/p2ya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p2ya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p2ya/subscriptions",
      "organizations_url": "https://api.github.com/users/p2ya/orgs",
      "repos_url": "https://api.github.com/users/p2ya/repos",
      "events_url": "https://api.github.com/users/p2ya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p2ya/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T00:15:47Z",
    "updated_at": "2018-01-24T00:15:47Z",
    "author_association": "NONE",
    "body": "@gnestor I use jupyter notebook, is it possible in that ?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/360350544",
    "html_url": "https://github.com/jupyter/notebook/issues/2334#issuecomment-360350544",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2334",
    "id": 360350544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDM1MDU0NA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T03:31:35Z",
    "updated_at": "2018-01-25T03:31:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, see Edit > Edit Notebook Metadata in the notebook menu:\r\n\r\n![image](https://user-images.githubusercontent.com/512354/35369538-297a4c10-013d-11e8-845d-c0d341b9ade0.png)\r\n",
    "performed_via_github_app": null
  }
]
