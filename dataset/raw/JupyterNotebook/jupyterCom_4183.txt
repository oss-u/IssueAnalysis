[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/437024147",
    "html_url": "https://github.com/jupyter/notebook/issues/4183#issuecomment-437024147",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4183",
    "id": 437024147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzAyNDE0Nw==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T14:56:16Z",
    "updated_at": "2018-11-08T14:56:16Z",
    "author_association": "NONE",
    "body": "Also, I apologize if this is not the appropriate repository for this issue.  I'd be happy to close and migrate it elsewhere if desired.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/437044702",
    "html_url": "https://github.com/jupyter/notebook/issues/4183#issuecomment-437044702",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4183",
    "id": 437044702,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzA0NDcwMg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T15:50:16Z",
    "updated_at": "2018-11-08T15:50:16Z",
    "author_association": "MEMBER",
    "body": "This is due to the fact that the asyncio eventloop is already instantiated (by the call to `http_server.listen in init_webapp`) prior to instantiating server extensions. I can fix this by delaying the server.listen to a later point, but I think it's going to be hard to guarantee that server extensions are loaded before anything is hooked up to the eventloop.\r\n\r\nFor instance, server extensions can access the contents_manager, and a custom contents manager could start a periodic callback to check database integrity (or something). With that cycle, I think it's impossible to allow server extensions to reliably be able to override the eventloop.\r\n\r\nWe could allow setting the eventloop policy as a top-level configurable for the notebook server, but extensions wouldn't have access to this setting on their own.",
    "performed_via_github_app": null
  }
]
