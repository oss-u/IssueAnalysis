[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/438239537",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-438239537",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 438239537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODIzOTUzNw==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T11:51:49Z",
    "updated_at": "2018-11-13T11:51:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "TBH, I do not consider it the notebook's responsibility to run assertions on the output. That's what tools like nbval should do. If you want to have nbval integrate better with the front-end (e.g. a single-click button to do a test run with nbdime-powered failure reporting), I'd love to help out with that. It is in the \"whishlist\" part of my TODO list currently, but you seem to be pushing for the feature, so I'd be more than happy to let you lead the effort.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/438266167",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-438266167",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 438266167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODI2NjE2Nw==",
    "user": {
      "login": "mgeier",
      "id": 705404,
      "node_id": "MDQ6VXNlcjcwNTQwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/705404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgeier",
      "html_url": "https://github.com/mgeier",
      "followers_url": "https://api.github.com/users/mgeier/followers",
      "following_url": "https://api.github.com/users/mgeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions",
      "organizations_url": "https://api.github.com/users/mgeier/orgs",
      "repos_url": "https://api.github.com/users/mgeier/repos",
      "events_url": "https://api.github.com/users/mgeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T13:30:38Z",
    "updated_at": "2018-11-13T13:30:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vidartf \r\n\r\n> If you want to have nbval integrate better with the front-end\r\n\r\nThanks, but no, I personally don't need this. But others might.\r\n\r\n> you seem to be pushing for the feature\r\n\r\nSorry if I wasn't clear, but I'm not trying to push anywhere near that (although I don't have anything against it, either).\r\n\r\nI'm only pointing out inconsistent behavior in the `notebook` (and other projects).\r\n\r\nAnd I'm making a concrete suggestion how to make the behavior consistent.\r\n\r\n> I do not consider it the notebook's responsibility to run assertions on the output\r\n\r\nProbably not, but when `notebook` stopped ignoring the `raises-exception` tag in #2549, a mistake was made which I'm hoping to get fixed now.\r\n\r\nAs long as the `raises-exception` tag (and for that matter, any other tag) is consistently ignored, that's fine.\r\n\r\nBut if the `raises-exception` tag is not ignored, it should do what the name suggests, which it currently doesn't (or does only partially). If it allows exceptions, it must also forbid non-exceptions, otherwise the behavior is inconsistent with the tag name.\r\n\r\nI strongly suggest that the behavior should be changed, but alternatively, also its name could be changed. In https://github.com/jupyter/nbconvert/issues/730 I suggested `allow-exception` as an alternative name if the behavior really has to stay the same. But IMHO `raises-exception` (with the right behavior) would be much better!\r\n\r\nPlease also note another problem that I described in https://github.com/jupyter/nbconvert/issues/730#issuecomment-438223813.\r\n\r\nI hope I can turn your :confused: into a :smile:, if you have further questions, don't hesitate to ask!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/438283735",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-438283735",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 438283735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODI4MzczNQ==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T14:24:46Z",
    "updated_at": "2018-11-13T14:24:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> [...] in #2549, a mistake was made which I'm hoping to get fixed now.\r\n\r\nWhile I can agree in hindsight that the name is somewhat inaccurate, changing the name of the current tag seems like an overly disruptive change for what is more of a documentation problem. If it is agreed to rename it, then it should probably be for a major release.\r\n\r\nTo me, a better compromise would be to add another tag that does what you are currently expecting. By adding a stronger wording, like e.g. `assert-error`/`assert-raises`/`assert-exception`, the distinction should be made clearer to anyone that is comparing the two tag names.\r\n\r\nStill, the best short-term solution would probably be to write documentation for tags, as well as document the existing tag (`raises-exception`) to make its behavior clearer.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/438630006",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-438630006",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 438630006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODYzMDAwNg==",
    "user": {
      "login": "mgeier",
      "id": 705404,
      "node_id": "MDQ6VXNlcjcwNTQwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/705404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgeier",
      "html_url": "https://github.com/mgeier",
      "followers_url": "https://api.github.com/users/mgeier/followers",
      "following_url": "https://api.github.com/users/mgeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions",
      "organizations_url": "https://api.github.com/users/mgeier/orgs",
      "repos_url": "https://api.github.com/users/mgeier/repos",
      "events_url": "https://api.github.com/users/mgeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T11:25:30Z",
    "updated_at": "2018-11-14T11:25:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@vidartf\r\n\r\nTo me, `raises-exception` and `assert-exception` (as well as the above-mentioned alternatives) have no mutual difference in meaning. If more than one of them were available, I would have to assume that they are merely aliases of one another.\r\n\r\nAnd while I agree that some documentation would be helpful, I don't think the actual problem can be solved by documentation alone.\r\n\r\nI honestly don't understand why there is so much skepticism against treating a non-exception in `raises-exception` as a hard error. I can't even come up with a single situation where I would *not* want this behavior.\r\n\r\nCan you give an example where creating an error on non-exception would be harmful?\r\n\r\nSure, changing the behavior might raise a few errors where there were none before (or not, who knows?), but those errors will actually make previously hidden bugs clearly visible, which is a good thing!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/438653465",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-438653465",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 438653465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY1MzQ2NQ==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T12:59:40Z",
    "updated_at": "2018-11-14T12:59:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Can you give an example where creating an error on non-exception would be harmful?\r\n\r\nThe current behavior reads as \"if the cell raises an error, ignore it\". An example can be an `ImportError` if an optional dependency is missing. This will unreliably raise or not.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/438662615",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-438662615",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 438662615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODY2MjYxNQ==",
    "user": {
      "login": "vidartf",
      "id": 510760,
      "node_id": "MDQ6VXNlcjUxMDc2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/510760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vidartf",
      "html_url": "https://github.com/vidartf",
      "followers_url": "https://api.github.com/users/vidartf/followers",
      "following_url": "https://api.github.com/users/vidartf/following{/other_user}",
      "gists_url": "https://api.github.com/users/vidartf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vidartf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vidartf/subscriptions",
      "organizations_url": "https://api.github.com/users/vidartf/orgs",
      "repos_url": "https://api.github.com/users/vidartf/repos",
      "events_url": "https://api.github.com/users/vidartf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vidartf/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-14T13:32:24Z",
    "updated_at": "2018-11-14T13:35:16Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I honestly don't understand why there is so much skepticism against treating a non-exception in raises-exception as a hard error.\r\n\r\nAlso relevant from first issue comment:\r\n> If a cell tagged with raises-exception does not actually raise an exception, this should itself be an error and stop the rest of the notebook from executing.\r\n\r\nFor me the issue is insisting on treating it as a hard error, stopping further execution. That would need changes on several layers (even in the kernels?).\r\n\r\nI would be much more open if instead the issue did *not* require an execution stop, but instead simply was to give some sort of indication to the user that an error was not thrown if the `raises-exception` tag is set. Such a solution:\r\n- would still retain the code from #2549 untouched\r\n- would put this feature purely in the front-end\r\n- could be made in a backwards-compatible way, e.g. by *not using a modal dialog*, but rather some CSS styling or a pop-up error or something similar.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/439603119",
    "html_url": "https://github.com/jupyter/notebook/issues/4198#issuecomment-439603119",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4198",
    "id": 439603119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTYwMzExOQ==",
    "user": {
      "login": "mgeier",
      "id": 705404,
      "node_id": "MDQ6VXNlcjcwNTQwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/705404?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgeier",
      "html_url": "https://github.com/mgeier",
      "followers_url": "https://api.github.com/users/mgeier/followers",
      "following_url": "https://api.github.com/users/mgeier/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgeier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgeier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgeier/subscriptions",
      "organizations_url": "https://api.github.com/users/mgeier/orgs",
      "repos_url": "https://api.github.com/users/mgeier/repos",
      "events_url": "https://api.github.com/users/mgeier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgeier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-17T09:24:11Z",
    "updated_at": "2018-11-17T09:24:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The current behavior reads as \"if the cell raises an error, ignore it\".\r\n\r\nExactly, that's the behavior, but that's not what the tag name says. The tag name `raises-exception` says: \"This cell raises an exception\".\r\n\r\n> An example can be an `ImportError` if an optional dependency is missing. This will unreliably raise or not.\r\n\r\nThanks for the example!\r\n\r\nBut how would you reasonably use such a notebook? It's broken. There *should* be a visible error.\r\n\r\nIf the optional dependency is missing, the `ImportError` will be ignored alright, but what is supposed to happen when you use the (not) imported thing?\r\nYou will get a `NameError` because it wasn't imported ... and then?\r\n\r\nTo make this work, you could use one of the standard idioms that are used in such a case:\r\n\r\n```python\r\ntry:\r\n    import something\r\nexcept ImportError:\r\n    something = some_alternative_thing()\r\n```\r\n\r\nOr you would define a flag like this:\r\n\r\n```python\r\ntry:\r\n    import something\r\n    something_is_available = True\r\nexcept ImportError:\r\n    something_is_available = False\r\n```\r\n\r\nAnd you wouldn't need the `raises-exception` tag in either case.\r\n\r\n> For me the issue is insisting on treating it as a hard error, stopping further execution.\r\n\r\nOK, then I'll not insist on that.\r\n\r\nI think it makes most sense from a user perspective to stop further execution.\r\nBut if there are technical reasons that make that very tedious to implement, I'm fine with an alternative way to report an error to the user.\r\n\r\nThe more visible the error, the better. But the actual details are up to the ones who implement the change.",
    "performed_via_github_app": null
  }
]
