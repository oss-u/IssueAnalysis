[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/347076929",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-347076929",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 347076929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzA3NjkyOQ==",
    "user": {
      "login": "kadlugan",
      "id": 4727614,
      "node_id": "MDQ6VXNlcjQ3Mjc2MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4727614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kadlugan",
      "html_url": "https://github.com/kadlugan",
      "followers_url": "https://api.github.com/users/kadlugan/followers",
      "following_url": "https://api.github.com/users/kadlugan/following{/other_user}",
      "gists_url": "https://api.github.com/users/kadlugan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kadlugan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kadlugan/subscriptions",
      "organizations_url": "https://api.github.com/users/kadlugan/orgs",
      "repos_url": "https://api.github.com/users/kadlugan/repos",
      "events_url": "https://api.github.com/users/kadlugan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kadlugan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T04:37:13Z",
    "updated_at": "2017-11-27T04:58:39Z",
    "author_association": "NONE",
    "body": "Ok, so I have isolated (i think) the potential code change to the [completer.js](https://github.com/jupyter/notebook/blob/df2fc69ef59c559e4788d571106a03dd1768e0b3/notebook/static/notebook/js/completer.js) class\r\n\r\nAre there any js code wizzes who can add a fuzzy search to this package. Below are some GitHub libraries that I found in js.  Sorry, my js is pretty limited. What might take you minutes, would take me hours\r\nhttps://github.com/bevacqua/fuzzysearch\r\nhttps://github.com/krisk/Fuse\r\nhttps://github.com/atom/fuzzy-finder\r\n\r\nThe matching appears to bring in the imported libraries and declared code and then my understanding is the matching occurs somewhere around here.   I guess here is where the fuzzy match changes need to be made:\r\nhttps://github.com/jupyter/notebook/blob/df2fc69ef59c559e4788d571106a03dd1768e0b3/notebook/static/notebook/js/completer.js#L23-L78",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/347143212",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-347143212",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 347143212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzE0MzIxMg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T10:38:51Z",
    "updated_at": "2017-11-27T10:38:51Z",
    "author_association": "MEMBER",
    "body": "The fuzzy search would need to be in the kernel side - the frontend Javascript can only process what the kernel sends back to it. For Python completions, that means it's part of IPython. @Carreau has been doing some work on the completion machinery, but I don't think it includes fuzzy matches.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/347349401",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-347349401",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 347349401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM0OTQwMQ==",
    "user": {
      "login": "kadlugan",
      "id": 4727614,
      "node_id": "MDQ6VXNlcjQ3Mjc2MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4727614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kadlugan",
      "html_url": "https://github.com/kadlugan",
      "followers_url": "https://api.github.com/users/kadlugan/followers",
      "following_url": "https://api.github.com/users/kadlugan/following{/other_user}",
      "gists_url": "https://api.github.com/users/kadlugan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kadlugan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kadlugan/subscriptions",
      "organizations_url": "https://api.github.com/users/kadlugan/orgs",
      "repos_url": "https://api.github.com/users/kadlugan/repos",
      "events_url": "https://api.github.com/users/kadlugan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kadlugan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-27T22:25:27Z",
    "updated_at": "2017-11-27T22:25:27Z",
    "author_association": "NONE",
    "body": "Thanks @takluyver,  Great info.   \r\n\r\nI see so let me know if I have this right. In Python completions, we get the whole completions list from the kernel, and we are just filtering that list in the Javascript front end with the prefix search and truncating the visible list suggestions\r\n\r\nSo my next question is - isn't a fuzzy search of the current classes methods just a different way of front-end filtering and truncating the visible list?   Do we need to modify the kernel at all?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/347475457",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-347475457",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 347475457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQ3NTQ1Nw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T10:11:40Z",
    "updated_at": "2017-11-28T10:11:40Z",
    "author_association": "MEMBER",
    "body": "> I see so let me know if I have this right. In Python completions, we get the whole completions list from the kernel, and we are just filtering that list in the Javascript front end with the prefix search and truncating the visible list suggestions\r\n\r\nYes, that is correct. Actually not exactly prefixes (because of `%` in amgics, but that's implementation detail).\r\n\r\n\r\n\r\n> So my next question is - isn't a fuzzy search of the current classes methods just a different way of front-end filtering and truncating the visible list? Do we need to modify the kernel at all?\r\n\r\nYes we have to modify kernel, because the kernel does not send 'all' completions, that would be too heavy. It sends only the matching one. e.g `numpy.his<tab>` will only send what starts with `his` to make it bearable on the network and frontend. If you then press `t`, we can filter further without extra requests. If you delete `s` we would have to fetch a new batch of potential completions.\r\n\r\nDoes that make sens ?\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/347487437",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-347487437",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 347487437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQ4NzQzNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-28T10:56:56Z",
    "updated_at": "2017-11-28T10:56:56Z",
    "author_association": "MEMBER",
    "body": "> I see so let me know if I have this right. In Python completions, we get the whole completions list from the kernel, and we are just filtering that list in the Javascript front end with the prefix search and truncating the visible list suggestions\r\n\r\nNo, the kernel does the prefix search. The frontend displays all the completions it gets.\r\n\r\n(I think @Carreau misunderstood what you were asking here, so I'm replying as well to make sure that it's clear.)\r\n\r\nThere's one extra detail which makes it more confusing: the frontend also finds some simple completions based on words you've used in the current notebook. It does this independently of the kernel. But the kernel, which knows about your code, is the more important source of completions.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/348830653",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-348830653",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 348830653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODgzMDY1Mw==",
    "user": {
      "login": "kadlugan",
      "id": 4727614,
      "node_id": "MDQ6VXNlcjQ3Mjc2MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4727614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kadlugan",
      "html_url": "https://github.com/kadlugan",
      "followers_url": "https://api.github.com/users/kadlugan/followers",
      "following_url": "https://api.github.com/users/kadlugan/following{/other_user}",
      "gists_url": "https://api.github.com/users/kadlugan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kadlugan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kadlugan/subscriptions",
      "organizations_url": "https://api.github.com/users/kadlugan/orgs",
      "repos_url": "https://api.github.com/users/kadlugan/repos",
      "events_url": "https://api.github.com/users/kadlugan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kadlugan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-03T23:47:34Z",
    "updated_at": "2017-12-03T23:47:34Z",
    "author_association": "NONE",
    "body": "Thanks @takluyver and @Carreau, \r\n\r\nGotcha, I now understand the issue and purpose of the kernel and front end a lot better.  \r\n\r\nSo, fuzzy search is possible, BUT it requires kernel modification.  \r\n\r\n@Carreau, so you are doing some work on the completion mechanics. Are you able to provide some insight into what you are currently working with regards to this and your thoughts on a fuzzy match approach? \r\n\r\nI'm guessing there are certain considerations that you have in the code base, but how difficult would it be to include a fuzzy feature.  I don't have much experience in kernel design, so forgive any ignorance I have?  What code base are you using in the kernel, is it python or something like c, c++  etc? \r\n\r\nAs mentioned above, I found a few js and python libraries out there that provide fuzzy algorithms. \r\nhttps://github.com/bevacqua/fuzzysearch/blob/master/index.js . This one loops through each available method, and if each new character is in the tails of each of the current matched completions then it remains as part of the matched set.   (at least thats my initial perception)\r\n\r\n@Carreau Im guessing this issue can be linked across to the kernel package. Can you suggest a place?\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/348916523",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-348916523",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 348916523,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODkxNjUyMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-04T10:08:01Z",
    "updated_at": "2017-12-04T10:08:01Z",
    "author_association": "MEMBER",
    "body": "> What code base are you using in the kernel, is it python or something like c, c++ etc?\r\n\r\nIt's Python. The code is split across two packages, [ipykernel](https://github.com/ipython/ipykernel) and [ipython](https://github.com/ipython/ipython).\r\n\r\nThe starting point for following the completions machinery is [this function](https://github.com/ipython/ipykernel/blob/cea3d93979b47014c3ec7a7f6ad203363098a7b0/ipykernel/ipkernel.py#L260). After that, it dives into `IPython.core.completer`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/350592287",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-350592287",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 350592287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDU5MjI4Nw==",
    "user": {
      "login": "kadlugan",
      "id": 4727614,
      "node_id": "MDQ6VXNlcjQ3Mjc2MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4727614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kadlugan",
      "html_url": "https://github.com/kadlugan",
      "followers_url": "https://api.github.com/users/kadlugan/followers",
      "following_url": "https://api.github.com/users/kadlugan/following{/other_user}",
      "gists_url": "https://api.github.com/users/kadlugan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kadlugan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kadlugan/subscriptions",
      "organizations_url": "https://api.github.com/users/kadlugan/orgs",
      "repos_url": "https://api.github.com/users/kadlugan/repos",
      "events_url": "https://api.github.com/users/kadlugan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kadlugan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-10T23:52:00Z",
    "updated_at": "2017-12-11T00:15:49Z",
    "author_association": "NONE",
    "body": "Ok, thanks for that @takluyver i will have a look\r\n\r\nEdit:\r\n For anyone else interested the core completer code is here - [<code>IPython.core.completer</code>](https://github.com/ipython/ipython/blob/3c53804581bd51347eca577950752e1eac1d5e9b/IPython/core/completer.py)\r\n\r\nSomewhere around here, maybe?\r\nhttps://github.com/ipython/ipython/blob/3c53804581bd51347eca577950752e1eac1d5e9b/IPython/core/completer.py#L651-L677",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/350703939",
    "html_url": "https://github.com/jupyter/notebook/issues/3083#issuecomment-350703939",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3083",
    "id": 350703939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDcwMzkzOQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-11T11:56:19Z",
    "updated_at": "2017-12-11T11:56:19Z",
    "author_association": "MEMBER",
    "body": "> so you are doing some work on the completion mechanics ...\r\n\r\nLet's say that's \"under my radar\", there is no currently heavy active work. There are couple [PRs](https://github.com/ipython/ipython/pulls) about completions.\r\n\r\nThere is likely a lot of simplification that could be done now that we've drop Python 2; and I'd like to push most of what IPython does now into Jedi/Parso itself. \r\n\r\nNow that we are also using Prompt-toolkit in IPython there is a lot of work that could be done in making the completer asynchronous. \r\n\r\nOne other possibility – which is harder, as it touches many packages is the following: \r\n\r\nWhen Code is running , we can't trigger completions in the notebook. Though because Jedi does support purely static analysis of code, we could lift this restriction and have less-exaustive, but still have completions in the notebook. \r\n\r\nHope that give you some insights. \r\n",
    "performed_via_github_app": null
  }
]
