[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230007953",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230007953",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230007953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDAwNzk1Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-01T17:47:22Z",
    "updated_at": "2016-07-01T17:47:22Z",
    "author_association": "MEMBER",
    "body": "Hi there !\n\nThanks for the bug report ! We didn't had much chance to work with asyncio yet (we hope to have some time to spend on that at some point it definitively looks fun). This is more an IPython kernel issue I guess,  [see some previous discussion about asyncio kernel here](https://github.com/ipython/ipykernel/issues/21). \n\nSo there is likely bugs you are right. \n\nIn this particular case, I'm unsure it is an IPython bug as I can reproduce the exact same behavior in a plain Python interpreter. \n\nI must admit that I'm far from an AsyncIO expert, but as far as i understand: `asyncio.wait(tasks)` does not consume the task, it just block until the task is finished, which likely means you get a list of futures:\n\n```\nIn [3]: tasks\nOut[3]:\n[<Task finished coro=<anything() done, defined at <ipython-input-1-f8502dfae557>:5> exception=NameError(\"name 'err' is not defined\",)>,\n <Task finished coro=<anything() done, defined at <ipython-input-1-f8502dfae557>:5> exception=NameError(\"name 'err' is not defined\",)>,\n <Task finished coro=<anything() done, defined at <ipython-input-1-f8502dfae557>:5> exception=NameError(\"name 'err' is not defined\",)>,\n <Task finished coro=<anything() done, defined at <ipython-input-1-f8502dfae557>:5> exception=NameError(\"name 'err' is not defined\",)>,\n <Task finished coro=<anything() done, defined at <ipython-input-1-f8502dfae557>:5> exception=NameError(\"name 'err' is not defined\",)>,\n <Task finished coro=<anything() done, defined at <ipython-input-1-f8502dfae557>:5> exception=NameError(\"name 'err' is not defined\",)>]\n```\n\nIf you ask for this task result it should raise (and does raise apparently):\n\n```\nIn [5]: t = tasks[0]\nIn [6]: t.result()\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n<ipython-input-6-afae469afdaa> in <module>()\n----> 1 t.result()\n\n/Users/bussonniermatthias/anaconda/lib/python3.5/asyncio/futures.py in result(self)\n    272             self._tb_logger = None\n    273         if self._exception is not None:\n--> 274             raise self._exception\n    275         return self._result\n    276\n\n/Users/bussonniermatthias/anaconda/lib/python3.5/asyncio/tasks.py in _step(***failed resolving arguments***)\n    237                 # We use the `send` method directly, because coroutines\n    238                 # don't have `__iter__` and `__next__` methods.\n--> 239                 result = coro.send(None)\n    240             else:\n    241                 result = coro.throw(exc)\n\n<ipython-input-1-f8502dfae557> in anything(i)\n      7     await asyncio.sleep(i)\n      8     print('after')\n----> 9     err                                                    # exceptions seem to be ignored\n     10\n     11 loop = asyncio.get_event_loop()\n\nNameError: name 'err' is not defined\n```\n\nWhich should automatically raise if you use it in a generator or yield the task in a coroutine [but here it's starting to get fuzzy in my brain], and it will raise in the context were you use it, not in the context of where it is defined. \n\nDoes that kind-of make sens ? \n\nThat's non obvious I agee. My guess is that at shutdown the Python interpreter does consume all the remaining task. Maybe it should not raise, but emit a warning ? @njsmith might have more insight into that than I do, in which case we could try to bring that up to CPython. \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230084475",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230084475",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230084475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA4NDQ3NQ==",
    "user": {
      "login": "par2",
      "id": 15694632,
      "node_id": "MDQ6VXNlcjE1Njk0NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15694632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/par2",
      "html_url": "https://github.com/par2",
      "followers_url": "https://api.github.com/users/par2/followers",
      "following_url": "https://api.github.com/users/par2/following{/other_user}",
      "gists_url": "https://api.github.com/users/par2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/par2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/par2/subscriptions",
      "organizations_url": "https://api.github.com/users/par2/orgs",
      "repos_url": "https://api.github.com/users/par2/repos",
      "events_url": "https://api.github.com/users/par2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/par2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T05:19:16Z",
    "updated_at": "2016-07-02T05:19:16Z",
    "author_association": "NONE",
    "body": "Yeah, I think can get the gist for what you mean.  This seems a bit non-intuitive though for Python in general.  And unnerving to see blatant errors pass with the notebook.  Maybe it is something to bring up in the Python mailing list.  Thanks @Carreau.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230087315",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230087315",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230087315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA4NzMxNQ==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T06:45:25Z",
    "updated_at": "2016-07-02T06:45:25Z",
    "author_association": "NONE",
    "body": "Yeah, I'm not sure what ipython (or python) could reasonably do differently here.\n\nAs long as you have that `tasks` variable sitting around, you _might_ go and do `tasks[0].result()` or `await tasks[0]` or something, which is how you propagate the exception further. So python has to hold on to the exception quietly and wait for you to do that.\n\nWhen you shut down the interpreter, then that implicitly does `del tasks`, the reference count on the future objects drops to 0, they get garbage collected, and at that point their `__del__` method prints that \"uh-oh there was an error that you never propagated, and now you never will because I'm being garbage collected!\" message. But you can't really raise the error from inside `__del__`.\n\nIf you weren't capturing the `tasks` in a global variable and thus pinning them in memory, then the results here would be a little less confusing :-).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230092509",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230092509",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230092509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDA5MjUwOQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-02T09:19:44Z",
    "updated_at": "2016-07-02T09:19:44Z",
    "author_association": "MEMBER",
    "body": "Maybe it would be useful to have a wrapper function that waits on a bunch of tasks and then checks that they all succeeded?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230131341",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230131341",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230131341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDEzMTM0MQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-03T02:15:20Z",
    "updated_at": "2016-07-03T02:15:20Z",
    "author_association": "MEMBER",
    "body": "> Maybe it would be useful to have a wrapper function that waits on a bunch of tasks and then checks that they all succeeded?\n\nThat's pretty trivial IIUC:\n\n```\nIn [7]: async def wait_and_use(tasks):\n   ...:     await asyncio.wait(tasks)\n   ...:     return [t.result() for t in tasks]\n   ...:\n```\n\nBut it feel like the usage of `asyncio.wait(tasks)` is unnatural, usually you should have a consumer of the task. You will rarely directly ask AsyncIO to to wait for it. \n\nI don't know if there would be a way to detect earlier that a task has no potential consumers without triggering a gc collection. \n\nThe current behavior seem totally natural and expected though, as you still have tasks.\nI **guess**, we could try to count the number of reference for all tasks linked from `__main__` namespace and print a warning if there is no other consumer, but that seem like over engineering  things for (little) benefits.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230146963",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230146963",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230146963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDE0Njk2Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-03T10:46:48Z",
    "updated_at": "2016-07-03T10:46:48Z",
    "author_association": "MEMBER",
    "body": "I think there's a reasonable case where you're invoking a set of tasks asynchronously for their side effects (e.g. downloading a thousand small files to a directory on disk), and they don't have a meaningful return value. I.e. something you'd do synchronously like:\n\n``` python\nfor i in range(1000):\n    do_thing(i)\n```\n\nThinking about it a bit more, I think the answer may be to use [asyncio.gather](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather) in place of `asyncio.wait()` - that should immediately propagate an exception if one is raised.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230335000",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230335000",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230335000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDMzNTAwMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-04T18:01:06Z",
    "updated_at": "2016-07-04T18:01:06Z",
    "author_association": "MEMBER",
    "body": "Indeed, it works (in the sens that it fails immediately.\n\n```\ntasks = [loop.create_task(anything(i)) for i in range(1, 7)]\nloop.run_until_complete(asyncio.gather(*tasks))\n```\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230341651",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230341651",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230341651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDM0MTY1MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-04T18:54:58Z",
    "updated_at": "2016-07-04T18:54:58Z",
    "author_association": "MEMBER",
    "body": "OK then, closing this as a \"don't hold it like that\" bug ;-)\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/230387055",
    "html_url": "https://github.com/jupyter/notebook/issues/1582#issuecomment-230387055",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1582",
    "id": 230387055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMDM4NzA1NQ==",
    "user": {
      "login": "par2",
      "id": 15694632,
      "node_id": "MDQ6VXNlcjE1Njk0NjMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/15694632?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/par2",
      "html_url": "https://github.com/par2",
      "followers_url": "https://api.github.com/users/par2/followers",
      "following_url": "https://api.github.com/users/par2/following{/other_user}",
      "gists_url": "https://api.github.com/users/par2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/par2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/par2/subscriptions",
      "organizations_url": "https://api.github.com/users/par2/orgs",
      "repos_url": "https://api.github.com/users/par2/repos",
      "events_url": "https://api.github.com/users/par2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/par2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-05T04:50:43Z",
    "updated_at": "2016-07-05T04:50:43Z",
    "author_association": "NONE",
    "body": "Yes, I get an exception.  An elegant workaround for an unexpected outcome.  Many thanks all.\n",
    "performed_via_github_app": null
  }
]
