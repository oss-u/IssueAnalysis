[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/313748677",
    "html_url": "https://github.com/jupyter/notebook/issues/2636#issuecomment-313748677",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2636",
    "id": 313748677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc0ODY3Nw==",
    "user": {
      "login": "kwlzn",
      "id": 1883523,
      "node_id": "MDQ6VXNlcjE4ODM1MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1883523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kwlzn",
      "html_url": "https://github.com/kwlzn",
      "followers_url": "https://api.github.com/users/kwlzn/followers",
      "following_url": "https://api.github.com/users/kwlzn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kwlzn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kwlzn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kwlzn/subscriptions",
      "organizations_url": "https://api.github.com/users/kwlzn/orgs",
      "repos_url": "https://api.github.com/users/kwlzn/repos",
      "events_url": "https://api.github.com/users/kwlzn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kwlzn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T17:47:05Z",
    "updated_at": "2017-07-12T18:04:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "at least one semi-reasonable strategy here that I can see would be to compose a shim/surrogate entrypoint that wraps the notebook launcher in the pex context that would:\r\n\r\n1) create a temporary dir\r\n2) emit the `kernel.json` as described above to the tmp dir under `kernels/<id>/kernel.json`\r\n3) add the temporary dir to an exported `JUPYTER_PATH`\r\n4) invoke the notebook server runner\r\n5) cleanup the temporary dir in a `finally` block\r\n\r\nthis helps isolate the configuration to a per-run instance vs stashing keyed, per-run copies in e.g. `~/.jupyter`.\r\n\r\nI'm planning to run with this model now for the purposes of experimentation, but open to better strategies here if anyone has ideas.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/315734357",
    "html_url": "https://github.com/jupyter/notebook/issues/2636#issuecomment-315734357",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2636",
    "id": 315734357,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTczNDM1Nw==",
    "user": {
      "login": "rolweber",
      "id": 12234414,
      "node_id": "MDQ6VXNlcjEyMjM0NDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12234414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolweber",
      "html_url": "https://github.com/rolweber",
      "followers_url": "https://api.github.com/users/rolweber/followers",
      "following_url": "https://api.github.com/users/rolweber/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolweber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolweber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolweber/subscriptions",
      "organizations_url": "https://api.github.com/users/rolweber/orgs",
      "repos_url": "https://api.github.com/users/rolweber/repos",
      "events_url": "https://api.github.com/users/rolweber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolweber/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T11:52:13Z",
    "updated_at": "2017-07-17T11:52:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I interpret [this line](https://github.com/jupyter/jupyter_client/blob/master/jupyter_client/launcher.py#L69) in `launcher.py` (jupyter_client) correctly, the kernel will inherit the notebook server's environment, unless the kernel spec defines an environment. So, if your kernel specs don't set any environment variables, you could provide what you need to the notebook server, and it will be available to the kernels.\r\n\r\nIf your kernel specs do set some environment variables, you could customize the launcher to pass selected environment variables from the notebook server to the kernels. Or you could customize the kernel manager to always pass an environment definition to the launcher. If you get the list of environment variables to be propagated from the configuration, you could create a PR and maybe get your changes merged.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/315914768",
    "html_url": "https://github.com/jupyter/notebook/issues/2636#issuecomment-315914768",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2636",
    "id": 315914768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkxNDc2OA==",
    "user": {
      "login": "kwlzn",
      "id": 1883523,
      "node_id": "MDQ6VXNlcjE4ODM1MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1883523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kwlzn",
      "html_url": "https://github.com/kwlzn",
      "followers_url": "https://api.github.com/users/kwlzn/followers",
      "following_url": "https://api.github.com/users/kwlzn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kwlzn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kwlzn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kwlzn/subscriptions",
      "organizations_url": "https://api.github.com/users/kwlzn/orgs",
      "repos_url": "https://api.github.com/users/kwlzn/repos",
      "events_url": "https://api.github.com/users/kwlzn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kwlzn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-17T23:32:26Z",
    "updated_at": "2017-07-17T23:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "the env var that needs to be set would specify the entrypoint of the kernel launcher, so in terms of concerns it'd be part of the \"kernel configuration\" (i.e. something we set only at kernel launch time vs something we'd want as a static env var in the parent, which in theory could potentially leak into other non-desired contexts or kernel launches). tho it seems already possible to embed a static env var like this directly into a `kernel.json` - so really the remaining gap is the self-reference bit (i.e. understanding and being able to parameterize the values of `sys.executable` and `sys.argv[0]` from the running notebook server context).\r\n\r\nso afaict, to make this all first class it seems like jupyter would need a way to specify kernel configuration in a plugin type model (i.e. executable python code vs json). it might also be cool to use a registry/discovery type pattern against the installed plugins so that just e.g. their presence in the python environment could enable them for use. this would make it as easy as a `pip install` to add new kernel types.\r\n\r\nfwiw, I've posted an initial implementation of the surrogate shim approach described above [here](https://gist.github.com/kwlzn/e5282ed81a95da9935614de3c136c1c7) which is working well for the moment.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/316394798",
    "html_url": "https://github.com/jupyter/notebook/issues/2636#issuecomment-316394798",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2636",
    "id": 316394798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjM5NDc5OA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T13:53:42Z",
    "updated_at": "2017-07-19T13:53:42Z",
    "author_association": "MEMBER",
    "body": "> to make this all first class it seems like jupyter would need a way to specify kernel configuration\r\n\r\nThe KernelSpecManager and KernelManager classes are the implementations of finding and launching kernels, respectively. These are swappable for alternate implementations via the `kernel_manager_class` and `kernel_spec_manager_class` configurables on NotebookApp.\r\n\r\nI just put together [pexnb](https://github.com/minrk/pexnb) which provides a KernelSpecManager that works with PEX and tells the notebook server to use it by default.\r\n\r\nYou should be able to build a notebook env with pex via:\r\n\r\n    pex notebook pexnb -m pexnb -o ./jupyter_notebook.pex\r\n    $PWD/jupyter_notebook.pex\r\n\r\nIt has the assumptions:\r\n\r\n1. pex file is launched via absolute path (otherwise the subprocess cannot find the executable, since pex appears to throw away this information by changing to a temporary directory)\r\n2. you don't want other kernels available (misses some of the point of Jupyter, but if you are going for a single isolated env, this seems to be the right thing to do).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/316402153",
    "html_url": "https://github.com/jupyter/notebook/issues/2636#issuecomment-316402153",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2636",
    "id": 316402153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjQwMjE1Mw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-19T14:18:12Z",
    "updated_at": "2017-07-19T14:18:12Z",
    "author_association": "MEMBER",
    "body": "Quick reminder: I'm planning a revamp of the kernel finding machinery, described here: https://github.com/jupyter/jupyter_client/pull/261",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/317097634",
    "html_url": "https://github.com/jupyter/notebook/issues/2636#issuecomment-317097634",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2636",
    "id": 317097634,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzA5NzYzNA==",
    "user": {
      "login": "kwlzn",
      "id": 1883523,
      "node_id": "MDQ6VXNlcjE4ODM1MjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1883523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kwlzn",
      "html_url": "https://github.com/kwlzn",
      "followers_url": "https://api.github.com/users/kwlzn/followers",
      "following_url": "https://api.github.com/users/kwlzn/following{/other_user}",
      "gists_url": "https://api.github.com/users/kwlzn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kwlzn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kwlzn/subscriptions",
      "organizations_url": "https://api.github.com/users/kwlzn/orgs",
      "repos_url": "https://api.github.com/users/kwlzn/repos",
      "events_url": "https://api.github.com/users/kwlzn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kwlzn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-21T19:55:37Z",
    "updated_at": "2017-07-21T19:55:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks for the pointers and reference implementation @minrk - very helpful!\r\n",
    "performed_via_github_app": null
  }
]
