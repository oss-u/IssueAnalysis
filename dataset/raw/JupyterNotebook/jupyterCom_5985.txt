[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/782394935",
    "html_url": "https://github.com/jupyter/notebook/issues/5985#issuecomment-782394935",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5985",
    "id": 782394935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjM5NDkzNQ==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-19T22:05:52Z",
    "updated_at": "2021-02-19T22:05:52Z",
    "author_association": "MEMBER",
    "body": "What's interesting about this is that it happens on Windows **and** Linux and those two platforms use different mechanisms for interrupts (an `interrupt_event` vs. `SIGINT`, respectively).  \r\n\r\nThis led me to look at `nb_conda_kernels` and I notice that the kernel is launched differently depending on whether the current process (i.e., the notebook or jupyter server) `sys.prefix` path matches that of the target kernel's conda env.  If matched, the startup is identical to not using nb_conda_kernels (and likely more akin to what you see with your `jlab_env` kernel). If not-matched, or \"external\", the target conda env must be activated, then the kernel is started.  All of this occurs via the `nb_conda_kernel.runner` script and, as a result, I believe the process inheritance is affected, leading to both `interrupt_events` and `signals` not _flowing_ to the \"child\" process.\r\n\r\nI then checked for open issues regarding interrupts and found you opened this issue https://github.com/Anaconda-Platform/nb_conda_kernels/issues/180 back in September and one in Lab four months prior to that: https://github.com/jupyterlab/jupyterlab/issues/8388.\r\n\r\nBased on the findings above, I believe this needs to be pursued by the `nb_conda_kernels` maintainers.  However, if your kernel were to support _message-based interrupts_, (which ipykernel does not) then the interrupt sent from `jupyter_client` would go through the messaging protocol and not via a signal (or interrupt_event) and would likely work.\r\n\r\nI suspect that if you run the server (notebook or jupyter server) from the `no_jlab_env`, then _that_ kernel will be interruptable, while the `jlab_env` kernel will not.\r\n\r\nI'm closing this issue and the jupyter lab issue should similarly be closed.  Should there be an actual Jupyter issue from this, it would likely need to be dealt with in the `jupyter_client` repository where the kernel's lifecycle management takes place.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/782571337",
    "html_url": "https://github.com/jupyter/notebook/issues/5985#issuecomment-782571337",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5985",
    "id": 782571337,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjU3MTMzNw==",
    "user": {
      "login": "evfro",
      "id": 5283394,
      "node_id": "MDQ6VXNlcjUyODMzOTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5283394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/evfro",
      "html_url": "https://github.com/evfro",
      "followers_url": "https://api.github.com/users/evfro/followers",
      "following_url": "https://api.github.com/users/evfro/following{/other_user}",
      "gists_url": "https://api.github.com/users/evfro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/evfro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/evfro/subscriptions",
      "organizations_url": "https://api.github.com/users/evfro/orgs",
      "repos_url": "https://api.github.com/users/evfro/repos",
      "events_url": "https://api.github.com/users/evfro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/evfro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-20T06:29:01Z",
    "updated_at": "2021-02-20T06:29:28Z",
    "author_association": "NONE",
    "body": "@kevin-bates thank you very much for your rigorous analysis and for explanations! All mentioned issues were also mine, I felt desperate due to inability to understand from which side the problem comes from. Now it's clear. I'll close the jupyterlab issue.\r\n\r\nYou're absolutely right, if I'd install `jupyterlab` in the `no_jlab_env`, it would work normally. However, it defeats the purpose of the described setup. The whole idea is to have and maintain only one `jupyterlab` installation in a dedicated environment rather than having to install `jupyterlab` in every new environment created for each new project. It's a pity that such functionality doesn't work out-of-the-box (I thought that it's a pretty common usage pattern). Simply switching the kernel (when `nb_conda_kernels` is disabled or not installed) doesn't activate the proper environment.\r\n\r\nI have started the related discussion at https://discourse.jupyter.org/t/unable-to-reliably-use-single-jypyterlab-server-with-multiple-conda-environments/7979. Maybe someone will come up with a workaround, at least unless `nb_conda_kernels` gets fixed. I'd really like to avoid having to install `jupyterlab` in all my current and future environments. But I don't see any viable alternative so far...",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/782573049",
    "html_url": "https://github.com/jupyter/notebook/issues/5985#issuecomment-782573049",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5985",
    "id": 782573049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjU3MzA0OQ==",
    "user": {
      "login": "meeseeksmachine",
      "id": 39504233,
      "node_id": "MDQ6VXNlcjM5NTA0MjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39504233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meeseeksmachine",
      "html_url": "https://github.com/meeseeksmachine",
      "followers_url": "https://api.github.com/users/meeseeksmachine/followers",
      "following_url": "https://api.github.com/users/meeseeksmachine/following{/other_user}",
      "gists_url": "https://api.github.com/users/meeseeksmachine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meeseeksmachine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meeseeksmachine/subscriptions",
      "organizations_url": "https://api.github.com/users/meeseeksmachine/orgs",
      "repos_url": "https://api.github.com/users/meeseeksmachine/repos",
      "events_url": "https://api.github.com/users/meeseeksmachine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meeseeksmachine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-20T06:42:41Z",
    "updated_at": "2021-02-20T06:42:41Z",
    "author_association": "NONE",
    "body": "This issue has been mentioned on **Jupyter Community Forum**. There might be relevant details there:\n\nhttps://discourse.jupyter.org/t/unable-to-reliably-use-single-jypyterlab-server-with-multiple-conda-environments/7979/2\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/782704342",
    "html_url": "https://github.com/jupyter/notebook/issues/5985#issuecomment-782704342",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5985",
    "id": 782704342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjcwNDM0Mg==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-20T15:58:26Z",
    "updated_at": "2021-02-20T15:58:26Z",
    "author_association": "MEMBER",
    "body": "> However, it defeats the purpose of the described setup. The whole idea is to have and maintain only one jupyterlab installation in a dedicated environment rather than having to install jupyterlab in every new environment created for each new project.\r\n\r\nI understand.  The purpose of that experiment was to confirm the hypothesis that its the _external_ environments that yield uninterruptible kernels.  I agree that this is something that would be worth addressing.",
    "performed_via_github_app": null
  }
]
