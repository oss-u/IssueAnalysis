[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102407720",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102407720",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102407720,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjQwNzcyMA==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-15T14:04:36Z",
    "updated_at": "2015-05-15T14:04:36Z",
    "author_association": "MEMBER",
    "body": "the problem is that this change the semantics of the language. The assignment statement does have a value in itself, so it is not obvious what to do. I can see that going into a rabbit hole if you start to deals with value unpacking ellipsis... and so on and so forth. You then get slippery slope and want full macros.\n\nThe display part is sufficiently easy, with from IPython.display import display, and it is not that hard to wrap in a function that returns its input:\n\n```\nfrom IPython.display import display\ndef pipe_display(obj):\n    display(obj)\n    return obj\np = pipe_display\na = p(1)\nb = p(2)\nc = p(a+b)\n```\n\nFrom the computation point of view, `p` is not there so you can do a lot of things not doable on your proposal :\n\n```\np(3)+p(p(2)*p(7))\n```\n\nIf `p`is ugly, you can define `__or__` either on `P`, or your objects:\n\n``` python\nclass P:\n\n    def __or__(self, other):\n        display(other)\n        return other\np = P()\n\nclass MyObj:\n\n    def __init__(self,value):\n        self.value = value\n\n    def __repr__(self):\n        return str(self.value)\n\n    def __or__(self, other):\n        return other(self)\n\nMyObj(1)|p\nMyObj(2)|p\np|MyObj('hey')\n```\n\nWhich is a less clutterd syntax in some sens.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102644665",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102644665",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102644665,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY0NDY2NQ==",
    "user": {
      "login": "cknoll",
      "id": 1315698,
      "node_id": "MDQ6VXNlcjEzMTU2OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1315698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cknoll",
      "html_url": "https://github.com/cknoll",
      "followers_url": "https://api.github.com/users/cknoll/followers",
      "following_url": "https://api.github.com/users/cknoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/cknoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cknoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cknoll/subscriptions",
      "organizations_url": "https://api.github.com/users/cknoll/orgs",
      "repos_url": "https://api.github.com/users/cknoll/repos",
      "events_url": "https://api.github.com/users/cknoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cknoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T16:09:18Z",
    "updated_at": "2015-05-16T16:09:18Z",
    "author_association": "NONE",
    "body": "The piping in combination with overloading `__or__` is a very nice trick. However `x = a + b |p` does not work on sympy expressions nor on numpy arrays, which are the two most important data types for my purpose. On the other hand `x = p | a + b` works but seems not preferable because it might confuse the reader to much.\n\nAs I understand IPython already does a lot of 'magic' behind the scene which sometimes change the semantics of python, e.g. `%autocall`, `?` and `??`. From my point of view this stuff is extremly useful. A special comment to pipe an assignment through display would only be another piece in that puzzle.\n\nW.r.t to the rabbit hole argument I suggest the following:\n1. Define an IPython cell-magic like `%% display_pipe_comment`. Which activates the respective mode.\n2. Implement some java script hook which looks for lines ending on `#:` and containing a _single_ assignment. For such lines the right hand side of the assignment is passed through the `display_pipe` function defined above.\n   For any other line, the comment has no effect.\n\nIMHO that should avoid complicated cases like `a, b = ab = range(2) #:` while it serves for all cases where the systax the should be as clear and transparent as possible.\n\nOf course, `#:` was just a quick suggestion, maybe there is a more appropriate choice.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102649526",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102649526",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102649526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY0OTUyNg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T16:36:13Z",
    "updated_at": "2015-05-16T16:36:13Z",
    "author_association": "MEMBER",
    "body": "Well doing this with cell magics would be doable, but really complex. the only reliable way of doing it would be to have a way to get the AST with the comments, which is tough. I don't want to start re-parsing python. The  %/%% syntax is already tough with comments and have some edge cases. Doing it in js is not more easy, and raise the question of language agnosticity.\n\nMaybe @takluyver see a way of doing it through AST transform ? \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102700845",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102700845",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102700845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcwMDg0NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T21:45:12Z",
    "updated_at": "2015-05-16T21:45:12Z",
    "author_association": "MEMBER",
    "body": "It would be easy to do an AST transform that would always display the value of an assignment as the last statement in a cell. But I think that would display many things you didn't want to show. Having a marker of some kind to for assignments that should be displayed is trickier, especially if you want to do it with more than just the last statement in a cell.\n\nI suspect that it's better all round to explicitly display the things you want to be shown. This is especially true if you're showing multiple outputs from one cell, because you may well want to label them in some way (`print('step 1:', ...)`). I don't think we want to get further into redesigning how the language works.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102701591",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102701591",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102701591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcwMTU5MQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T21:51:16Z",
    "updated_at": "2015-05-16T21:51:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is actually what Mathematica does so there is a bit of precedence. But\nI don't think we would want to do that by default. And yeah, handling\nmultiple assignments gets a bit tricky...\n\nOn Sat, May 16, 2015 at 2:45 PM, Thomas Kluyver notifications@github.com\nwrote:\n\n> It would be easy to do an AST transform that would always display the\n> value of an assignment as the last statement in a cell. But I think that\n> would display many things you didn't want to show. Having a marker of some\n> kind to for assignments that should be displayed is trickier, especially if\n> you want to do it with more than just the last statement in a cell.\n> \n> I suspect that it's better all round to explicitly display the things you\n> want to be shown. This is especially true if you're showing multiple\n> outputs from one cell, because you may well want to label them in some way (print('step\n> 1:', ...)). I don't think we want to get further into redesigning how the\n> language works.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/jupyter/notebook/issues/93#issuecomment-102700845.\n\n## \n\nBrian E. Granger\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102702116",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102702116",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102702116,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcwMjExNg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T21:54:36Z",
    "updated_at": "2015-05-16T21:54:36Z",
    "author_association": "MEMBER",
    "body": "If this is particularly relevant for symbolic mathematics, sympy might be interested in doing it. They already have some AST transforms for things like making undefined variables act as symbols, IIRC.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102790029",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102790029",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102790029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjc5MDAyOQ==",
    "user": {
      "login": "cknoll",
      "id": 1315698,
      "node_id": "MDQ6VXNlcjEzMTU2OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1315698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cknoll",
      "html_url": "https://github.com/cknoll",
      "followers_url": "https://api.github.com/users/cknoll/followers",
      "following_url": "https://api.github.com/users/cknoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/cknoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cknoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cknoll/subscriptions",
      "organizations_url": "https://api.github.com/users/cknoll/orgs",
      "repos_url": "https://api.github.com/users/cknoll/repos",
      "events_url": "https://api.github.com/users/cknoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cknoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T11:53:37Z",
    "updated_at": "2015-05-17T11:53:37Z",
    "author_association": "NONE",
    "body": "While symbolic mathematics constitutes a big part of what we are doing, numerical math is almost as important. And I think it would also be helpful to understand 'general (python) code' if some important intermediate results are displayed. Thus, a sympy specific solution IMHO would be suboptimal.\n\nI dont know Mathematica but Matlab (mainly concerned with numerical calculation) has the following behavior:\n- Line ended without `;` -> result displayed\n- Line ended with `;` -> result not displayed\n  \n  And Maxima: \n- Line ended with `;` -> result displayed\n- Line ended with `$` -> result not displayed\n  \n  So whats about the optional semicolon as python line ending: Is it available in the AST?\n  \n  And whats about the inspect module? At least it has a function `inspect.getcomments(object)`.\n  \n  I tried to find out where an how features like `%%autocall` and `?` at the line end are implemented. I guess its on js level but could not find the respective source. In my understanding the question of language agnosticity also arises in these cases, but has already been answered appropriately, I guess.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/102824442",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-102824442",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 102824442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgyNDQ0Mg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T17:22:21Z",
    "updated_at": "2015-05-17T17:22:21Z",
    "author_association": "MEMBER",
    "body": "We already have the `;` to suppress output like Matlab, but it only works if Python would have displayed output otherwise. Semicolons are not part of the AST, so we have some rather awkward logic to check for them - and that can't really be reused for what you want, because it only checks after Python tries to display a result.\n\nI think we should set quite a high bar for any new special syntax we come up with - the code to deal with it is always tricky, and it risks confusing people about what Python syntax is (we turned off autocall by default for this reason).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/103039668",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-103039668",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 103039668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzAzOTY2OA==",
    "user": {
      "login": "cknoll",
      "id": 1315698,
      "node_id": "MDQ6VXNlcjEzMTU2OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1315698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cknoll",
      "html_url": "https://github.com/cknoll",
      "followers_url": "https://api.github.com/users/cknoll/followers",
      "following_url": "https://api.github.com/users/cknoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/cknoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cknoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cknoll/subscriptions",
      "organizations_url": "https://api.github.com/users/cknoll/orgs",
      "repos_url": "https://api.github.com/users/cknoll/repos",
      "events_url": "https://api.github.com/users/cknoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cknoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T12:09:24Z",
    "updated_at": "2015-05-18T12:09:24Z",
    "author_association": "NONE",
    "body": " +1 for turning off special syntax by default.\n\nBut still, I think my proposal would be useful in teaching context.\n\nFrom the discussion so far I see the following possibility:\n\ntakluyver:\n\n> It would be easy to do an AST transform that would always display the value of an assignment as the last statement in a cell.\n\ntakluyver:\n\n> We already have the `;` to suppress output like Matlab, but it only works if Python would have displayed output otherwise.\n\nSo, assuming the above mentioned AST-Transform is implemented and _explicitly_ activated, one could turn off the display for assignments where it is not wanted.\n\nIn fact, I would prefer it the other way around (turn display on only where it is desired) but this seems to imply the inversion of the `;` detection.\n\nTo get an impression on my own: where is the logic for checking for semicolons implemented?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/103123922",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-103123922",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 103123922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMzEyMzkyMg==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T16:46:50Z",
    "updated_at": "2015-05-18T16:46:50Z",
    "author_association": "MEMBER",
    "body": "Oh, if you want to explicitly activate it and do it for the last output of all cells, you can do it as an extension, with no need for changes in core IPython.\n- [Docs on writing extensions](http://ipython.org/ipython-doc/3/config/extensions/index.html#writing-extensions)\n- [Docs on AST transformers](http://greentreesnakes.readthedocs.org/en/latest/manipulating.html#modifying-the-tree)\n- Add an AST transformer to the list `ip.ast_transformers` when your extension is loaded.\n\nThe code checking for semicolons is [here](https://github.com/ipython/ipython/blob/rel-3.1.0/IPython/core/displayhook.py#L82), though that uses a completely different mechanism, because semicolons aren't part of the AST.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/140553227",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-140553227",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 140553227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDU1MzIyNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-15T21:32:38Z",
    "updated_at": "2015-09-15T21:32:38Z",
    "author_association": "MEMBER",
    "body": "Closing as this should go into an extension if needed. \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/141194296",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-141194296",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 141194296,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MTE5NDI5Ng==",
    "user": {
      "login": "cknoll",
      "id": 1315698,
      "node_id": "MDQ6VXNlcjEzMTU2OTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1315698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cknoll",
      "html_url": "https://github.com/cknoll",
      "followers_url": "https://api.github.com/users/cknoll/followers",
      "following_url": "https://api.github.com/users/cknoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/cknoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cknoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cknoll/subscriptions",
      "organizations_url": "https://api.github.com/users/cknoll/orgs",
      "repos_url": "https://api.github.com/users/cknoll/repos",
      "events_url": "https://api.github.com/users/cknoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cknoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-17T19:21:10Z",
    "updated_at": "2015-09-17T19:21:10Z",
    "author_association": "NONE",
    "body": "+1 for closing this issue.\nJust for the record: I created an extension which serves my needs. Thanks for guiding me there. Maybe, it is helpful for others:\n\nhttps://github.com/cknoll/displaytools\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359176703",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-359176703",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 359176703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTE3NjcwMw==",
    "user": {
      "login": "ihnorton",
      "id": 327706,
      "node_id": "MDQ6VXNlcjMyNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ihnorton",
      "html_url": "https://github.com/ihnorton",
      "followers_url": "https://api.github.com/users/ihnorton/followers",
      "following_url": "https://api.github.com/users/ihnorton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ihnorton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ihnorton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ihnorton/subscriptions",
      "organizations_url": "https://api.github.com/users/ihnorton/orgs",
      "repos_url": "https://api.github.com/users/ihnorton/repos",
      "events_url": "https://api.github.com/users/ihnorton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ihnorton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-20T14:50:07Z",
    "updated_at": "2018-01-20T14:50:53Z",
    "author_association": "NONE",
    "body": "Since I got here from google, x-ref where this was eventually implemented (6.2+ only): https://github.com/ipython/ipython/pull/10598",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/389338710",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-389338710",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 389338710,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTMzODcxMA==",
    "user": {
      "login": "chbrown",
      "id": 360279,
      "node_id": "MDQ6VXNlcjM2MDI3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/360279?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chbrown",
      "html_url": "https://github.com/chbrown",
      "followers_url": "https://api.github.com/users/chbrown/followers",
      "following_url": "https://api.github.com/users/chbrown/following{/other_user}",
      "gists_url": "https://api.github.com/users/chbrown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chbrown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chbrown/subscriptions",
      "organizations_url": "https://api.github.com/users/chbrown/orgs",
      "repos_url": "https://api.github.com/users/chbrown/repos",
      "events_url": "https://api.github.com/users/chbrown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chbrown/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-15T22:51:30Z",
    "updated_at": "2018-05-15T22:51:30Z",
    "author_association": "NONE",
    "body": "Adding to ihnorton's SEO :), you can configure IPython at the command line to turn on this interactivity:\r\n\r\n    ipython --InteractiveShell.ast_node_interactivity=last_expr_or_assign\r\n\r\nUnfortunately, it appears that the `jupyter notebook ...` command doesn't recognize the same syntax, but you can have Jupyter pick up this setting by adding a line to your `~/.ipython/profile_default/ipython_config.py` (which, at least by default, Jupyter reads from): \r\n\r\n    c.InteractiveShell.ast_node_interactivity = 'last_expr_or_assign'",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/389565052",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-389565052",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 389565052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTU2NTA1Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-16T15:38:29Z",
    "updated_at": "2018-05-16T15:38:29Z",
    "author_association": "MEMBER",
    "body": "Or just you the `%config` magic to change it dynamically.\r\n\r\n> Unfortunately, it appears that the jupyter notebook ... command doesn't recognize the same syntax\r\n\r\nIt does recognize the syntax, except it's an IPython configuration option, not a Jupyter configuration option.\r\n\r\n> ~/.ipython/profile_default/ipython_config.py (which, at least by default, Jupyter reads from):\r\n\r\nNo : IPython reads from that, not Jupyter ;-) \r\n\r\n\r\n\r\nIPython's [\"what's new\"](http://ipython.readthedocs.io/en/stable/whatsnew/version6.html#assignments-return-values) does explain that : \r\n\r\n> This option can be toggled at runtime with the %config magic, and will trigger on assignment a = 1, augmented assignment +=, -=, |= … as well as type annotated assignments: a:int = 2\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/718763660",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-718763660",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 718763660,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODc2MzY2MA==",
    "user": {
      "login": "ned2",
      "id": 2831640,
      "node_id": "MDQ6VXNlcjI4MzE2NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2831640?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ned2",
      "html_url": "https://github.com/ned2",
      "followers_url": "https://api.github.com/users/ned2/followers",
      "following_url": "https://api.github.com/users/ned2/following{/other_user}",
      "gists_url": "https://api.github.com/users/ned2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ned2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ned2/subscriptions",
      "organizations_url": "https://api.github.com/users/ned2/orgs",
      "repos_url": "https://api.github.com/users/ned2/repos",
      "events_url": "https://api.github.com/users/ned2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ned2/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-29T13:46:55Z",
    "updated_at": "2020-10-29T13:46:55Z",
    "author_association": "NONE",
    "body": "Simple way to get this awesome IPython feature in your Jupyter notebook:\r\n\r\n\r\n    from IPython.core.interactiveshell import InteractiveShell\r\n    InteractiveShell.ast_node_interactivity = \"last_expr_or_assign\"",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/718990041",
    "html_url": "https://github.com/jupyter/notebook/issues/93#issuecomment-718990041",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/93",
    "id": 718990041,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODk5MDA0MQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-29T20:04:33Z",
    "updated_at": "2020-10-29T20:04:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "Oh, I didn't know that, thanks for sharing that!",
    "performed_via_github_app": null
  }
]
