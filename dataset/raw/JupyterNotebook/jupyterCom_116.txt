[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105667236",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105667236",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105667236,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY2NzIzNg==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T21:15:04Z",
    "updated_at": "2015-05-26T21:15:04Z",
    "author_association": "MEMBER",
    "body": "> A new message, the first, (in blue) would be added, allowing the ~~server~~ [frontend] to ask the kernel if the static assets it knows about, associated with that kernel, is correct. The message would be a dict of static asset path and contents hashes.\n> \n> The same message in the opposite direction is the kernel's response. It would be some type of data structure, maybe a binary message, containing static asset paths and their contents, and a list of the static assets that can be deleted from the cache.\n\nI certainly like this approach. It makes sure that assets are based on the kernel runtime rather than associated with the overall notebook server (or other frontend).\n\nCan path be remote or local, depending on the author's implementation?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105668689",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105668689",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105668689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY2ODY4OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T21:22:19Z",
    "updated_at": "2015-05-26T21:22:19Z",
    "author_association": "MEMBER",
    "body": "It breaks the assumption that the kernel does not know it is in a notebook/js environment, and make it complicated to map kernel-path, to server-path, to frontend-path. \n\nThe Python packaging registry is not language agnostic. It forces each kernel(s) to reimplement a static-webserver, our server only act as a proxy.\n\nI can see a problem with identical-path  in many kernels. Once one is cached, it shadows other kernels resources. or you install a new version, and restart your kernel. You get the cached versions. \n\nKernel authors will never bother to implement delete messages.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105670047",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105670047",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105670047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY3MDA0Nw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T21:29:29Z",
    "updated_at": "2015-05-26T21:29:29Z",
    "author_association": "MEMBER",
    "body": "> It breaks the assumption that the kernel does not know it is in a notebook/js environment, and make it complicated to map kernel-path, to server-path, to frontend-path.\n\nIf you include the require bits, I'd say that's true. However, treating this as a resource query and response relative to the kernel does not make it coupled to the notebook. We'd want this for any other HTML based frontends, including [Hydrogen](https://github.com/willwhitney/hydrogen).\n\nI'm not in agreement about this using a Python packaging registry, as I think resources should be installed per kernel.\n\n> Kernel authors will never bother to implement delete messages.\n\nDon't you think that would effect their users negatively enough that eventually they would?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105670911",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105670911",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105670911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY3MDkxMQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T21:32:47Z",
    "updated_at": "2015-05-26T21:32:47Z",
    "author_association": "MEMBER",
    "body": "The kernel knowing about static assets and telling the server seems problematic. I think if the kernel is being asked about the assets, it should be responsible for serving them, as well.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105673582",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105673582",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105673582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY3MzU4Mg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T21:41:35Z",
    "updated_at": "2015-05-26T21:41:35Z",
    "author_association": "MEMBER",
    "body": "> Don't you think that would effect their users negatively enough that eventually they would?\n\nNo they won't thay are developper, it work for them if they restart the server, which they do every 10 minutes. \n\n> We'd want this for any other HTML based frontends, including Hydrogen.\n\nNothing tell you that resources will be the same for hydrogen and the notebook.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105678493",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105678493",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105678493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY3ODQ5Mw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T21:56:08Z",
    "updated_at": "2015-05-26T21:57:47Z",
    "author_association": "MEMBER",
    "body": "> I can see a problem with identical-path in many kernels.\n\nI don't expect this to be a problem. Any resource fetched from a kernel should necessarily be served from a kernel-specific path. So when kernel K is asked for resource R, the server maps it to `/K/R`, not `/R`, so kernels are not capable of collision with each other.\n\nI do think if we are going as far as making the Kernels responsible for static resources via messages, the most logical way to do that is to proxy requests to the Kernels themselves, and expect Kernels to run an HTTP server to serve the files. HTTP already has all the features we are describing here, I think.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105679509",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105679509",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105679509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY3OTUwOQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:00:30Z",
    "updated_at": "2015-05-26T22:00:30Z",
    "author_association": "MEMBER",
    "body": "> A second new message (in red), would be added that would allow the kernel to invoke a require.js call in the front-end. This would eliminate the need of a notebook extensions list, and it's need to be configured. \n\nThis statement isn't true. nbextensions aren't limited to kernel-specific behavior. toc, slideshow, nbgrader, etc. would all not be addressed by the proposal, and continue to require nbextensions as it is.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105680265",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105680265",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105680265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MDI2NQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:03:30Z",
    "updated_at": "2015-05-26T22:03:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey guys, glad we are talking about this.  Here are my responses.\n\n@rgbkrk \n\n> Can path be remote or local, depending on the author's implementation?\n\nSorry!  I really should have clarified, \"path\" here means \"unique name\".  It can be whatever string the package author wants!\n\n@Carreau \n\n> It forces each kernel(s) to reimplement a static-webserver, our server only act as a proxy.\n\nThe only piece of the above that the kernel authors need to implement is the single message, in blue.\n\nIt's up to kernel authors to choose a mechanism equivalent to Python's entry points, or something that can be used as an alternative.\n\n> It breaks the assumption that the kernel does not know it is in a notebook/js environment,\n\nNo.  \nWebserver says \"hey these are assets I know about\"\nKernel says \"these are assets you are missing, and while you're at it delete these others\"\nKernel says \"load this asset\" (which doesn't have to be JS)\nWebserver says to client \"load this asset\" (which doesn't have to be JS)\n\n> I can see a problem with identical-path in many kernels. Once one is cached, it shadows other kernels resources. or you install a new version, and restart your kernel. You get the cached versions.\n\nYou missed the part where I mentioned caches are associated to specific kernels, by id.\n\n> Kernel authors will never bother to implement delete messages.\n\nThat means their kernels aren't up to spec.\n\n@minrk \n\n> it should be responsible for serving them, as well.\n\nBut then if the kernel hangs, or is thinking, the assets are unavailable.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105680771",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105680771",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105680771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MDc3MQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:05:24Z",
    "updated_at": "2015-05-26T22:05:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This statement isn't true. nbextensions aren't limited to kernel-specific behavior. toc, slideshow, nbgrader, etc. would all not be addressed by the proposal, and continue to require nbextensions as it is.\n\nThanks for catching that!  I'll edit my post.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105681515",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105681515",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105681515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MTUxNQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:07:31Z",
    "updated_at": "2015-05-26T22:07:31Z",
    "author_association": "MEMBER",
    "body": "> I think if the kernel is being asked about the assets, it should be responsible for serving them, as well.\n\nThat's fair. Wait... How many ports are we talking then? That doesn't seem tractable unless those are proxied to the main notebook server.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105681604",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105681604",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105681604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MTYwNA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:07:43Z",
    "updated_at": "2015-05-26T22:07:43Z",
    "author_association": "MEMBER",
    "body": "> But then if the kernel hangs, or is thinking, the assets are unavailable.\n\nThat's true, but how else are you going to get the resources from the kernel to the notebook server? It sounds like you have to either:\n1. assume shared filesystem, and make it impossible for kernels to be isolated or remote\n2. reimplement http over zmq, and fetch from the kernel anway\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105681860",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105681860",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105681860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MTg2MA==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:08:21Z",
    "updated_at": "2015-05-26T22:08:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Nothing tell you that resources will be the same for hydrogen and the notebook.\n\nI don't think we'd need to differentiate.  The same way the rich display system works, if a front-end can load an asset, it wont.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105683739",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105683739",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105683739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MzczOQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:10:46Z",
    "updated_at": "2015-05-26T22:10:46Z",
    "author_association": "MEMBER",
    "body": "I mean the JS could be different in notebook than in hydrogen. or rodeo, or thebe. do you introduce mimetype per frontend ? \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105683795",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105683795",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105683795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4Mzc5NQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:10:50Z",
    "updated_at": "2015-05-26T22:12:17Z",
    "author_association": "MEMBER",
    "body": "@minrk\n\n> assume shared filesystem, and make it impossible for kernels to be isolated or remote\n\nI'm certainly going to reject that one. Doesn't work right for thebe or any other remote context.\n\n> reimplement http over zmq, and fetch from the kernel anyway\n\nAt first I thought you were joking, then I assumed someone implemented that. Like this? https://github.com/fanout/zurl\n\nMy thinking was that resources can be local paths or fully qualified URLs.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105683822",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105683822",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105683822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4MzgyMg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:10:52Z",
    "updated_at": "2015-05-26T22:10:52Z",
    "author_association": "MEMBER",
    "body": "> How many ports are we talking then?\n\nOne. The notebook server would proxy requests like `/kernel/:kernel_name]/static/...` to `kernel_name`.\n\nThere's also a question of whether these should be per kernel _name_ or per kernel _id_. If it's per _id_, it's going to mean roughly 0 cache hits as every kernel instance would get its own URL.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105684165",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105684165",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105684165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NDE2NQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:11:25Z",
    "updated_at": "2015-05-26T22:11:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "> That's true, but how else are you going to get the resources from the kernel to the notebook server? It sounds like you have to either:\n\nI may not understand, but this is what the cache is for.  The webserver would ask the kernel about the assets once the kernel is started, and wouldn't need to later.    \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105684354",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105684354",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105684354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NDM1NA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:11:44Z",
    "updated_at": "2015-05-26T22:11:44Z",
    "author_association": "MEMBER",
    "body": "> My thinking was that resources can be local paths or fully qualified URLs.\n\nThat is forcing knowledge of the notebook server onto the kernels. Do we really want to do that? I assumed not.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105684511",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105684511",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105684511,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NDUxMQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:12:08Z",
    "updated_at": "2015-05-26T22:12:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> My thinking was that resources can be local paths or fully qualified URLs.\n\nYes\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105684681",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105684681",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105684681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NDY4MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:12:58Z",
    "updated_at": "2015-05-26T22:12:58Z",
    "author_association": "MEMBER",
    "body": "> I may not understand, but this is what the cache is for.\n\nCache only helps mitigate future requests, it still needs to get them from the kernel in the first place.\n\n> The webserver would ask the kernel about the assets once the kernel is started, and wouldn't need to later.\n\nSo all resources are known ahead of time, and no new resources are requested during the lifetime of the kernel?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105684918",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105684918",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105684918,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NDkxOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:13:42Z",
    "updated_at": "2015-05-26T22:13:42Z",
    "author_association": "MEMBER",
    "body": "> Webserver says to client \"load this asset\" (which doesn't have to be JS)\n\nThis feels like the wrong way round to do things. The webserver shouldn't be telling the client what to load, the client should be asking the server for the things it determines it needs. Like the way widget display messages can include a require path for a module to load the view from. There are established mechanisms for caching to avoid loading the same thing twice.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105685252",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105685252",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105685252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NTI1Mg==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:15:35Z",
    "updated_at": "2015-05-26T22:15:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> So all resources are known ahead of time, and no new resources are requested during the lifetime of the kernel?\n\nYes, that was our thinking.  It's totally possible we overlooked a use case where that was incorrect.\n\nAlso, you could re-request assets on kernel restart (not just first start).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105685333",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105685333",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105685333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NTMzMw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:16:07Z",
    "updated_at": "2015-05-26T22:16:07Z",
    "author_association": "MEMBER",
    "body": "I'm struggling to see what problems this solves. If we are assuming the kernel knows everything about the server's filesystem in order to tell the server where verything else, then what's the advantage of the kernel managing resources at all, if it can only manage them in a way that the server can understand and access?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105685375",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105685375",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105685375,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NTM3NQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:16:24Z",
    "updated_at": "2015-05-26T22:16:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Like the way widget display messages can include a require path for a module to load the view from. There are established mechanisms for caching to avoid loading the same thing twice.\n\nThe widget display message does exactly that, \"hey load this\"\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105685441",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105685441",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105685441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4NTQ0MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:16:42Z",
    "updated_at": "2015-05-26T22:16:42Z",
    "author_association": "MEMBER",
    "body": "Does this mechanism provide any benefit over a `/kernels/:kernel_name/static` directory?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105686785",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105686785",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105686785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4Njc4NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:25:49Z",
    "updated_at": "2015-05-26T22:25:49Z",
    "author_association": "MEMBER",
    "body": "> The widget display message does exactly that, \"hey load this\"\n\nPossibly I misunderstood. It sounds like in your proposal, the server is _just_ telling the frontend to load something, as a separate message from anything that might actually use it. The widget display messages say 'create this class, loading it from X if you need to'. Crucially, loading the resource is tightly tied to using it, which makes it easy to avoid the race conditions where something would try to use the resource just before it was loaded.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105686876",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105686876",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105686876,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4Njg3Ng==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:26:30Z",
    "updated_at": "2015-05-26T22:26:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Does this mechanism provide any benefit over a /kernels/:kernel_name/static directory?\n\nIf the client, webserver, and kernel exist on three different machines, it does.\n\nAlso,  the `/kernels/:kernel_name/static` directory still has the problem of installation being a two step process (yes this is a problem).  This is where the kernel being in control of the asset locating offers a large benefit.  Package writers can use methods native to their language for packaging static assets, for IPython & Python this is entry points.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105688368",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105688368",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105688368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4ODM2OA==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:31:30Z",
    "updated_at": "2015-05-26T22:31:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Crucially, loading the resource is tightly tied to using it, which makes it easy to avoid the race conditions where something would try to use the resource just before it was loaded.\n\nThat's a good point, about the backend not being aware of when the resource is loaded.  Unfortunatley this problem already exists in our current architecture.  A solution would be to make the red message request/response, so in the kernel the API could be implemented using an asynchronous design pattern.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105688436",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105688436",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105688436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4ODQzNg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:31:57Z",
    "updated_at": "2015-05-26T22:31:57Z",
    "author_association": "MEMBER",
    "body": "> If the client, webserver, and kernel exist on three different machines, it does.\n\nHow? I don't see a mechanism for getting the files from the kernel to the webserver, only communicating paths, which require the filesystem to be the same.\n\n> the /kernels/:kernel_name/static directory still has the problem of installation being a two step process (yes this is a problem). \n\nIt also doesn't solve that problem, it just punts it to the kernel. How does the package communicate this information to the kernel, such that the kernel knows at startup, before any imports, what resources are available?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105688854",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105688854",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105688854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4ODg1NA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:35:03Z",
    "updated_at": "2015-05-26T22:35:03Z",
    "author_association": "MEMBER",
    "body": "If we use setuptools entrypoints for this, and communicate files from the kernel to the server at startup and only at startup, this means potentially 100s of MB of file transfer on every kernel startup to the web server. e.g. if a kernel plugin makes MathJax available, there's no mechanism to make the pieces available on request, which proxying http would do, instead it requires all _possible_ resources to be moved at once to the server on every kernel start.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/105689359",
    "html_url": "https://github.com/jupyter/notebook/issues/116#issuecomment-105689359",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/116",
    "id": 105689359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwNTY4OTM1OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-26T22:39:00Z",
    "updated_at": "2015-05-26T22:39:00Z",
    "author_association": "MEMBER",
    "body": ">  A solution would be to make the red message request/response, so in the kernel the API could be implemented using an asynchronous design pattern.\n\nThe bit about request/response makes sense to me, but I'm not sure what you mean about using async patterns in the kernel. I was thinking about race conditions in the frontend: if 'load this resource' and 'do something that needs that resource' are two separate messages, the 'do something' message can arrive before loading has finished, and then things get tricky. If the frontend requests (with caching) the resources as it needs them, you avoid this problem.\n",
    "performed_via_github_app": null
  }
]
