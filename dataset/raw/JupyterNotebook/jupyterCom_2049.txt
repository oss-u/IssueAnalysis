[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/275030994",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-275030994",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 275030994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTAzMDk5NA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-25T06:37:28Z",
    "updated_at": "2017-01-25T06:37:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I can't reproduce. Please provide a link to an example notebook.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/275951828",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-275951828",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 275951828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTk1MTgyOA==",
    "user": {
      "login": "themrmax",
      "id": 8220288,
      "node_id": "MDQ6VXNlcjgyMjAyODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8220288?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/themrmax",
      "html_url": "https://github.com/themrmax",
      "followers_url": "https://api.github.com/users/themrmax/followers",
      "following_url": "https://api.github.com/users/themrmax/following{/other_user}",
      "gists_url": "https://api.github.com/users/themrmax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/themrmax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/themrmax/subscriptions",
      "organizations_url": "https://api.github.com/users/themrmax/orgs",
      "repos_url": "https://api.github.com/users/themrmax/repos",
      "events_url": "https://api.github.com/users/themrmax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/themrmax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-29T22:33:00Z",
    "updated_at": "2017-01-29T22:33:00Z",
    "author_association": "NONE",
    "body": "@gnestor did you try my example code? maybe you just have a faster computer than me?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/276813707",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-276813707",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 276813707,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgxMzcwNw==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T23:11:44Z",
    "updated_at": "2017-02-01T23:11:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I did. Initially, it was throttled by the default data rate limit ([which will ship with 5.0](https://github.com/jupyter/notebook/pull/1846)):\r\n\r\n![screencap1](http://g.recordit.co/kHLPjCaiFl.gif)\r\n\r\nAfter overriding it, I was able to fetch the data and it was slow to respond to user events initially (because it's a lot of data and a lot of DOM nodes), but then I was able to change focus with no issue (I tried the `j` and `k` keyboard shortcuts too):\r\n\r\n![screencap1](http://g.recordit.co/FRxv023lVM.gif)\r\n\r\nThere isn't much we can do to resolve the notebook being slow when a ton of data is rendered, except for implementing some form of infinite scrolling that can _paginate_ through data and ideally fetch new data from the kernel vs. keeping it in memory in the browser. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/276820411",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-276820411",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 276820411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgyMDQxMQ==",
    "user": {
      "login": "themrmax",
      "id": 8220288,
      "node_id": "MDQ6VXNlcjgyMjAyODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8220288?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/themrmax",
      "html_url": "https://github.com/themrmax",
      "followers_url": "https://api.github.com/users/themrmax/followers",
      "following_url": "https://api.github.com/users/themrmax/following{/other_user}",
      "gists_url": "https://api.github.com/users/themrmax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/themrmax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/themrmax/subscriptions",
      "organizations_url": "https://api.github.com/users/themrmax/orgs",
      "repos_url": "https://api.github.com/users/themrmax/repos",
      "events_url": "https://api.github.com/users/themrmax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/themrmax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T23:43:54Z",
    "updated_at": "2017-02-01T23:43:54Z",
    "author_association": "NONE",
    "body": "@gnestor yes this makes sense, although it might be a lot of work I think this is definitely a feature we should have, I've renamed the issue accordingly.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/276823023",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-276823023",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 276823023,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgyMzAyMw==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-01T23:57:15Z",
    "updated_at": "2017-02-01T23:57:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Carreau @takluyver Has there been any discussion around infinite scrolling for output areas? I'm not sure how much (if any) performance improvements we would get without kernel interaction (e.g. fetching new _pages_ of data from the kernel).\r\n\r\n@themrmax If kernel interaction is required, then this feature would not be implemented in notebook but rather ipywidgets or another \"infinite scrolling output area\" extension that can interact with ipython and ideally other kernels. This _could_ be a good experiment for a kernel-connected [mimerender extension](https://github.com/jupyterlab/mimerender-cookiecutter). ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/276826425",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-276826425",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 276826425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjgyNjQyNQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T00:16:42Z",
    "updated_at": "2017-02-02T00:16:42Z",
    "author_association": "MEMBER",
    "body": "> Has there been any discussion around infinite scrolling for output areas\r\n\r\nYes, and more generally about the notebook itself. \r\nTHe issue is with widgets, or other elements that attach events to the DOM. You can't not display (or remove) them as it will fail to register some events. If it's a \"safe\" mime then that would be fine. \r\n\r\nAnother question would be how to \"recycle\" things that are high on the page. \r\nThat _could_ be done, by replacing elements with fixed height divs (measuring just after things get out of sight far enough). Annoying if windows resize but doable. \r\n\r\nIn the end it would be easier if model was on server side and do lazy loading. But that's far away. \r\n\r\nBeyond infinite scrolling, we can just collapse something to be and ask a \"would you like to display everything\". \r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/276852179",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-276852179",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 276852179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Njg1MjE3OQ==",
    "user": {
      "login": "themrmax",
      "id": 8220288,
      "node_id": "MDQ6VXNlcjgyMjAyODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8220288?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/themrmax",
      "html_url": "https://github.com/themrmax",
      "followers_url": "https://api.github.com/users/themrmax/followers",
      "following_url": "https://api.github.com/users/themrmax/following{/other_user}",
      "gists_url": "https://api.github.com/users/themrmax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/themrmax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/themrmax/subscriptions",
      "organizations_url": "https://api.github.com/users/themrmax/orgs",
      "repos_url": "https://api.github.com/users/themrmax/repos",
      "events_url": "https://api.github.com/users/themrmax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/themrmax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T02:41:12Z",
    "updated_at": "2017-02-02T08:41:00Z",
    "author_association": "NONE",
    "body": "@gnestor i really like the idea of the jupyterlab extension, i think this is key to achieve feature parity with Rstudio/Spyder etc. @Carreau do you think it would make sense to use something like https://github.com/NeXTs/Clusterize.js ? it looks like they are using the fixed hight div's trick you suggest, and maybe it would be a fairly lightweight integration? **EDIT**: i'm going to try and update `jupyterlab_table` to use clusterize, i'll open a PR there if I can get it to work.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/276945427",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-276945427",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 276945427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3Njk0NTQyNw==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T12:32:02Z",
    "updated_at": "2017-02-02T12:32:02Z",
    "author_association": "MEMBER",
    "body": "We are having a related discussion in JupyterLab: https://github.com/jupyterlab/jupyterlab/issues/1587",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277007640",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277007640",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277007640,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzAwNzY0MA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T16:31:20Z",
    "updated_at": "2017-02-02T16:31:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@blink1073 Thanks!\r\n\r\n@themrmax I started implementing [react-virtualized](https://github.com/bvaughn/react-virtualized) in jupyterlab_table! It will be good to compare the performance of both 👍 ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277094610",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277094610",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277094610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzA5NDYxMA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T21:47:18Z",
    "updated_at": "2017-02-02T21:47:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@themrmax Here is an initial implementation using react-virtualized's table: https://github.com/gnestor/jupyterlab_table/tree/react-virtualized\r\n\r\nI also have an example using it's grid which allows for horizontal scrolling but actually uses 2 different grids (one for the header) and attempts to keep their x scroll positions in sync (not very well).\r\n\r\nThey're both pretty performant but could be optimized:\r\n\r\n![screencap](http://g.recordit.co/iKgC6D3quU.gif)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277103497",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277103497",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277103497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzEwMzQ5Nw==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T22:21:38Z",
    "updated_at": "2017-02-02T22:21:38Z",
    "author_association": "MEMBER",
    "body": "Nice!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277110927",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277110927",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277110927,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzExMDkyNw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-02T22:53:47Z",
    "updated_at": "2017-02-02T22:53:47Z",
    "author_association": "MEMBER",
    "body": "Excellent!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277153159",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277153159",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277153159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzE1MzE1OQ==",
    "user": {
      "login": "themrmax",
      "id": 8220288,
      "node_id": "MDQ6VXNlcjgyMjAyODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8220288?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/themrmax",
      "html_url": "https://github.com/themrmax",
      "followers_url": "https://api.github.com/users/themrmax/followers",
      "following_url": "https://api.github.com/users/themrmax/following{/other_user}",
      "gists_url": "https://api.github.com/users/themrmax/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/themrmax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/themrmax/subscriptions",
      "organizations_url": "https://api.github.com/users/themrmax/orgs",
      "repos_url": "https://api.github.com/users/themrmax/repos",
      "events_url": "https://api.github.com/users/themrmax/events{/privacy}",
      "received_events_url": "https://api.github.com/users/themrmax/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-03T03:06:26Z",
    "updated_at": "2017-02-03T05:38:08Z",
    "author_association": "NONE",
    "body": "@gnestor very nice! i've gotten basically the same thing working for containerized (i haven't done the headers, but i think i would need to do a similar trick as you) https://github.com/themrmax/jupyterlab_table/tree/clusterize\r\n\r\na big problem i can see with both of our solutions is that when data gets large (i.e. over a few thousand rows), it takes a very long time to load the component. as far as i can tell it's not a problem with the frameworks, the demo on https://clusterize.js.org/ instantly loads 500K rows if they're generated by javascript. is it a limitation of us loading the data into the browser as a single JSON payload, and is there a way we could work around this?\r\n\r\n**EDIT**: Just noticed the `inferSchema` function is very slow, i can get a pretty good speedup by just running this over the first few rows (10? 100?)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277373386",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277373386",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277373386,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzM3MzM4Ng==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-03T21:57:35Z",
    "updated_at": "2017-02-03T21:57:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@themrmax Yes. There is observable latency for 10,000+ cells for me. There is no latency when rendering as a pandas HTML table and this is partly because the pandas HTML is rendered _kernel-side_. A few thoughts:\r\n\r\n* I think the real solution is a _hybrid-approach_ between client-side and kernel-side rendering, where the kernel returns a maximum initial payload and the client can request additional _pages_ based on the scroll position/direction/momentum. This is pretty tricky. The react-virtualized interface looks like `function loadMoreRows({ startIndex: number, stopIndex: number }): Promise` and theoretically this callback would request a new range of rows from the kernel (e.g. `df[startIndex:stopIndex]`). The only way that I can imagine this working across kernels (and beyond pandas dataframes) is if `loadMoreRows` is defined by the user (or the display function) and provided to jupyterlab_table via JSON:\r\n\r\n```json\r\n{\r\n    \"resources\": [],\r\n    \"metadata\": {\r\n        \"startIndex\": 0,\r\n        \"stopIndex\": 1000,\r\n        \"loadMoreRows\": \"df[startIndex:stopIndex]\"\r\n    }\r\n}\r\n```\r\n\r\nAssuming that the extension can communicate with the kernel (which I know is possible but don't know how to implement), the extension could parse this `loadMoreRows` string and execute `df[1000:2000]` on the kernel and either return the rows to the `loadMoreRows` callback or asynchronously update the display using the new [`update_display` feature](https://github.com/nteract/nteract/blob/master/example-notebooks/display-updates.ipynb). This is pretty hacky... @rgbkrk Any thoughts about how to accomplish infinite scrolling across kernels?\r\n\r\n* I observed about a 10x performance improvement using react-virtualized vs. fixed-data-table, so there is probably a lot of potential to optimize the client-side rendering. @themrmax Like you said, the Clusterize.js demo appears to load 500k rows instantly, as does the react-virtualized demo. I did some initial profiling and I noticed there was a bottleneck at `inferSchema` which will [attempt to infer a schema if not provided in the payload](https://github.com/gnestor/jupyterlab_table/blob/master/component/index.js#L16-L20). I just optimized that by taking a sample of 10 rows vs. iterating through all of them. That just improved performance by about another order of magnitude (because 10,000x10 took about 8s before, and now 100,000x10 takes about the same👍 ). pandas [will soon support JSON Table](https://github.com/pandas-dev/pandas/pull/14904) in which case `inferSchema` will no longer be necessary for pandas Dataframes. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/277462750",
    "html_url": "https://github.com/jupyter/notebook/issues/2049#issuecomment-277462750",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/2049",
    "id": 277462750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzQ2Mjc1MA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-04T17:52:10Z",
    "updated_at": "2017-02-04T17:52:10Z",
    "author_association": "MEMBER",
    "body": "> Any thoughts about how to accomplish infinite [paging] [of tables] across kernels?\r\n\r\nI'd certainly like to see it.\r\n\r\nI'm hopeful that we can make some simplified mechanics with the `setIn` based models approach, coupled with the VDom stuff.",
    "performed_via_github_app": null
  }
]
