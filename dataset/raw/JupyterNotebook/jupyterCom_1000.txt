[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/176545230",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-176545230",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 176545230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjU0NTIzMA==",
    "user": {
      "login": "aggFTW",
      "id": 654204,
      "node_id": "MDQ6VXNlcjY1NDIwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/654204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aggFTW",
      "html_url": "https://github.com/aggFTW",
      "followers_url": "https://api.github.com/users/aggFTW/followers",
      "following_url": "https://api.github.com/users/aggFTW/following{/other_user}",
      "gists_url": "https://api.github.com/users/aggFTW/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aggFTW/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aggFTW/subscriptions",
      "organizations_url": "https://api.github.com/users/aggFTW/orgs",
      "repos_url": "https://api.github.com/users/aggFTW/repos",
      "events_url": "https://api.github.com/users/aggFTW/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aggFTW/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T02:57:37Z",
    "updated_at": "2016-01-29T02:57:37Z",
    "author_association": "NONE",
    "body": "cc @Carreau and @jdfreder\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/176633287",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-176633287",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 176633287,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjYzMzI4Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T08:08:04Z",
    "updated_at": "2016-01-29T08:08:04Z",
    "author_association": "MEMBER",
    "body": "A custom KernelManager could add an environment variable when a kernel is started, though the KernelManager doesn't have access to the notebook path. A SessionManager could pass that down, though it wouldn't be updated when the notebook is renamed, so a filename is probably not the best key to use.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/176875635",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-176875635",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 176875635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg3NTYzNQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T17:34:54Z",
    "updated_at": "2016-01-29T17:34:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can put a GUID in the notebook-level metadata.  I think you can do it without JS, at the web server level, on new or existing notebook load.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/176884935",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-176884935",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 176884935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg4NDkzNQ==",
    "user": {
      "login": "jdfreder",
      "id": 3292874,
      "node_id": "MDQ6VXNlcjMyOTI4NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3292874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdfreder",
      "html_url": "https://github.com/jdfreder",
      "followers_url": "https://api.github.com/users/jdfreder/followers",
      "following_url": "https://api.github.com/users/jdfreder/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdfreder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdfreder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdfreder/subscriptions",
      "organizations_url": "https://api.github.com/users/jdfreder/orgs",
      "repos_url": "https://api.github.com/users/jdfreder/repos",
      "events_url": "https://api.github.com/users/jdfreder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdfreder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T17:49:58Z",
    "updated_at": "2016-01-29T17:49:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "--- oh, this is issue #1000 ! :cake: :tada: \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/176886302",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-176886302",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 176886302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg4NjMwMg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T17:54:20Z",
    "updated_at": "2016-01-29T17:54:20Z",
    "author_association": "MEMBER",
    "body": ":-P\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/176887917",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-176887917",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 176887917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3Njg4NzkxNw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T17:59:22Z",
    "updated_at": "2016-01-29T17:59:22Z",
    "author_association": "MEMBER",
    "body": "Wouldn't a  custom `MappingKernelManager` that store the various kernel-models in a shared DB we enough ? (or I miss something about the notebook name).\n\nIt is highly unlikely that the notebook would be renamed during the swap of VMs.\n\nThere might need some extra logic for clean startup/exit/restart, but that **should** be able to resume connections.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188441210",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-188441210",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 188441210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODQ0MTIxMA==",
    "user": {
      "login": "msftristew",
      "id": 13972471,
      "node_id": "MDQ6VXNlcjEzOTcyNDcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/13972471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/msftristew",
      "html_url": "https://github.com/msftristew",
      "followers_url": "https://api.github.com/users/msftristew/followers",
      "following_url": "https://api.github.com/users/msftristew/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftristew/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/msftristew/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftristew/subscriptions",
      "organizations_url": "https://api.github.com/users/msftristew/orgs",
      "repos_url": "https://api.github.com/users/msftristew/repos",
      "events_url": "https://api.github.com/users/msftristew/events{/privacy}",
      "received_events_url": "https://api.github.com/users/msftristew/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T20:28:29Z",
    "updated_at": "2016-02-24T20:28:29Z",
    "author_association": "NONE",
    "body": "So, I've picked up this work where @aggFTW left off.  I think this is how we're thinking about doing this:\n1. Use a custom SessionManager that passes down the notebook name as an argument to the MappingKernelManager.  \n2. Use a custom KernelManager that communicates the notebook name to the new kernel process on startup (through an environment variable or some other method).  \n3. Our custom kernels will take the notebook name as a key and will update their metadata as appropriate in the way that @aggFTW described above.\n4. Use a custom ContentsManager to update the metadata necessary for resuming stale sessions when a method is renamed.\n\nItem (4) will certainly be an internal extension to Jupyter for us, but we were wondering whether items (1) and (2) would have any chance of being accepted upstream.  I understand that the kernel not knowing what's talking to it is part of the design, but it seems like it would be generally useful (not just for this scenario) if kernels could be made aware what the name of their notebook is either through an environment variable, a command-line argument, or a 0mq message.  Do you suppose there would be any interest in that PR?  \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188725907",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-188725907",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 188725907,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODcyNTkwNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-25T10:57:41Z",
    "updated_at": "2016-02-25T10:57:41Z",
    "author_association": "MEMBER",
    "body": "I think it is generally useful, and we should probably do it. An environment variable is the way to go, I think. The only disadvantage of that is that you cannot update the file location on rename after the kernel has started, but a zmq message updating the file doesn't seem like the right thing to do, to me.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/273311913",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-273311913",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 273311913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzMxMTkxMw==",
    "user": {
      "login": "olgabot",
      "id": 806256,
      "node_id": "MDQ6VXNlcjgwNjI1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/806256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/olgabot",
      "html_url": "https://github.com/olgabot",
      "followers_url": "https://api.github.com/users/olgabot/followers",
      "following_url": "https://api.github.com/users/olgabot/following{/other_user}",
      "gists_url": "https://api.github.com/users/olgabot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/olgabot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/olgabot/subscriptions",
      "organizations_url": "https://api.github.com/users/olgabot/orgs",
      "repos_url": "https://api.github.com/users/olgabot/repos",
      "events_url": "https://api.github.com/users/olgabot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/olgabot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T21:53:03Z",
    "updated_at": "2017-01-17T21:53:24Z",
    "author_association": "NONE",
    "body": "Was this ever resolved? I'm making output and figure folders based off of the name of the notebooks and this code works *in* the notebooks, but when I \r\n\r\n```python\r\nfrom IPython.core.display import Javascript\r\nfrom IPython.display import display\r\n\r\n\r\ndef get_notebook_name():\r\n    \"\"\"Returns the name of the current notebook as a string\r\n    \r\n    From From https://mail.scipy.org/pipermail/ipython-dev/2014-June/014096.html\r\n    \"\"\"\r\n    display(Javascript('IPython.notebook.kernel.execute(\"theNotebook = \" + \\\r\n    \"\\'\"+IPython.notebook.notebook_name+\"\\'\");'))\r\n    return theNotebook\r\n```\r\n\r\nBut when I move it into a `common.py` file so it can be accessed across all notebooks, I get a NameError:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/806256/22041524/117c04ce-dcbc-11e6-8b2d-439564fb2372.png)\r\n\r\nIs this because the `.py` file has no notebook? Is there a way to get the `.py` file to recognize the notebook it is being called from?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/273338986",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-273338986",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 273338986,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzMzODk4Ng==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T23:52:15Z",
    "updated_at": "2017-01-17T23:52:15Z",
    "author_association": "MEMBER",
    "body": "```\r\ndisplay(Javascript('IPython.notebook.kernel.execute(\"theNotebook = \" + \\\r\n\"\\'\"+IPython.notebook.notebook_name+\"\\'\");'))\r\n## Here are dragons. \r\nreturn theNotebook\r\n```\r\nHandwaving:\r\n\r\nThe display javascript will take some time to reach the browser, and it will take some time execute the JS and get back to the  kernel. \r\n\r\nDuring this time IPython have have to continue executing code, so try to \"return theNotebook\" which is undefined. So it raise. even if you could \"Wait for the JS to execute\" you could not set the name of the notebook before returning the function . \r\n\r\nDoes that make some sens ?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/273442338",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-273442338",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 273442338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzQ0MjMzOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-18T10:41:28Z",
    "updated_at": "2017-01-18T10:41:28Z",
    "author_association": "MEMBER",
    "body": "The JS sets the name in the main user namespace. When the function is moved into a module, it's looking in the module namespace, so it never sees that name. But that function is a hack, and I wouldn't rely on it in any case.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/297757867",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-297757867",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 297757867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Nzc1Nzg2Nw==",
    "user": {
      "login": "natbusa",
      "id": 634995,
      "node_id": "MDQ6VXNlcjYzNDk5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/634995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/natbusa",
      "html_url": "https://github.com/natbusa",
      "followers_url": "https://api.github.com/users/natbusa/followers",
      "following_url": "https://api.github.com/users/natbusa/following{/other_user}",
      "gists_url": "https://api.github.com/users/natbusa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/natbusa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/natbusa/subscriptions",
      "organizations_url": "https://api.github.com/users/natbusa/orgs",
      "repos_url": "https://api.github.com/users/natbusa/repos",
      "events_url": "https://api.github.com/users/natbusa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/natbusa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-27T15:58:03Z",
    "updated_at": "2017-04-27T15:58:03Z",
    "author_association": "NONE",
    "body": "ok, maybe this would sound silly, but would it be enough to add the ipynb filename in the metadata section of the notebook data structure when it's read? the field should not be stored in file but only updated once read in memory. - a sort of ephemeral metadata info",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/297855777",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-297855777",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 297855777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Nzg1NTc3Nw==",
    "user": {
      "login": "natbusa",
      "id": 634995,
      "node_id": "MDQ6VXNlcjYzNDk5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/634995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/natbusa",
      "html_url": "https://github.com/natbusa",
      "followers_url": "https://api.github.com/users/natbusa/followers",
      "following_url": "https://api.github.com/users/natbusa/following{/other_user}",
      "gists_url": "https://api.github.com/users/natbusa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/natbusa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/natbusa/subscriptions",
      "organizations_url": "https://api.github.com/users/natbusa/orgs",
      "repos_url": "https://api.github.com/users/natbusa/repos",
      "events_url": "https://api.github.com/users/natbusa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/natbusa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-27T22:23:49Z",
    "updated_at": "2017-04-27T22:23:49Z",
    "author_association": "NONE",
    "body": "I see it looks like the kernel is completely agnostic to the concept of file and it just processes cells data. I would say that the only options are indeed env variables or passing the filename during the creation of the kernel if any filename is available at that point.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/303123288",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-303123288",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 303123288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzEyMzI4OA==",
    "user": {
      "login": "jordansamuels",
      "id": 610909,
      "node_id": "MDQ6VXNlcjYxMDkwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/610909?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jordansamuels",
      "html_url": "https://github.com/jordansamuels",
      "followers_url": "https://api.github.com/users/jordansamuels/followers",
      "following_url": "https://api.github.com/users/jordansamuels/following{/other_user}",
      "gists_url": "https://api.github.com/users/jordansamuels/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jordansamuels/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jordansamuels/subscriptions",
      "organizations_url": "https://api.github.com/users/jordansamuels/orgs",
      "repos_url": "https://api.github.com/users/jordansamuels/repos",
      "events_url": "https://api.github.com/users/jordansamuels/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jordansamuels/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T14:51:17Z",
    "updated_at": "2017-05-22T14:51:17Z",
    "author_association": "NONE",
    "body": "I may be late to the party, but if we could somehow determine just the *port* of the notebook server, then getting the notebook path is easy by using the REST api.  The example below hardwires port 8080:\r\n\r\n    kernel_id = re.search('kernel-(.*).json', ipykernel.connect.get_connection_file()).group(1)\r\n    response = requests.get('http://127.0.0.1:{port}/api/sessions'.format(port=8080))\r\n    matching = [s for s in json.loads(response.text) if s['kernel']['id'] == kernel_id]\r\n    if matching:\r\n        return matching[0]['notebook']['path']\r\n\r\nBut I couldn't find any way to automatically determine the port, without using the not-so-safe/useful Javascript hacks.\r\n\r\nSo, can we get the port?\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/359875246",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-359875246",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 359875246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTg3NTI0Ng==",
    "user": {
      "login": "gcbeltramini",
      "id": 9801748,
      "node_id": "MDQ6VXNlcjk4MDE3NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9801748?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gcbeltramini",
      "html_url": "https://github.com/gcbeltramini",
      "followers_url": "https://api.github.com/users/gcbeltramini/followers",
      "following_url": "https://api.github.com/users/gcbeltramini/following{/other_user}",
      "gists_url": "https://api.github.com/users/gcbeltramini/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gcbeltramini/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gcbeltramini/subscriptions",
      "organizations_url": "https://api.github.com/users/gcbeltramini/orgs",
      "repos_url": "https://api.github.com/users/gcbeltramini/repos",
      "events_url": "https://api.github.com/users/gcbeltramini/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gcbeltramini/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-23T17:55:51Z",
    "updated_at": "2018-06-28T20:53:36Z",
    "author_association": "NONE",
    "body": "This seems to work:\r\n\r\n```python\r\nimport json\r\nimport os.path\r\nimport re\r\nimport ipykernel\r\nimport requests\r\n\r\n#try:  # Python 3\r\n#    from urllib.parse import urljoin\r\n#except ImportError:  # Python 2\r\n#    from urlparse import urljoin\r\n\r\n# Alternative that works for both Python 2 and 3:\r\nfrom requests.compat import urljoin\r\n\r\ntry:  # Python 3 (see Edit2 below for why this may not work in Python 2)\r\n    from notebook.notebookapp import list_running_servers\r\nexcept ImportError:  # Python 2\r\n    import warnings\r\n    from IPython.utils.shimmodule import ShimWarning\r\n    with warnings.catch_warnings():\r\n        warnings.simplefilter(\"ignore\", category=ShimWarning)\r\n        from IPython.html.notebookapp import list_running_servers\r\n\r\n\r\ndef get_notebook_name():\r\n    \"\"\"\r\n    Return the full path of the jupyter notebook.\r\n    \"\"\"\r\n    kernel_id = re.search('kernel-(.*).json',\r\n                          ipykernel.connect.get_connection_file()).group(1)\r\n    servers = list_running_servers()\r\n    for ss in servers:\r\n        response = requests.get(urljoin(ss['url'], 'api/sessions'),\r\n                                params={'token': ss.get('token', '')})\r\n        for nn in json.loads(response.text):\r\n            if nn['kernel']['id'] == kernel_id:\r\n                relative_path = nn['notebook']['path']\r\n                return os.path.join(ss['notebook_dir'], relative_path)\r\n```\r\n\r\nYou can put it inside a module, and import it in the jupyter notebook.\r\n\r\nEdit: Thanks to @thesneaker, I changed the way to get the token.\r\nEdit2: I tested in Python 2, but the Jupyter notebook couldn't import `from notebook.notebookapp import list_running_servers` when it was inside a module.\r\nEdit3: Added an alternative and an observation thanks to [this comment](https://github.com/jupyter/notebook/issues/1000#issuecomment-401121956).\r\n\r\nReferences:\r\n1. [Previous comment](https://github.com/jupyter/notebook/issues/1000#issuecomment-303123288)\r\n2. [this Stackoverflow answer](https://stackoverflow.com/a/41782256/7649076)\r\n3. [this comment](https://github.com/django-extensions/django-extensions/issues/720#issuecomment-135796373), especially [this commit](https://github.com/django-extensions/django-extensions/commit/9648b292614110852d6e233b91a78d328688c819)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/360497758",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-360497758",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 360497758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQ5Nzc1OA==",
    "user": {
      "login": "thesneaker",
      "id": 11278099,
      "node_id": "MDQ6VXNlcjExMjc4MDk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11278099?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thesneaker",
      "html_url": "https://github.com/thesneaker",
      "followers_url": "https://api.github.com/users/thesneaker/followers",
      "following_url": "https://api.github.com/users/thesneaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/thesneaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thesneaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thesneaker/subscriptions",
      "organizations_url": "https://api.github.com/users/thesneaker/orgs",
      "repos_url": "https://api.github.com/users/thesneaker/repos",
      "events_url": "https://api.github.com/users/thesneaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thesneaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T15:20:14Z",
    "updated_at": "2018-01-25T15:20:14Z",
    "author_association": "NONE",
    "body": "Thanks @gcbeltramini for this pure python solution! I'm running Jupyter 4.1.0 and had to take care of the missing `token` key. Other than that it's the best solution I've come across so far!\r\n\r\nI wouldn't mind if this functionality would find it's way into the `notebookapp` class and be the recommended way by the jupyter devs. Having easy access to the notebook name (and preferably the path) is essential to do reproducible measurements with jupyter notebooks.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/363611851",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-363611851",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 363611851,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzYxMTg1MQ==",
    "user": {
      "login": "vpillac",
      "id": 4607259,
      "node_id": "MDQ6VXNlcjQ2MDcyNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4607259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpillac",
      "html_url": "https://github.com/vpillac",
      "followers_url": "https://api.github.com/users/vpillac/followers",
      "following_url": "https://api.github.com/users/vpillac/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpillac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpillac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpillac/subscriptions",
      "organizations_url": "https://api.github.com/users/vpillac/orgs",
      "repos_url": "https://api.github.com/users/vpillac/repos",
      "events_url": "https://api.github.com/users/vpillac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpillac/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T00:18:49Z",
    "updated_at": "2018-02-07T00:18:49Z",
    "author_association": "NONE",
    "body": "Not quite sure why but the response was not always json for me, I fixed it by adding a `try` statement:\r\n```\r\n        try:\r\n            for nn in json.loads(response.text):\r\n                if nn['kernel']['id'] == kernel_id:\r\n                    relative_path = nn['notebook']['path']\r\n                    return os.path.join(ss['notebook_dir'], relative_path)\r\n        except:\r\n            pass\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/363612140",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-363612140",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 363612140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzYxMjE0MA==",
    "user": {
      "login": "vpillac",
      "id": 4607259,
      "node_id": "MDQ6VXNlcjQ2MDcyNTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4607259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vpillac",
      "html_url": "https://github.com/vpillac",
      "followers_url": "https://api.github.com/users/vpillac/followers",
      "following_url": "https://api.github.com/users/vpillac/following{/other_user}",
      "gists_url": "https://api.github.com/users/vpillac/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vpillac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vpillac/subscriptions",
      "organizations_url": "https://api.github.com/users/vpillac/orgs",
      "repos_url": "https://api.github.com/users/vpillac/repos",
      "events_url": "https://api.github.com/users/vpillac/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vpillac/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T00:20:34Z",
    "updated_at": "2018-02-07T00:20:34Z",
    "author_association": "NONE",
    "body": "Also another useful method:\r\n```\r\ndef save_notebook_to_html():\r\n    nb_name = get_notebook_name()\r\n    s = os.system('jupyter nbconvert --to html {notebook}'.format(notebook=nb_name))\r\n    return s == 0\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/401121956",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-401121956",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 401121956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTEyMTk1Ng==",
    "user": {
      "login": "jakirkham",
      "id": 3019665,
      "node_id": "MDQ6VXNlcjMwMTk2NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakirkham",
      "html_url": "https://github.com/jakirkham",
      "followers_url": "https://api.github.com/users/jakirkham/followers",
      "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
      "organizations_url": "https://api.github.com/users/jakirkham/orgs",
      "repos_url": "https://api.github.com/users/jakirkham/repos",
      "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakirkham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-28T18:00:49Z",
    "updated_at": "2018-06-28T18:00:49Z",
    "author_association": "MEMBER",
    "body": "This code...\r\n\r\n```python\r\n\r\ntry:  # Python 3\r\n    from urllib.parse import urljoin\r\nexcept ImportError:  # Python 2\r\n    from urlparse import urljoin\r\n\r\ntry:  # Python 3\r\n    from notebook.notebookapp import list_running_servers\r\nexcept ImportError:  # Python 2\r\n    import warnings\r\n    from IPython.utils.shimmodule import ShimWarning\r\n    with warnings.catch_warnings():\r\n        warnings.simplefilter(\"ignore\", category=ShimWarning)\r\n        from IPython.html.notebookapp import list_running_servers\r\n```\r\n\r\n...can be replaced with this code and still work on Python 2/3.\r\n\r\n```python\r\nfrom requests.compat import urljoin\r\n\r\nfrom notebook.notebookapp import list_running_servers\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/410504588",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-410504588",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 410504588,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDUwNDU4OA==",
    "user": {
      "login": "dclong",
      "id": 824507,
      "node_id": "MDQ6VXNlcjgyNDUwNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/824507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dclong",
      "html_url": "https://github.com/dclong",
      "followers_url": "https://api.github.com/users/dclong/followers",
      "following_url": "https://api.github.com/users/dclong/following{/other_user}",
      "gists_url": "https://api.github.com/users/dclong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dclong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dclong/subscriptions",
      "organizations_url": "https://api.github.com/users/dclong/orgs",
      "repos_url": "https://api.github.com/users/dclong/repos",
      "events_url": "https://api.github.com/users/dclong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dclong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-05T08:30:03Z",
    "updated_at": "2018-08-05T08:30:03Z",
    "author_association": "NONE",
    "body": "The code doesn't work for me in JupyterHub. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/502889126",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-502889126",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 502889126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjg4OTEyNg==",
    "user": {
      "login": "convoliution",
      "id": 7754936,
      "node_id": "MDQ6VXNlcjc3NTQ5MzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7754936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/convoliution",
      "html_url": "https://github.com/convoliution",
      "followers_url": "https://api.github.com/users/convoliution/followers",
      "following_url": "https://api.github.com/users/convoliution/following{/other_user}",
      "gists_url": "https://api.github.com/users/convoliution/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/convoliution/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/convoliution/subscriptions",
      "organizations_url": "https://api.github.com/users/convoliution/orgs",
      "repos_url": "https://api.github.com/users/convoliution/repos",
      "events_url": "https://api.github.com/users/convoliution/events{/privacy}",
      "received_events_url": "https://api.github.com/users/convoliution/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-17T23:37:18Z",
    "updated_at": "2019-06-17T23:39:14Z",
    "author_association": "NONE",
    "body": "Note that if you do not have the right token to query the server on the REST call,\r\n```python\r\njson.loads(response.text)\r\n```\r\nmay return `{\"message\": \"Forbidden\", \"reason\": null}` instead of a list of sessions, resulting in\r\n```python\r\nif nn['kernel']['id'] == kernel_id:\r\n```\r\nraising `TypeError: string indices must be integers`",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505072341",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-505072341",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 505072341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTA3MjM0MQ==",
    "user": {
      "login": "DBCerigo",
      "id": 8318425,
      "node_id": "MDQ6VXNlcjgzMTg0MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8318425?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DBCerigo",
      "html_url": "https://github.com/DBCerigo",
      "followers_url": "https://api.github.com/users/DBCerigo/followers",
      "following_url": "https://api.github.com/users/DBCerigo/following{/other_user}",
      "gists_url": "https://api.github.com/users/DBCerigo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DBCerigo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DBCerigo/subscriptions",
      "organizations_url": "https://api.github.com/users/DBCerigo/orgs",
      "repos_url": "https://api.github.com/users/DBCerigo/repos",
      "events_url": "https://api.github.com/users/DBCerigo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DBCerigo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-24T15:58:31Z",
    "updated_at": "2019-06-24T15:58:31Z",
    "author_association": "NONE",
    "body": "Note that [the solution](https://github.com/jupyter/notebook/issues/1000#issuecomment-359875246) above won't work when executing a nb via `jupyter nbconvert --to notebook --execute mynotebook.ipynb` or via `from nbconvert.preprocessors import ExecutePreprocessor` from within a python script, as (of course?!) there's no server running to query.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/515468728",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-515468728",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 515468728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTQ2ODcyOA==",
    "user": {
      "login": "elgalu",
      "id": 111569,
      "node_id": "MDQ6VXNlcjExMTU2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elgalu",
      "html_url": "https://github.com/elgalu",
      "followers_url": "https://api.github.com/users/elgalu/followers",
      "following_url": "https://api.github.com/users/elgalu/following{/other_user}",
      "gists_url": "https://api.github.com/users/elgalu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elgalu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elgalu/subscriptions",
      "organizations_url": "https://api.github.com/users/elgalu/orgs",
      "repos_url": "https://api.github.com/users/elgalu/repos",
      "events_url": "https://api.github.com/users/elgalu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elgalu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-26T14:09:24Z",
    "updated_at": "2019-07-26T14:09:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "How to achieve this with the latest versions?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/563028465",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-563028465",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 563028465,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzAyODQ2NQ==",
    "user": {
      "login": "billallen256",
      "id": 1530855,
      "node_id": "MDQ6VXNlcjE1MzA4NTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/billallen256",
      "html_url": "https://github.com/billallen256",
      "followers_url": "https://api.github.com/users/billallen256/followers",
      "following_url": "https://api.github.com/users/billallen256/following{/other_user}",
      "gists_url": "https://api.github.com/users/billallen256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/billallen256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/billallen256/subscriptions",
      "organizations_url": "https://api.github.com/users/billallen256/orgs",
      "repos_url": "https://api.github.com/users/billallen256/repos",
      "events_url": "https://api.github.com/users/billallen256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/billallen256/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-09T01:49:57Z",
    "updated_at": "2019-12-09T01:49:57Z",
    "author_association": "NONE",
    "body": "Could the [`ipyparams`](https://pypi.org/project/ipyparams/) package work for this?  It can return the notebook file name as well as any query string parameters passed in the URL.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/566966910",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-566966910",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 566966910,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njk2NjkxMA==",
    "user": {
      "login": "elgalu",
      "id": 111569,
      "node_id": "MDQ6VXNlcjExMTU2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/111569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elgalu",
      "html_url": "https://github.com/elgalu",
      "followers_url": "https://api.github.com/users/elgalu/followers",
      "following_url": "https://api.github.com/users/elgalu/following{/other_user}",
      "gists_url": "https://api.github.com/users/elgalu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elgalu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elgalu/subscriptions",
      "organizations_url": "https://api.github.com/users/elgalu/orgs",
      "repos_url": "https://api.github.com/users/elgalu/repos",
      "events_url": "https://api.github.com/users/elgalu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elgalu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T10:13:00Z",
    "updated_at": "2019-12-18T10:13:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's seems to be unreliable @gershwinlabs , sometimes `ipyparams.raw_url` comes back as an empty string, seems to be related to the reliance on JavaScript, some sort of race condition.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/567230754",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-567230754",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 567230754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzIzMDc1NA==",
    "user": {
      "login": "billallen256",
      "id": 1530855,
      "node_id": "MDQ6VXNlcjE1MzA4NTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/billallen256",
      "html_url": "https://github.com/billallen256",
      "followers_url": "https://api.github.com/users/billallen256/followers",
      "following_url": "https://api.github.com/users/billallen256/following{/other_user}",
      "gists_url": "https://api.github.com/users/billallen256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/billallen256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/billallen256/subscriptions",
      "organizations_url": "https://api.github.com/users/billallen256/orgs",
      "repos_url": "https://api.github.com/users/billallen256/repos",
      "events_url": "https://api.github.com/users/billallen256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/billallen256/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-18T21:57:45Z",
    "updated_at": "2019-12-18T21:57:45Z",
    "author_association": "NONE",
    "body": "@elgalu I can't seem to reproduce the problem.  Can you tell me more about your environment and notebook?  I don't think it's possible to get away from the reliance on Javascript given the deliberate separation between the front and back ends.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/601070622",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-601070622",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 601070622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTA3MDYyMg==",
    "user": {
      "login": "thorade",
      "id": 314571,
      "node_id": "MDQ6VXNlcjMxNDU3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/314571?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thorade",
      "html_url": "https://github.com/thorade",
      "followers_url": "https://api.github.com/users/thorade/followers",
      "following_url": "https://api.github.com/users/thorade/following{/other_user}",
      "gists_url": "https://api.github.com/users/thorade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thorade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thorade/subscriptions",
      "organizations_url": "https://api.github.com/users/thorade/orgs",
      "repos_url": "https://api.github.com/users/thorade/repos",
      "events_url": "https://api.github.com/users/thorade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thorade/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-19T09:14:18Z",
    "updated_at": "2020-03-19T09:14:18Z",
    "author_association": "NONE",
    "body": "Similar question asked here:\r\nhttps://stackoverflow.com/questions/12544056/how-do-i-get-the-current-ipython-jupyter-notebook-name",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/601257608",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-601257608",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 601257608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTI1NzYwOA==",
    "user": {
      "login": "billallen256",
      "id": 1530855,
      "node_id": "MDQ6VXNlcjE1MzA4NTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530855?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/billallen256",
      "html_url": "https://github.com/billallen256",
      "followers_url": "https://api.github.com/users/billallen256/followers",
      "following_url": "https://api.github.com/users/billallen256/following{/other_user}",
      "gists_url": "https://api.github.com/users/billallen256/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/billallen256/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/billallen256/subscriptions",
      "organizations_url": "https://api.github.com/users/billallen256/orgs",
      "repos_url": "https://api.github.com/users/billallen256/repos",
      "events_url": "https://api.github.com/users/billallen256/events{/privacy}",
      "received_events_url": "https://api.github.com/users/billallen256/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-19T15:52:46Z",
    "updated_at": "2020-03-19T15:52:46Z",
    "author_association": "NONE",
    "body": "Thanks @thorade.  I posted an answer with ipyparams.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/602284798",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-602284798",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 602284798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjI4NDc5OA==",
    "user": {
      "login": "jakirkham",
      "id": 3019665,
      "node_id": "MDQ6VXNlcjMwMTk2NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3019665?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakirkham",
      "html_url": "https://github.com/jakirkham",
      "followers_url": "https://api.github.com/users/jakirkham/followers",
      "following_url": "https://api.github.com/users/jakirkham/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions",
      "organizations_url": "https://api.github.com/users/jakirkham/orgs",
      "repos_url": "https://api.github.com/users/jakirkham/repos",
      "events_url": "https://api.github.com/users/jakirkham/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakirkham/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-22T22:14:07Z",
    "updated_at": "2020-03-22T22:14:07Z",
    "author_association": "MEMBER",
    "body": "Maybe issues with `ipyparams` can be raised against that repo? 😉",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/614647374",
    "html_url": "https://github.com/jupyter/notebook/issues/1000#issuecomment-614647374",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1000",
    "id": 614647374,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDY0NzM3NA==",
    "user": {
      "login": "Ismar11",
      "id": 8707051,
      "node_id": "MDQ6VXNlcjg3MDcwNTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8707051?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ismar11",
      "html_url": "https://github.com/Ismar11",
      "followers_url": "https://api.github.com/users/Ismar11/followers",
      "following_url": "https://api.github.com/users/Ismar11/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ismar11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ismar11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ismar11/subscriptions",
      "organizations_url": "https://api.github.com/users/Ismar11/orgs",
      "repos_url": "https://api.github.com/users/Ismar11/repos",
      "events_url": "https://api.github.com/users/Ismar11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ismar11/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T13:18:58Z",
    "updated_at": "2020-04-16T13:18:58Z",
    "author_association": "NONE",
    "body": "Does anyone know if there is a command line argument under `jupyter notebook list` or a similar feature to get notebook names running in each server from console directly?\r\n\r\nIf it doesn't exist, it's not planned or the question is out of the scope of this issue, I could open a new one and describe in detail with examples/ideas. Let me know :)",
    "performed_via_github_app": null
  }
]
