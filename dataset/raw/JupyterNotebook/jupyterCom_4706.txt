[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/504515836",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-504515836",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 504515836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDUxNTgzNg==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-21T17:55:37Z",
    "updated_at": "2019-06-21T17:55:37Z",
    "author_association": "MEMBER",
    "body": "I think this issue is related https://github.com/jupyter/notebook/issues/4575.  Did you see how these issues fair in Lab?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/504618880",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-504618880",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 504618880,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDYxODg4MA==",
    "user": {
      "login": "esevan",
      "id": 8223765,
      "node_id": "MDQ6VXNlcjgyMjM3NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8223765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esevan",
      "html_url": "https://github.com/esevan",
      "followers_url": "https://api.github.com/users/esevan/followers",
      "following_url": "https://api.github.com/users/esevan/following{/other_user}",
      "gists_url": "https://api.github.com/users/esevan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esevan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esevan/subscriptions",
      "organizations_url": "https://api.github.com/users/esevan/orgs",
      "repos_url": "https://api.github.com/users/esevan/repos",
      "events_url": "https://api.github.com/users/esevan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esevan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-22T02:19:37Z",
    "updated_at": "2019-06-22T02:23:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kevin-bates Thanks for response. Actually I'm using Lab. For more detail, I opened the directory which has 10,000 images. In that case everything hang even terminal input not working. I can see request timeout in the end.\r\n\r\nI'll add my env detail soon. Sorry for lack of information.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505459191",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-505459191",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 505459191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTQ1OTE5MQ==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-25T14:02:34Z",
    "updated_at": "2019-06-25T14:02:34Z",
    "author_association": "MEMBER",
    "body": "I think you might get better traction opening this issue in https://github.com/jupyterlab/jupyterlab since that's where the front-end focus is these days.  I suspect \"files\" are treated differently than directories (which is where I saw the difference in Lab) relative to rendering.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505814389",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-505814389",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 505814389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTgxNDM4OQ==",
    "user": {
      "login": "esevan",
      "id": 8223765,
      "node_id": "MDQ6VXNlcjgyMjM3NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8223765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esevan",
      "html_url": "https://github.com/esevan",
      "followers_url": "https://api.github.com/users/esevan/followers",
      "following_url": "https://api.github.com/users/esevan/following{/other_user}",
      "gists_url": "https://api.github.com/users/esevan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esevan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esevan/subscriptions",
      "organizations_url": "https://api.github.com/users/esevan/orgs",
      "repos_url": "https://api.github.com/users/esevan/repos",
      "events_url": "https://api.github.com/users/esevan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esevan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T10:18:34Z",
    "updated_at": "2019-06-26T10:45:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kevin-bates Well.. I decided to post here because I could check this happens in classic notebook (/tree) as  well as jupyter lab (/lab).\r\n\r\nThe following shows it takes 7.40 seconds to get response from the notebook server for the request of 25,089 dentries under `trainB`.\r\n```\r\n$ ls datasets/horse2zebra/trainB | wc -c\r\n25089\r\n```\r\n![image](https://user-images.githubusercontent.com/8223765/60172090-eba36f00-9846-11e9-8f59-6634e1683e30.png)\r\n\r\nEDIT)\r\nI'm guessing server stocked in following code.\r\nhttps://github.com/jupyter/notebook/blob/6d15e9cdabad5e33a82c6727079bbc99e565564a/notebook/services/contents/filemanager.py#L310-L343\r\n\r\nThe sample data used for description is from https://github.com/junyanz/CycleGAN",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505896916",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-505896916",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 505896916,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTg5NjkxNg==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T14:20:29Z",
    "updated_at": "2019-06-26T14:20:29Z",
    "author_association": "MEMBER",
    "body": "Thanks for the information.  So it sounds like you see roughly the same behavior between classic and lab with files (unlike I saw with directories).  I figured the delay was in the client-side rendering, but you're showing essentially server-side code, which implies thousands of directories should have resulted in the same behavior - i.e., delay seen in both Notebook and Lab (contrary to what I found).\r\n\r\n((That repo you link is interesting.  The sample for the failure case is particularly entertaining.))",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505955158",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-505955158",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 505955158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTk1NTE1OA==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T16:45:08Z",
    "updated_at": "2019-06-26T16:45:08Z",
    "author_association": "MEMBER",
    "body": "Hmm, I still see the same behaviors with files.  I touched 10,000 files in my notebook directory (`for i in {1..10000}; do touch zzz_${i}; done`). Then ran notebook (with debug enabled).\r\n\r\nWith Notebook \"classic\", I see the contents api completes in just over 1 second, but the rendering (not sure if that's the approrpriate use of the term here, not a front-end dev) on the order of 48 seconds as I attempt to scroll.  This scrolling is also accompanied by \"Page Unresponsive\" dialogs (using Chrome).\r\n```\r\n[D 08:55:48.309 NotebookApp] 200 GET /api/sessions?_=1561563455783 (::1) 1.09ms\r\n[D 08:55:48.312 NotebookApp] 200 GET /api/terminals?_=1561563455784 (::1) 1.11ms\r\n[D 08:55:49.608 NotebookApp] 200 GET /api/contents?type=directory&_=1561563455785 (::1) 1115.29ms\r\n[D 08:56:36.954 NotebookApp] 200 GET /api/sessions?_=1561563455786 (::1) 0.90ms\r\n[D 08:56:36.955 NotebookApp] 200 GET /api/terminals?_=1561563455787 (::1) 0.71ms\r\n[D 08:56:38.371 NotebookApp] 200 GET /api/contents?type=directory&_=1561563455788 (::1) 1126.69ms\r\n[D 08:57:30.000 NotebookApp] 200 GET /api/sessions?_=1561563455789 (::1) 0.94ms\r\n[D 08:57:30.003 NotebookApp] 200 GET /api/terminals?_=1561563455790 (::1) 1.16ms\r\n[D 08:57:31.326 NotebookApp] 200 GET /api/contents?type=directory&_=1561563455791 (::1) 1130.55ms\r\n```\r\n\r\nSwitching the url to Lab, I see the same contents api taking just over 1 second, but the scrolling appears to be fine, with gaps between contents calls taking on the order of 8 seconds.  However, I see no delay in the UI, so I suspect this \"retrieval & rendering work\" is happening in the background.\r\n```\r\n[D 08:36:54.697 NotebookApp] 200 GET /api/sessions?1561563414694 (::1) 1.13ms\r\n[D 08:36:54.698 NotebookApp] 200 GET /api/terminals?1561563414695 (::1) 0.85ms\r\n[D 08:36:56.337 NotebookApp] 200 GET /api/contents/?content=1&1561563415174 (::1) 1160.75ms\r\n[D 08:37:04.696 NotebookApp] 200 GET /api/sessions?1561563424693 (::1) 1.07ms\r\n[D 08:37:04.698 NotebookApp] 200 GET /api/terminals?1561563424694 (::1) 0.90ms\r\n[D 08:37:06.371 NotebookApp] 200 GET /api/contents/?content=1&1561563425175 (::1) 1193.78ms\r\n[D 08:37:14.696 NotebookApp] 200 GET /api/sessions?1561563434693 (::1) 1.08ms\r\n[D 08:37:14.698 NotebookApp] 200 GET /api/terminals?1561563434694 (::1) 0.81ms\r\n[D 08:37:16.374 NotebookApp] 200 GET /api/contents/?content=1&1561563435179 (::1) 1192.88ms\r\n```\r\n\r\nNot sure why the contents api is occuring during scrolling given the contents service doesn't appear to have paging.  This might just be how the front-end is written in order to deal with updates.  I suspect there's a general assumption that notebook directories are sparsely populated - which is reasonable IMO.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/506150439",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-506150439",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 506150439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjE1MDQzOQ==",
    "user": {
      "login": "esevan",
      "id": 8223765,
      "node_id": "MDQ6VXNlcjgyMjM3NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8223765?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esevan",
      "html_url": "https://github.com/esevan",
      "followers_url": "https://api.github.com/users/esevan/followers",
      "following_url": "https://api.github.com/users/esevan/following{/other_user}",
      "gists_url": "https://api.github.com/users/esevan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esevan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esevan/subscriptions",
      "organizations_url": "https://api.github.com/users/esevan/orgs",
      "repos_url": "https://api.github.com/users/esevan/repos",
      "events_url": "https://api.github.com/users/esevan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esevan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-27T04:19:11Z",
    "updated_at": "2019-06-27T04:22:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Not sure why the contents api is occuring during scrolling given the contents service doesn't appear to have paging.\r\n\r\nI suspect this is due to periodic refreshing behavior of directory change in Jupyter Lab because contents API does not return the path under the directory incrementally (referring to the code I attached above).\r\n\r\nAs for the test result, my environment magnifies the problem since it resides in remote server and allocated resource to the server is quite small (CPU 2, Memory 4Gi).\r\n\r\nSo I tested in local, result is similar with @kevin-bates reported.\r\nAfter touching 10,000 files by `for i in {1..10000}; do touch zzz_${i}; done`\r\nActually I can see the result shows RTT of the contents request is quite big and suspect it's linearly increasing.\r\n```\r\n[D 12:57:27.835 LabApp] 200 GET /api/contents/contents_test/10000?content=1&1561607589692 (10.113.66.26) 1233.79ms\r\n```\r\n\r\nSo I increased the number of files to 10x more than above by `for i in {1..100000}; do touch zzz_${i}; done`\r\n```\r\n[D 13:05:59.067 LabApp] 200 GET /api/contents/contents_test/100000?content=1&1561608090756 (10.113.66.26) 11399.31ms\r\n```\r\nI can check contents api almost takes 10x more time to get response.\r\n\r\nHere I could find the problem I think.\r\n1. Listing directory in server side takes long time proportional to the number of files the directory has.\r\n-> This can be a big problem, I think notebook contents api needs to support incremental contents API and responsive UI or pagination should be developed in front end side.\r\n\r\n2. Jupyter Lab hangs while server handles the request. So another request to the server cannot be responded. \r\n-> I'm not sure if this is an issue due to the server side logic, but suspect due to both side (front and back)\r\n  -> I could check the browser cannot send subsequent request while the server handles the request.\r\n     : Maybe HOL blocking issue happens.\r\n  -> The coroutine seems blocked due to following code is not an async code. https://github.com/jupyter/notebook/blob/6d15e9cdabad5e33a82c6727079bbc99e565564a/notebook/services/contents/filemanager.py#L310-L343\r\n\r\n3. Cannot render 100,000 files in the browser, though server managed to respond.\r\n-> I believe this is highly due to frontend problem. Should request incrementally and provide better UX.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/645214551",
    "html_url": "https://github.com/jupyter/notebook/issues/4706#issuecomment-645214551",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4706",
    "id": 645214551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTIxNDU1MQ==",
    "user": {
      "login": "miraculixx",
      "id": 859611,
      "node_id": "MDQ6VXNlcjg1OTYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/859611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miraculixx",
      "html_url": "https://github.com/miraculixx",
      "followers_url": "https://api.github.com/users/miraculixx/followers",
      "following_url": "https://api.github.com/users/miraculixx/following{/other_user}",
      "gists_url": "https://api.github.com/users/miraculixx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miraculixx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miraculixx/subscriptions",
      "organizations_url": "https://api.github.com/users/miraculixx/orgs",
      "repos_url": "https://api.github.com/users/miraculixx/repos",
      "events_url": "https://api.github.com/users/miraculixx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miraculixx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-17T07:51:57Z",
    "updated_at": "2020-06-17T08:00:57Z",
    "author_association": "NONE",
    "body": "@esevan Great analysis. I am experiencing the same issue (in particular, JupyterLab hangs intermittently). Here are a few more insights from my POV.\r\n\r\n> I believe this is highly due to frontend problem.\r\n\r\nIn my case the key problem is that JupyterLab seems to issue a new call to the `/api/contents` API before and after (?) each cell execution, with the `?content=1` flag set. This in turn issues a call to the `FileContentsManager.get(..., content=True)`, thus requesting the actual file contents. Note we have subclassed FileContentsManager to support storing notebooks in a database, which aggravates the problem -- already with 100 or so notebooks this can slow down the process to the point where the api call can take 5-10 seconds to complete. In conclusion, its not really a UI issue, though it is caused by the way the UI requests the contents listing.\r\n\r\n> -> I'm not sure if this is an issue due to the server side logic, but suspect due to both side\r\n\r\nThe server side logic seems ok (except that it is blocking, not sure the ContentsManager api supports async). However it is not quite clear to me why JupyterLab requests the file contents when all it really does is to refresh the directory listing. In particular, JupyterLab - like the previous Jupyter server file listing, i.e. /tree - issues a specific get request to get the actual contents once the file/notebook is opened.  \r\n\r\nI see several possible approaches to improve the situation:\r\n\r\n1. Return some dummy contents on directory requests which would speed up the process.  \r\n2. Change JupyterLab to get directory listings with `?content=0`\r\n3. Cache the actual contents for some time in the server \r\n\r\nNot sure if option 1 interferes with the JupyterLab UI logic (it may use the actual contents to display icons or other information).\r\n\r\nFrom my perspective option 2 would the best. We should avoid option 3 as it is bound to introduce consistency issues.\r\n\r\nCurrently I don't have the capacity to dig further or open an issue in the JupyterLab tracker, any support would be appreciated.\r\n\r\n",
    "performed_via_github_app": null
  }
]
