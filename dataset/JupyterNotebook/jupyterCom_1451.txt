[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/219160359",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-219160359",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 219160359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTE2MDM1OQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-13T21:11:58Z",
    "updated_at": "2016-05-13T21:11:58Z",
    "author_association": "MEMBER",
    "body": "You can probably create an extension that add a list of \"template\" cells, that should not be too hard to do. I'll mark as sprint friendly, but it will likely not be in the core.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/219219259",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-219219259",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 219219259,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTIxOTI1OQ==",
    "user": {
      "login": "Paul-Yuchao-Dong",
      "id": 7532271,
      "node_id": "MDQ6VXNlcjc1MzIyNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7532271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Paul-Yuchao-Dong",
      "html_url": "https://github.com/Paul-Yuchao-Dong",
      "followers_url": "https://api.github.com/users/Paul-Yuchao-Dong/followers",
      "following_url": "https://api.github.com/users/Paul-Yuchao-Dong/following{/other_user}",
      "gists_url": "https://api.github.com/users/Paul-Yuchao-Dong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Paul-Yuchao-Dong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Paul-Yuchao-Dong/subscriptions",
      "organizations_url": "https://api.github.com/users/Paul-Yuchao-Dong/orgs",
      "repos_url": "https://api.github.com/users/Paul-Yuchao-Dong/repos",
      "events_url": "https://api.github.com/users/Paul-Yuchao-Dong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Paul-Yuchao-Dong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-14T13:02:19Z",
    "updated_at": "2016-05-16T06:50:27Z",
    "author_association": "NONE",
    "body": "Many thanks @Carreau for pointing the way. I hacked together a script to implement the utility. Based on community [[book]()](https://carreau.gitbooks.io/jupyter-book/content/Jsextensions.html), I made a script under the C:\\Users\\xxx.xxx\\AppData\\Roaming\\jupyter\\nbextensions\\ in a subfolder named main.js:\n\n```\ndefine(function(){\n  return {\n    load_ipython_extension: function(){\n        Jupyter.notebook.insert_cell_above('code', 0).set_text('import cufflinks as cf\\n')\n    }\n  };\n})\n```\n\nand config jupyter to load it when it starts. But how can I tell if the notebook loaded is an existing or new one, ideally the script should only insert cell if it is a new notebook. If possible, could this be something that is easily achieved or not possible? just point me to the direction of the documentation, I'm happy to code more. Thanks!\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/221013855",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-221013855",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 221013855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTAxMzg1NQ==",
    "user": {
      "login": "demianw",
      "id": 272705,
      "node_id": "MDQ6VXNlcjI3MjcwNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/272705?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/demianw",
      "html_url": "https://github.com/demianw",
      "followers_url": "https://api.github.com/users/demianw/followers",
      "following_url": "https://api.github.com/users/demianw/following{/other_user}",
      "gists_url": "https://api.github.com/users/demianw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/demianw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/demianw/subscriptions",
      "organizations_url": "https://api.github.com/users/demianw/orgs",
      "repos_url": "https://api.github.com/users/demianw/repos",
      "events_url": "https://api.github.com/users/demianw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/demianw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T15:42:04Z",
    "updated_at": "2016-05-23T15:42:04Z",
    "author_association": "NONE",
    "body": "This is a good idea! Any progress on this @Paul-Yuchao-Dong ?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/221019826",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-221019826",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 221019826,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTAxOTgyNg==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T16:10:29Z",
    "updated_at": "2016-05-23T16:10:29Z",
    "author_association": "MEMBER",
    "body": "> and config jupyter to load it when it starts. But how can I tell if the notebook loaded is an existing or new one, ideally the script should only insert cell if it is a new notebook. If possible, could this be something that is easily achieved or not possible? just point me to the direction of the documentation, I'm happy to code more. Thanks!\n\nSorry missed that. \n\nYou can probably look at the number of cells. There is no way to differentiate otherwise. \nsomething like : \n\n```\nif (Jupyter.notebook.get_cells().lenght==1 && Jupyter.noteboko.get_cell(0).editor.text === '' ){\n   //do your thing\n}\n```\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/221144043",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-221144043",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 221144043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTE0NDA0Mw==",
    "user": {
      "login": "Paul-Yuchao-Dong",
      "id": 7532271,
      "node_id": "MDQ6VXNlcjc1MzIyNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7532271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Paul-Yuchao-Dong",
      "html_url": "https://github.com/Paul-Yuchao-Dong",
      "followers_url": "https://api.github.com/users/Paul-Yuchao-Dong/followers",
      "following_url": "https://api.github.com/users/Paul-Yuchao-Dong/following{/other_user}",
      "gists_url": "https://api.github.com/users/Paul-Yuchao-Dong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Paul-Yuchao-Dong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Paul-Yuchao-Dong/subscriptions",
      "organizations_url": "https://api.github.com/users/Paul-Yuchao-Dong/orgs",
      "repos_url": "https://api.github.com/users/Paul-Yuchao-Dong/repos",
      "events_url": "https://api.github.com/users/Paul-Yuchao-Dong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Paul-Yuchao-Dong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-24T01:39:58Z",
    "updated_at": "2016-05-24T01:39:58Z",
    "author_association": "NONE",
    "body": "@Carreau No worries, thanks for pointing out the way. I've read some of the helpful documentation and realized that this part of the API probably would be changed anyway.\n\nhere's my revised script, I know it's monstrous, but I couldn't figure out how to pass the python code in a more elegant way, so here it is, it does the importing as well as a bit of number formatting:\n\n```\n/*\nhttps://jupyter-notebook.readthedocs.io/en/latest/extending/frontend_extensions.html\n*/\n\ndefine([\n    'base/js/namespace'\n], function(\n    Jupyter\n) {\n    function load_ipython_extension() {\n      if (Jupyter.notebook.get_cells().length===1){\n   //do your thing\n        Jupyter.notebook.insert_cell_above('code', 0).set_text(\"from __future__ import division, print_function\\nimport numpy as np\\nimport pandas as pd\\nimport matplotlib.pyplot as plt\\nimport matplotlib as mpl\\nimport seaborn as sns\\nimport re\\nfrom calendar import monthrange\\nfrom pandas_datareader import data as web\\nfrom pandas.tseries.offsets import DateOffset, Second, Minute, Hour, Day\\n\\nimport xlwings as xw\\nfrom xlwings import Workbook, Range, Sheet\\n\\nimport plotly.graph_objs as pgo\\nfrom plotly.offline import plot, init_notebook_mode, iplot, iplot_mpl\\nimport pdb\\nimport cufflinks as cf\\n\\npd.options.display.max_rows = 10\\npd.set_option('max_columns', 50)\\nsns.set(style='ticks', context='talk')\");\n        Jupyter.notebook.insert_cell_above('code', 1).set_text(\"import IPython\\nthousand_c = lambda x: '{:,}'.format(x)\\nthousands = lambda arg, p, cycle: p.text('{:,}'.format(arg))\\nnp.set_printoptions(formatter={'float_kind': thousand_c, 'int_kind': thousand_c})\\nclass IntFormatter(pd.core.format.GenericArrayFormatter):\\n    pd.set_option('display.float_format', thousand_c)\\n    def _format_strings(self):\\n        formatter = self.formatter or thousand_c\\n        fmt_values = [formatter(x) for x in self.values]\\n        return fmt_values\\npd.core.format.IntArrayFormatter = IntFormatter\\nfrm = get_ipython().display_formatter.formatters['text/plain']\\nfrm.for_type(int, thousands)\\nfrm.for_type(float, thousands);\");\n      }\n    }\n    return {\n        load_ipython_extension: load_ipython_extension\n    };\n});\n```\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/222373822",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-222373822",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 222373822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjM3MzgyMg==",
    "user": {
      "login": "jcb91",
      "id": 5630710,
      "node_id": "MDQ6VXNlcjU2MzA3MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5630710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcb91",
      "html_url": "https://github.com/jcb91",
      "followers_url": "https://api.github.com/users/jcb91/followers",
      "following_url": "https://api.github.com/users/jcb91/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcb91/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcb91/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcb91/subscriptions",
      "organizations_url": "https://api.github.com/users/jcb91/orgs",
      "repos_url": "https://api.github.com/users/jcb91/repos",
      "events_url": "https://api.github.com/users/jcb91/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcb91/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-29T18:00:51Z",
    "updated_at": "2016-05-29T18:00:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "You could also set a custom metadata attribute on either the cell or the notebook as a whole, to keep track of whether it's already been done. Might also be nice to add different configurable init cells for different kernels.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/376543124",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-376543124",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 376543124,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjU0MzEyNA==",
    "user": {
      "login": "freifrauvonbleifrei",
      "id": 9729409,
      "node_id": "MDQ6VXNlcjk3Mjk0MDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9729409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/freifrauvonbleifrei",
      "html_url": "https://github.com/freifrauvonbleifrei",
      "followers_url": "https://api.github.com/users/freifrauvonbleifrei/followers",
      "following_url": "https://api.github.com/users/freifrauvonbleifrei/following{/other_user}",
      "gists_url": "https://api.github.com/users/freifrauvonbleifrei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/freifrauvonbleifrei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/freifrauvonbleifrei/subscriptions",
      "organizations_url": "https://api.github.com/users/freifrauvonbleifrei/orgs",
      "repos_url": "https://api.github.com/users/freifrauvonbleifrei/repos",
      "events_url": "https://api.github.com/users/freifrauvonbleifrei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/freifrauvonbleifrei/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-27T14:20:45Z",
    "updated_at": "2018-03-27T14:20:45Z",
    "author_association": "NONE",
    "body": "@Paul-Yuchao-Dong, thanks for the script! I used it to add a welcome banner to a custom kernel. And now I wanted to just put the result here for others to find. \r\n\r\nThese are the contents of `kernel.js` which is installed in the kernelspec (that means into the same folder as the kernel's `kernel.json`):\r\n```\r\ndefine([\r\n    'base/js/namespace'\r\n], function(\r\n    Jupyter\r\n) {\r\n    function onload() {\r\n      if (Jupyter.notebook.get_cells().length===1){\r\n        Jupyter.notebook.insert_cell_above('markdown', 0).set_text(\"Welcome to my kernel\");\r\n      }\r\n      console.log(\"custom kernel.js loaded\")\r\n    }\r\n    return {\r\n        onload: onload\r\n    };\r\n});\r\n```\r\n\r\nPlease note that the API is still subject to change in future releases.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/664451678",
    "html_url": "https://github.com/jupyter/notebook/issues/1451#issuecomment-664451678",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1451",
    "id": 664451678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDQ1MTY3OA==",
    "user": {
      "login": "meeseeksmachine",
      "id": 39504233,
      "node_id": "MDQ6VXNlcjM5NTA0MjMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39504233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meeseeksmachine",
      "html_url": "https://github.com/meeseeksmachine",
      "followers_url": "https://api.github.com/users/meeseeksmachine/followers",
      "following_url": "https://api.github.com/users/meeseeksmachine/following{/other_user}",
      "gists_url": "https://api.github.com/users/meeseeksmachine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meeseeksmachine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meeseeksmachine/subscriptions",
      "organizations_url": "https://api.github.com/users/meeseeksmachine/orgs",
      "repos_url": "https://api.github.com/users/meeseeksmachine/repos",
      "events_url": "https://api.github.com/users/meeseeksmachine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meeseeksmachine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T15:04:32Z",
    "updated_at": "2020-07-27T15:04:32Z",
    "author_association": "NONE",
    "body": "This issue has been mentioned on **Jupyter Community Forum**. There might be relevant details there:\n\nhttps://discourse.jupyter.org/t/opening-a-notebook-with-parameters-to-be-set-in-the-first-code-snippet/5389/4\n",
    "performed_via_github_app": null
  }
]
