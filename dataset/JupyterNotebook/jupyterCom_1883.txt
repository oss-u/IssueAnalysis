[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/269836430",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-269836430",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 269836430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTgzNjQzMA==",
    "user": {
      "login": "BoPeng",
      "id": 9889312,
      "node_id": "MDQ6VXNlcjk4ODkzMTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9889312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BoPeng",
      "html_url": "https://github.com/BoPeng",
      "followers_url": "https://api.github.com/users/BoPeng/followers",
      "following_url": "https://api.github.com/users/BoPeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/BoPeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BoPeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BoPeng/subscriptions",
      "organizations_url": "https://api.github.com/users/BoPeng/orgs",
      "repos_url": "https://api.github.com/users/BoPeng/repos",
      "events_url": "https://api.github.com/users/BoPeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BoPeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-30T23:56:51Z",
    "updated_at": "2016-12-30T23:56:51Z",
    "author_association": "NONE",
    "body": "I have tried but could not find any answer on how the jupyter client and server (kernel) work.\r\n\r\n1. How to manipulate cell `metadata`? I can see that some nbextensions can set metadata and the metadata could be saved in `.ipynb`, but I am not sure how the kernel can access cell meta information.\r\n2. How does `user_expressions` work? I mean, how the frontend determines which `user_expressions` to evaluate? The `user_expressions` looks to me the only way for the front and backend to exchange meta information, but I am not sure how to control the frontend.\r\n\r\nIn the end, what I would like to do, in the context of [Script of Scripts](http://vatlab.github.io/SOS) is to **store and use kernel information in each cell**. More specifically,\r\n\r\n1. The frontend reads `metadata` of a cell, and send the kernel information to `do_execute` (via `user_expression`). If this is possible, the frontend can also use different color to display cells created by different kernels.\r\n2. The kernel decides which subkernel to use to evaluate the `code` (current active kernel for new cells and creating kernel for existing cells), and send result, as well as `kernel` information to frontend (through `user_expression`)?\r\n3. The frontend saves kernel info in `metadata` of a cell. The information will be used when the cell is executed again.\r\n\r\nI would appreciate it if anyone can let me know if these are at all possible and point me to relevant documentation or source code. Thanks.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/270958380",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-270958380",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 270958380,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDk1ODM4MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-06T17:38:22Z",
    "updated_at": "2017-01-06T17:38:22Z",
    "author_association": "MEMBER",
    "body": "> How to manipulate cell metadata? I can see that some nbextensions can set metadata and the metadata could be saved in .ipynb, but I am not sure how the kernel can access cell meta information.\r\n\r\nThe kernel can't directly manipulate cell metadata: by design, it doesn't know about the document the code is part of. You can display Javascript output which will manipulate cell metadata, or even set up a comm to exchange data between the frontend and the kernel.\r\n\r\n> How does user_expressions work? I mean, how the frontend determines which user_expressions to evaluate? The user_expressions looks to me the only way for the front and backend to exchange meta information, but I am not sure how to control the frontend.\r\n\r\nI don't think the notebook uses `user_expressions`, and I'm not even sure that any of our frontends do. It was specified in the protocol to allow custom prompts in the frontend,  but we never got round to implementing that, and it hasn't proved very useful for anything else, as far as I know.\r\n\r\nYou might be best off looking into [comms](http://jupyter-notebook.readthedocs.io/en/latest/comms.html) to allow custom messages between the frontend and the kernel.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/271090059",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-271090059",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 271090059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTA5MDA1OQ==",
    "user": {
      "login": "BoPeng",
      "id": 9889312,
      "node_id": "MDQ6VXNlcjk4ODkzMTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9889312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BoPeng",
      "html_url": "https://github.com/BoPeng",
      "followers_url": "https://api.github.com/users/BoPeng/followers",
      "following_url": "https://api.github.com/users/BoPeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/BoPeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BoPeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BoPeng/subscriptions",
      "organizations_url": "https://api.github.com/users/BoPeng/orgs",
      "repos_url": "https://api.github.com/users/BoPeng/repos",
      "events_url": "https://api.github.com/users/BoPeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BoPeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-07T15:30:15Z",
    "updated_at": "2017-01-07T16:51:17Z",
    "author_association": "NONE",
    "body": "Great! Thank you very much for your info and I can now send information from the kernel to frontend, update frontend style accordingly and save to metadata. This will greatly increase the usability of the SoS kernel.\r\n\r\nI have a few related issue though, hopefully you have some quick answers for them.\r\n\r\n1. The SoS kernel uses magic `%use R` etc to switch kernel so I can only know which kernel was actually used after the completion of the execution. When I send the 'actual used kernel' information to the frontend, I am having trouble finding the cell that was just executed. `IPython.notebook.get_selected_cell()` does not have to be the just executed cell, using `execution_count` or `code` to look up cell do not work well because `execution_count` might not be immediately available in the frontend after execution, and multiple cells might have the same `code`. Is there an easy way to find the just executed cell so that I can set metadata to the right one? The cells have field `last_msg_id` but I am not sure what id it is (is it for the `execution_result` message?) and how to get the ID from the kernel.\r\n\r\n2. How can I send metadata to the kernel when I execute a cell? I am thinking of a `preexecute_hook` to send the metadata to kernel through `Comm` but after reading the [frontend code](https://github.com/jupyter/notebook/blob/master/notebook/static/notebook/js/codecell.js) I tend to think that I have to override `CodeCell.prototype.get_text` for this.\r\n\r\n3. I am also having trouble setting the cell style from cell metadata, but I suppose I can learn it from nbextensions such as [exercise2](https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tree/master/src/jupyter_contrib_nbextensions/nbextensions/exercise2).\r\n\r\nThank you again for your help, you know, a simple hint to the right direction can save me hours of searching and code digging.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/271095160",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-271095160",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 271095160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTA5NTE2MA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-07T16:54:54Z",
    "updated_at": "2017-01-07T16:54:54Z",
    "author_association": "MEMBER",
    "body": "Maybe it would actually be better to use the metadata in `execute_request` and `execute_reply` messages. All Jupyter messages have a metadata part where you can put any information you want. The downside is that that may be a bit trickier to access from an extension in the frontend. I don't know that code very well, unfortunately.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/271095751",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-271095751",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 271095751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTA5NTc1MQ==",
    "user": {
      "login": "BoPeng",
      "id": 9889312,
      "node_id": "MDQ6VXNlcjk4ODkzMTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9889312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BoPeng",
      "html_url": "https://github.com/BoPeng",
      "followers_url": "https://api.github.com/users/BoPeng/followers",
      "following_url": "https://api.github.com/users/BoPeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/BoPeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BoPeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BoPeng/subscriptions",
      "organizations_url": "https://api.github.com/users/BoPeng/orgs",
      "repos_url": "https://api.github.com/users/BoPeng/repos",
      "events_url": "https://api.github.com/users/BoPeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BoPeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-07T17:04:42Z",
    "updated_at": "2017-01-07T17:04:42Z",
    "author_association": "NONE",
    "body": "I think the `execute_request` is triggered by the [frontend execute function](https://github.com/jupyter/notebook/blob/master/notebook/static/notebook/js/codecell.js#L303) so we have to insert the metadata in that function. The particular feature I want to do is that if a cell was execute by R and has `cell.metadata.kernel=\"R\"`, I need to wrap the code with\r\n\r\n```\r\n%with R\r\ncode\r\n```\r\n\r\nto make sure the code is re-executed in the `R` kernel. I will see if I can override [CodeCell.prototype.get_text](https://github.com/jupyter/notebook/blob/master/notebook/static/notebook/js/codecell.js#L491) to achieve this.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/271157029",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-271157029",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 271157029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE1NzAyOQ==",
    "user": {
      "login": "BoPeng",
      "id": 9889312,
      "node_id": "MDQ6VXNlcjk4ODkzMTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9889312?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BoPeng",
      "html_url": "https://github.com/BoPeng",
      "followers_url": "https://api.github.com/users/BoPeng/followers",
      "following_url": "https://api.github.com/users/BoPeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/BoPeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BoPeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BoPeng/subscriptions",
      "organizations_url": "https://api.github.com/users/BoPeng/orgs",
      "repos_url": "https://api.github.com/users/BoPeng/repos",
      "events_url": "https://api.github.com/users/BoPeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BoPeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-08T15:15:30Z",
    "updated_at": "2017-01-08T15:15:30Z",
    "author_association": "NONE",
    "body": "Because overriding `CodeCell.prototype.get_text`has a number of side effects (e.g. the added meta information would be saved to notebook), I ended up modifying `cell.kernel.execute` as follows\r\n\r\n```\r\n        var my_execute = function (code, callbacks, options) {\r\n            \"use strict\"\r\n            var cells = IPython.notebook.get_cells();\r\n            for (var i = cells.length - 1; i >= 0;  --i ) {\r\n                // cells being executed would have input prompt '*' according\r\n                // to this.set_input_prompt('*') before execute is called.\r\n                // Also, because a cell might start executing without a previous cell\r\n                // being finished, we should start from reverse and check actual code\r\n                // A magic is used to send meta information and cell index to the kernel\r\n                if (cells[i].input_prompt_number == '*' && code == cells[i].get_text()) {\r\n                   return this.orig_execute(\r\n                        \"%softwith \" + cells[i].metadata.kernel + \" --cell \" + i.toString() + \"\\n\" + code,\r\n                        callbacks, options)\r\n                }\r\n            }\r\n        }\r\n        // override kernel execute with the wrapper.\r\n        IPython.notebook.kernel.orig_execute = IPython.notebook.kernel.execute\r\n        IPython.notebook.kernel.execute = my_execute\r\n```\r\n\r\nThe code also sends cell index to the kernel which also solves problem 1 (locate just executed cell). It is a hack and it is not particularly efficient (search notebook for each `execute` call) also I would be happy to switch if there is a better way to send meta data to kernel for execution (it looks like `user_expression` could be used for this).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/370237450",
    "html_url": "https://github.com/jupyter/notebook/issues/1883#issuecomment-370237450",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1883",
    "id": 370237450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDIzNzQ1MA==",
    "user": {
      "login": "quinot",
      "id": 1678806,
      "node_id": "MDQ6VXNlcjE2Nzg4MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1678806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quinot",
      "html_url": "https://github.com/quinot",
      "followers_url": "https://api.github.com/users/quinot/followers",
      "following_url": "https://api.github.com/users/quinot/following{/other_user}",
      "gists_url": "https://api.github.com/users/quinot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quinot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quinot/subscriptions",
      "organizations_url": "https://api.github.com/users/quinot/orgs",
      "repos_url": "https://api.github.com/users/quinot/repos",
      "events_url": "https://api.github.com/users/quinot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quinot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-04T15:23:25Z",
    "updated_at": "2018-03-04T15:23:25Z",
    "author_association": "NONE",
    "body": "Hi, for some solutions to pass code cell metadata to the kernel, you may be interested in PR #3391.",
    "performed_via_github_app": null
  }
]
