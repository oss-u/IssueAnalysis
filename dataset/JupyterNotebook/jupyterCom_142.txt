[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110861033",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-110861033",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 110861033,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg2MTAzMw==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T18:14:41Z",
    "updated_at": "2015-06-10T18:14:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@KrishnaPG I'm curious under what circumstances this is too expensive?  In the default Jupyter ContentsManager, list_checkpoints is basically just `os.listdir`.  Do you have an alternate Checkpoints implementation in mind/in progress?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110999297",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-110999297",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 110999297,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk5OTI5Nw==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T04:59:09Z",
    "updated_at": "2015-06-11T05:08:21Z",
    "author_association": "NONE",
    "body": "Thank you @ssanderson \n-   In many cases, _checking for existence_ is O(1) while _listing all_ is O(n). \n-   Besides, existence checking results could be cached (quite longer) than content-listing results (which gets invalidated faster). In some case, we have seen more 'checkpoints' than 'autosaves' for notebooks for few users.\n-   Also, usually `list_checkpoints()` implementation will have internal sorting included in the computation to return results temporally ordered, which is O(n logn). (The sorting might happen at app-level or db-level).\n\nIn scenarios where the older checkpoints get moved to secondary (slower) storage, there is no way to tell the `list_checkpoints` method that we are not really interested in _all_ the results (including the secondary storage ones), but just one.\n\nWe do not see it as impossible for a user to create 25+ checkpoints throughout the life of a notebook, where as his active \"working set\" would be only last 5 or 10 checkpoints. A typical Redis implementation would hold these 'working set' in memory, while pushing all the older ones to secondary storage.\n\nOfcourse, One can certainly circumvent those problems by always trying to have _all_ the checkpoints always available in the main memory ready to be listed etc., but then it looks like having an \"exists()\" method is more simpler and semantically valid solution.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110999947",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-110999947",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 110999947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDk5OTk0Nw==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T05:08:07Z",
    "updated_at": "2015-06-11T05:09:59Z",
    "author_association": "NONE",
    "body": "Another point worth noting: the `exists` method need not be a \"must to implement\" method. \n\nIt could be just an ordinary method with default implementation that falls back to `list_checkpoints` such as: \n\n```\nclass Checkpoint :\n\n    def exists_checkpoints_for(path):\n        return not not list_checkpoints(path)\n\n    def list_checkpoints(path):\n        raise exception \"must be implemented\"\n```\n\nThis way, it is backward compatible and also does not put pressure on implementor who do not want to take advantage of that `exists` method.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113671177",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-113671177",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 113671177,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY3MTE3Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T23:31:46Z",
    "updated_at": "2015-06-19T23:31:46Z",
    "author_association": "MEMBER",
    "body": "OK, I think this is a reasonable addition. @KrishnaPG , do you want to make a pull request adding it. There might be some bikeshedding over naming.\n\n`bool()` is a neater way of doing `not not`.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113673584",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-113673584",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 113673584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY3MzU4NA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T23:40:51Z",
    "updated_at": "2015-06-19T23:40:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver vote on naming would be `def exists(path):`.\n\n:+1: for `bool` over `not not`.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113674138",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-113674138",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 113674138,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY3NDEzOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T23:47:16Z",
    "updated_at": "2015-06-19T23:47:16Z",
    "author_association": "MEMBER",
    "body": "I think it might be better to be a bit more specific, because there are some different possible 'exists' questions you might ask of the checkpoints implementation:\n- Does any checkpoint exist for this file? (what we're talking about here)\n- Does this specific checkpoint (id) exist?\n- Does a checkpoint exist meeting some set of criteria, e.g. created since <timestamp>?\n\nBut it's not a strong preference, and I don't currently have a name I like better for it.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113727406",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-113727406",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 113727406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzcyNzQwNg==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-20T08:07:26Z",
    "updated_at": "2015-06-20T08:07:26Z",
    "author_association": "NONE",
    "body": "Thanks @takluyver and @ssanderson . \n\nForgive me for the `not not`. \n\nIt was not my intention to promote it - its just that not being familiar with python or its type-conversion system, I used the `not not` merely to demonstrate the concept. It was just one of the old techniques from the days of x86 assembly / C to force-cast the objects to bools. \n\nBut I see from your messages that python has this `bool()` to take care of the conversion - in which case it is better to stick with `bool()`. \n\nAs for the naming, I have no preference either. Whichever works for you, is fine with me. But as @takluyver pointed, the semantics certainly need to be clear for the user. For example, something on the lines of `has_checkpoints()` is also not far from the concept.\n\nBTW, does python support polymorphic functions (where multiple methods can have same function name with different parameter types). In that case multiple methods with same name such as below may satisfy @takluyver 's criteria:\n\n```\nhas_checkpoints(for_this_path) :\n     #some code\n\nhas_checkpoints(for_this_id):\n    # some code\n\nhas_checkpoints(for_this_condition):\n    # some code\n\n```\n\nIf not, what is the typical way Python achieves the above kind of mechanism?\n\nOne simple way would be - if the `path`, `id` etc. were objects themselves on which we can apply `has_checkpoints'. For example,\n\n```\n    def has_checkpoints(pathString):\n          return PATH_Class(pathString).has_checkpoints();\n```\n\nwhere `PATH_Class` is a light-weight wrapper that creates a `path` object that has specialized `has_checkpoints()` defined on it from the user supplied `pathString`. \n\nThe `PATH_Class` then be defined as a Class Trait ( mixin in pyton?) for the checkpoint class.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113838339",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-113838339",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 113838339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzgzODMzOQ==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-20T23:09:48Z",
    "updated_at": "2015-06-20T23:09:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> BTW, does python support polymorphic functions (where multiple methods can have same function name with different parameter types). In that case multiple methods with same name such as below may satisfy\n\nThis isn't possible in python without adding some extra machinery (see below for an example).  If you define two functions with the same name in a given namespace, the second just overwrites the first.\n\n> If not, what is the typical way Python achieves the above kind of mechanism?\n\nYou can write something like:\n\n```\ndef some_function(obj):\n    if isinstance(obj, str):\n        # do str things\n    elif isinstance(obj, int):\n        # do int things\n    elif isinstance(obj, float):\n        # do float_things\n    ...\n```\n\nI'd say this is generally considered a bit of an anti-pattern though unless you've got a good reason for wanting to accept multiple input types.  For cases where it makes sense (e.g. when you're implementing an addition function on various number-like types), there are libraries like @mrocklin's [multipledispatch](https://github.com/mrocklin/multipledispatch/) that let you specify type signatures as decorators.  `functools` in recent versions of Python 3 stdlib also supplies a [singledispatch](https://docs.python.org/3/library/functools.html#functools.singledispatch) decorator that implements this behavior for functions that accept a single argument.\n\nFor this particular case, dispatching on type for an `exists` function wouldn't be useful anyway, because the possible inputs would either by checkpoint_id or path, both of which are strings.  If for some reason it became important to want to check existence for a path and for a string, I'd say the right thing to do would be to just create separate methods, say `checkpoint_exists_with_path(path)` and `checkpoint_exists_with_id(id)`.  A bit more verbose, but immediately clear to everyone what's happening.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/117695513",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-117695513",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 117695513,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzY5NTUxMw==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T14:30:35Z",
    "updated_at": "2015-07-01T14:37:57Z",
    "author_association": "NONE",
    "body": "Sorry for the late reply.\n\nSo, what is the action plan? Shall we go ahead with  the name `def exists(path)` ? Or some alternative (say, `has_checkpoints` or  `has_history` etc..)?\n\nAlso,  I would like bring the issue of adding 'descriptions' metadata to the files and checkpoints. I know the issue has been put in halt at https://github.com/jupyter/notebook/issues/130 due to performance reasons.\n\nHowever, for alternate content manager classes (such as mongodb / postgres based managers) being discussed here, which are not file-based, reading the metadata info (such as the descriptions) happens anyway as part of reading the filename and related info. So no additional overhead. \n\nPrimarily my concern is about 'checkpoints'. Listing 10 different checkpoints with different timestamps in the menu is not so effective as listing checkpoints with their 'commit messages'.\n\nSo, my question is: assuming that performance overhead is not a problem (let the content /checkpoint manger worry about it), what is the change required to add these descriptions for files and checkpoints (architecture wise)?\n\nFor poor-performers like the file-based content manager, they can always skip reading the description and return \"\"  (empty string) for the description, if they want.\n\nWhat are your views?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/117710601",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-117710601",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 117710601,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzcxMDYwMQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T15:07:40Z",
    "updated_at": "2015-07-01T15:07:40Z",
    "author_association": "MEMBER",
    "body": "1) I would write an API that work (when possible) on my objects. like `def exists([path])` or `def exists([checkpoints_ids])` If we expose for 1 people will want to play with many,\n\n2) Beyond the programatic API, we should think at the REST api too. \n\n3) would `list_checkpoint` taking a upper and lower limit works ? so that you can if needed \"Page\" the requests.\n\nIt kinds of depends on what people want to do. \n\nWith extensions, I suppose it is still possible to write that externally, as another API endpoint  for the time beeing, and iterate on it. We are about to release 4.0, so we will not change API **right now**.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/117714664",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-117714664",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 117714664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzcxNDY2NA==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T15:25:39Z",
    "updated_at": "2015-07-01T15:25:39Z",
    "author_association": "NONE",
    "body": "Not a problem @Carreau You guys know how to do it right and when to do it. So, will leave it in your good hands and hope to see it implemented sometime soon. \n\nMeanwhile I will try to keep adding my views/comments/suggestions on other list of features /wishlist from architecture stand point (which is what I do better), as we keep encountering them in our own use of this product. \n\nI thank you and all your other project members for taking time to review issues such as this and others, and also for providing this good opensource work/project for community. It is helpful.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/117715843",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-117715843",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 117715843,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzcxNTg0Mw==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T15:29:57Z",
    "updated_at": "2015-07-01T15:29:57Z",
    "author_association": "MEMBER",
    "body": "> You guys know how to do it right and w\n\nNot always, and our bandwidth is pretty limitted. It would be (relatively) easy to get more experience than one of us on a specific part of the project. I would expect @ssanderson to be the more experienced on the content manager side. \n\nDraft implementation are alway welcome, they at least often show issue in implementation. We almost never get things right the first time. \n\n> I thank you and all your other project members for taking time to review issues such as this and others, and also for providing this good opensource work/project for community. It is helpful.\n\nNo problem, I know we are not always super responsive and we can seem reluctant sometime, maybe out of extra caution. \nIf you want to try to make that as an extension to play with it, we can give you pointers. \n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/296845273",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-296845273",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 296845273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg0NTI3Mw==",
    "user": {
      "login": "JamiesHQ",
      "id": 476301,
      "node_id": "MDQ6VXNlcjQ3NjMwMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/476301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamiesHQ",
      "html_url": "https://github.com/JamiesHQ",
      "followers_url": "https://api.github.com/users/JamiesHQ/followers",
      "following_url": "https://api.github.com/users/JamiesHQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamiesHQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamiesHQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamiesHQ/subscriptions",
      "organizations_url": "https://api.github.com/users/JamiesHQ/orgs",
      "repos_url": "https://api.github.com/users/JamiesHQ/repos",
      "events_url": "https://api.github.com/users/JamiesHQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamiesHQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-24T22:59:38Z",
    "updated_at": "2017-04-24T22:59:38Z",
    "author_association": "MEMBER",
    "body": "@gnestor : was this implemented in 5.0? What are the next steps? Thanks!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/296860340",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-296860340",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 296860340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg2MDM0MA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T00:48:16Z",
    "updated_at": "2017-04-25T00:48:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@KrishnaPG Are you still interested in contributing this feature? Marking as backlog for now...",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/348649678",
    "html_url": "https://github.com/jupyter/notebook/issues/142#issuecomment-348649678",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/142",
    "id": 348649678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODY0OTY3OA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T00:23:46Z",
    "updated_at": "2017-12-02T00:23:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing due to inactivity...",
    "performed_via_github_app": null
  }
]
