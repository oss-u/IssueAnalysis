[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/186766743",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-186766743",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 186766743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njc2Njc0Mw==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-21T07:32:26Z",
    "updated_at": "2016-02-21T07:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you clarify why a Markdown cell doesn't accomplish that? Do you want to\naccess display mime other types than HTML? What would edit mode look like\nfor those other mime types? Not opposed to this idea, just trying to think\nthrough it....\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/186796166",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-186796166",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 186796166,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njc5NjE2Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-21T10:46:20Z",
    "updated_at": "2016-02-21T10:46:20Z",
    "author_association": "MEMBER",
    "body": "@ibustelo has run into some sort of sanitisation that we do on markdown cells, so you can't write arbitrary HTML in them.\n\nI think that was prompted by the security discussion - we decided to sanitise markdown all the time, so that the signatures and trust mechanism only deal with outputs from code cells.\n\nSo I think the crucial thing we need to work out is what the user interface for trusting arbitrary HTML in something like a markdown cell is, equivalent to running a code cell to trust it. Should we present untrusted cells unrendered and let the user render them to trust them?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/186856654",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-186856654",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 186856654,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njg1NjY1NA==",
    "user": {
      "login": "willingc",
      "id": 2680980,
      "node_id": "MDQ6VXNlcjI2ODA5ODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2680980?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willingc",
      "html_url": "https://github.com/willingc",
      "followers_url": "https://api.github.com/users/willingc/followers",
      "following_url": "https://api.github.com/users/willingc/following{/other_user}",
      "gists_url": "https://api.github.com/users/willingc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willingc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willingc/subscriptions",
      "organizations_url": "https://api.github.com/users/willingc/orgs",
      "repos_url": "https://api.github.com/users/willingc/repos",
      "events_url": "https://api.github.com/users/willingc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willingc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-21T16:54:26Z",
    "updated_at": "2016-02-21T16:54:26Z",
    "author_association": "MEMBER",
    "body": "Ping @minrk\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/186894869",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-186894869",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 186894869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njg5NDg2OQ==",
    "user": {
      "login": "julienr",
      "id": 506602,
      "node_id": "MDQ6VXNlcjUwNjYwMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/506602?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/julienr",
      "html_url": "https://github.com/julienr",
      "followers_url": "https://api.github.com/users/julienr/followers",
      "following_url": "https://api.github.com/users/julienr/following{/other_user}",
      "gists_url": "https://api.github.com/users/julienr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/julienr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/julienr/subscriptions",
      "organizations_url": "https://api.github.com/users/julienr/orgs",
      "repos_url": "https://api.github.com/users/julienr/repos",
      "events_url": "https://api.github.com/users/julienr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/julienr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-21T19:24:02Z",
    "updated_at": "2016-02-21T19:24:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "If I understand this correctly, I think this can be orthogonal to #621 . Even if you could insert a special \"image\" cell, I don't think this would cover all the use cases for inline images. For example, you might want to do layout on your inline images (e.g. put them in a table) that you cannot do with a simple image cell type.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/186944085",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-186944085",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 186944085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njk0NDA4NQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-21T23:33:52Z",
    "updated_at": "2016-02-21T23:33:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@takluyver great point, yes I guess we do treat the code/markdown cells\ndifferently from a security standpoint. This clarifies an important part of\nthis. The idea of using Markdown cells for this purpose, but treating them\nmore like code cells seems like a pretty straightforward approach. What are\nthe downsides of that?\n\nCreating a new cell type that supports arbitrary display mime-types, but\ncan still be human edited like a Markdown seems a bit awkward still. Trying\nto get my head around it. Would this be like an input-less code cell? Or a\ncode-cell whose input is its output?\n\nOn Sun, Feb 21, 2016 at 2:46 AM, Thomas Kluyver notifications@github.com\nwrote:\n\n> @ibustelo has run into some sort of sanitisation that we do on markdown\n> cells, so you can't write arbitrary HTML in them.\n> \n> I think that was prompted by the security discussion - we decided to\n> sanitise markdown all the time, so that the signatures and trust mechanism\n> only deal with outputs from code cells.\n> \n> So I think the crucial thing we need to work out is what the user\n> interface for trusting arbitrary HTML in something like a markdown cell is,\n> equivalent to running a code cell to trust it. Should we present untrusted\n> cells unrendered and let the user render them to trust them?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/jupyter/notebook/issues/1123#issuecomment-186796166.\n\n## \n\nBrian E. Granger\nAssociate Professor of Physics and Data Science\nCal Poly State University, San Luis Obispo\n@ellisonbg on Twitter and GitHub\nbgranger@calpoly.edu and ellisonbg@gmail.com\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/186974896",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-186974896",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 186974896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Njk3NDg5Ng==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T02:38:31Z",
    "updated_at": "2016-02-22T02:39:28Z",
    "author_association": "MEMBER",
    "body": "Here's what I imagine for what is represented as an HTML cell for users when they're editing it:\n\n![group](https://cloud.githubusercontent.com/assets/836375/13207923/9ca89f18-d8d9-11e5-8caa-8a992f76bb35.png)\n\nFollowed by what it looks like when rendered:\n\n![group 2](https://cloud.githubusercontent.com/assets/836375/13208086/2d442fa0-d8db-11e5-96d9-ec8c46ed0e08.png)\n\nIn this example I'm showing a pencil icon to switch back to edit mode, though we can refine that.\n\nAs for inserting it, to the user they don't see what the underlying representation is for this cell which I'm imagining to be:\n\n``` json\n{\n \"cell_type\": \"data\",\n \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Name</th>\\n\",\n       \"      <th>Email</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>Jane Doe</td>\\n\",\n       \"      <td>jane@doe.com</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>John Doe</td>\\n\",\n       \"      <td>john@doe.com</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ]\n     }\n}\n```\n\nSimilary for images, this would end up with base64 encoded images inline while the UX for it is similar in flow to drag and dropping images or selecting via menu in other UIs.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187114391",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187114391",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187114391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzExNDM5MQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T10:29:16Z",
    "updated_at": "2016-02-22T10:29:16Z",
    "author_association": "MEMBER",
    "body": "A summary of the security/sanitization we do and why:\n1. untrusted HTML/js must never be displayed without explicit user action\n2. Code cells have an obvious action to take: execute\n3. Markdown cells _also_ have an obvious action to take: render\n4. Instead of tracking whether the user has explicitly trusted markdown cells, we treat them as always untrusted, which means sanitizing markdown results, but we can display them even when the notebook is untrusted\n5. A dedicated display-data cell would need to have to have the same trust semantics as other cells (explicit trust before display or sanitization)\n\nIf we treat markdown cells as we do code cells, that means that an untrusted notebook needs to open with all markdown cells unrendered, and they must be 'executed' manually by the user before they are allowed to render on the page. The same would be true if we had dedicated mimebundle cells.\n\nSo the question to me is, really, a user-experience one on which I don't have an informed opinion. Should we:\n1. sanitize markdown, in which case we always get to display it (what we do now)\n2. allow arbitrary HTML/js in markdown, in which case we cannot display it until it is trusted\n\nThere are technically other options, like \"display but sanitize only _untrusted_ markdown\", which is attractive because it will do what people want the most often, but I think it's the most confusing when sanitization of untrusted markdown produces a materially different result, where we have to communicate to users that they must\"unrender then re-render the cell to see it how it's meant to be.\"\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187121599",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187121599",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187121599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzEyMTU5OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T10:53:35Z",
    "updated_at": "2016-02-22T10:53:35Z",
    "author_association": "MEMBER",
    "body": "Is it possible to detect whether there's anything in a block of markdown/html which would be affected by sanitisation? I.e. could we check if each markdown cell is 'safe' and decide to display it rendered or unrendered?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187123583",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187123583",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187123583,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzEyMzU4Mw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T10:58:46Z",
    "updated_at": "2016-02-22T10:58:46Z",
    "author_association": "MEMBER",
    "body": "Yes, that is possible.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187125799",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187125799",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187125799,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzEyNTc5OQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T11:06:45Z",
    "updated_at": "2016-02-22T11:06:45Z",
    "author_association": "MEMBER",
    "body": "If that's doable, I think that would be preferable. But it would probably also cause some confusion - why are some of these cells showing up rendered and others unrendered? Maybe we could add a little _untrusted_ indicator by the unrendered cells, and offer a bit of explanation on mouseover/click.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187142679",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187142679",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187142679,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzE0MjY3OQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T11:59:17Z",
    "updated_at": "2016-02-22T11:59:30Z",
    "author_association": "MEMBER",
    "body": "Sure, so then the plan would be:\n1. track 'trusted' on markdown, just like code cells\n2. sanitize if untrusted\n3. show indicator / more info if sanitization made any changes\n4. explicit render of markdown cell indicates trust just like cell execution\n\nStep 1. requires a change in nbformat to keep track of the trusted flag on markdown cells. Perhaps that trust->sign code really belongs in the notebook repo anyway (not 100% sure), since it's specifically a transform from the nbformat file format to 'live' document state that's specific to this webapp.\n\nOne (lazy) version of that indicator could be to leave the cell unrendered if it's untrusted _and_ sanitization would make some change.\n\n@rgbkrk is there anything display cells would provide that this proposal would not, or do you still think that display cells are something we should add?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187145538",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187145538",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187145538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzE0NTUzOA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T12:02:48Z",
    "updated_at": "2016-02-22T12:02:48Z",
    "author_association": "MEMBER",
    "body": "> 1. sanitize if untrusted\n\nTo be precise, my proposal is not to sanitise (or not to display sanitised output), but to display the markdown cell unrendered if sanitisation would make any changes and it's untrusted.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187153195",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187153195",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187153195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzE1MzE5NQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T12:32:37Z",
    "updated_at": "2016-02-22T12:32:37Z",
    "author_association": "MEMBER",
    "body": "Gotcha, that ought to be doable.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187170020",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187170020",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187170020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzE3MDAyMA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T13:23:31Z",
    "updated_at": "2016-02-22T13:23:31Z",
    "author_association": "MEMBER",
    "body": "I got the basics going for that at #1126.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187244208",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187244208",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187244208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzI0NDIwOA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T16:00:37Z",
    "updated_at": "2016-02-22T16:45:13Z",
    "author_association": "MEMBER",
    "body": "Trust on markdown cells is a good starting point and we should see how it works in practice, via @lbustelo.\n\nThere's a larger question about what the markdown cells do and how they're specified:\n- Does the grammar for commonmark completely respect any embedded html?\n- What's the specification for embedded Math? Right now it seems like it's a function of the implementation in the notebook at any given time (see issues on nbviewer, github's rendering of notebooks, etc.)\n\nIf we couple ourselves to always using markdown cells for embedded HTML, these are the primary user experience and developer experience cons:\n- Unable to support a WYSIWYM editor like [ProseMirror](http://prosemirror.net/)? If we want the notebook to be approachable to a lot more analysts, this is a big one.\n- In contexts where the outputs need to be sandboxed (O'Reilly Media's site, any future revisions on nbviewer), where is this HTML declared. Is it a global context on the page? How do we make it not interfere with the rest of the page? For multi-user collaboration, how do you reason about a document that can change underneath you?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187247237",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187247237",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187247237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzI0NzIzNw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T16:09:16Z",
    "updated_at": "2016-02-22T16:09:16Z",
    "author_association": "MEMBER",
    "body": "> Unable to support a WYSIWYM editor like ProseMirror?\n\nIt would make this trickier, but I don't think it should be impossible. I expect that most markdown cells would still contain relatively simple Markdown which could be edited like that.\n\nOf course, if there are two different behaviours for markdown cells based on their contents, maybe they should be two cell types. That would be a bigger change to the notebook format, though.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187258649",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187258649",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187258649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzI1ODY0OQ==",
    "user": {
      "login": "lbustelo",
      "id": 2474841,
      "node_id": "MDQ6VXNlcjI0NzQ4NDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2474841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbustelo",
      "html_url": "https://github.com/lbustelo",
      "followers_url": "https://api.github.com/users/lbustelo/followers",
      "following_url": "https://api.github.com/users/lbustelo/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbustelo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbustelo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbustelo/subscriptions",
      "organizations_url": "https://api.github.com/users/lbustelo/orgs",
      "repos_url": "https://api.github.com/users/lbustelo/repos",
      "events_url": "https://api.github.com/users/lbustelo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbustelo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-22T16:43:00Z",
    "updated_at": "2016-02-22T16:43:00Z",
    "author_association": "NONE",
    "body": "Using the Markdown cell (once sanitation issues are solved) addresses 2 of my main concerns:\n1. HTML magic (and others like Javascript) places a requirement on the kernel that for many use-cases seem unreasonable and, for certain languages, not practical to implement (i.e  IRkernel/IRkernel#260).\n2. From a UX point of view, it is beneficial to have a well defined place to author client side content. Having to type `%%HTML` always felt kludgy.\n\nHaving said that... there are so many ways to author client side content that may not fit as nicely in the Markdown cell and might be better suited if we had some level of extensibility around cell types. @bollwyvl brought up https://github.com/pugjs/jade as another alternative to avoid typing HTML. There is always some new flavor of the month.\n\nAlso as @rgbkrk hinted at with WYSIWYG comment, the maturation of the Notebook space is going to lead to higher level authoring experiences. Jupyter and the NB format should somehow accommodate for that to avoid being overshadowed by the countless alternatives that are popping up all over.\n\nI understand the importance of the downstream tools (i.e. nbviewer) and the hesitation of an open set of cell types, but as notebooks become platforms for solution development, I think this issue is going to become more and more important to solve.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187518288",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187518288",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187518288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzUxODI4OA==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T04:20:07Z",
    "updated_at": "2016-02-23T04:59:07Z",
    "author_association": "MEMBER",
    "body": "Quick demo for you using [draft-js](https://github.com/facebook/draft-js) and KaTeX, for a rich editor that has block maths:\n\n![latex](https://cloud.githubusercontent.com/assets/836375/13241621/617b7fee-d9b2-11e5-8159-6aab35573ce4.gif)\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187568207",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187568207",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187568207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzU2ODIwNw==",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T06:33:07Z",
    "updated_at": "2016-02-23T06:33:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great, glad to see conversation about this topic! I've been tracking it for [some time now](https://mail.scipy.org/pipermail/ipython-dev/2012-December/010839.html), and am really interested in how this round turns out! I was indeed convinced then that make a cell type for everything is not the answer... but perhaps it is time to start thinking about some of the UI pieces around rich output that haven't fundamentally changed since then. \n\nBackground\nFor a while now, I've been making [magics](https://github.com/bollwyvl/jademagic)/[extensions](https://github.com/bollwyvl/nb-wysiwyg)/[widgets](https://github.com/bollwyvl/ipytangle)/[tricks](https://github.com/bollwyvl/nb-mermaid)/[fancies](http://bollwyvl.github.io/quarto/) to get closer to authoring particular kinds of wysiyMean, ala lyx/prosemirror. We've come a long way, if you are willing to jump through many hoops!\n\nFront End Stuff\n+1 common mark as a container for robot-authored Stuff (JS, HTML, CSS, SVG), even if we have to push forward the maths. If you read/write markdown and all those things, you're kind of a robot, so you should be fine.\n\nEven if adopting commonmark for all that Stuff, and getting our sanitization house in order, the authoring of said Stuff in the browser (in the notebook) probably does need some love. \n- CodeMirror has our back, and has [completion](https://codemirror.net/demo/complete.html) and [linting](https://codemirror.net/demo/lint.html) for all of those, and many of the transpiled languages which we'd want to see with full support of npm.\n- This would be backed by the nascent \"front end ʞernel\", and is what we'd need anyway to make JupyterLab into the best place to build Lab/Notebook extensions.\n- Just ditching out to the text editor would lose the immediacy of being in-browser...  \n  - and heck, maybe there's something to this stuff-embedded-in-json idea: there is something kind of beauitful in the [vulcanized](https://github.com/Polymer/vulcanize) polymer components: here's your nbextension... as a notebook!\n\nUser-authored text\nThe exception to this is, I think, user-authored complex prose documents.\n\nIf we were to embark on this path, I think it would end up having:\n- typography-focused approach to the UI of rich text authoring\n  - much like @rgbkrk's demo (:heart: it!) fade out all the UI, embrace the keyboard shortcuts, and start writing your journal paper. or letter. or contract. or whatever.\n- a document-oriented data structure for the content, likely via prosemirror...\n  - footnotes!\n  - sidebars!\n  - comments!\n  - images with captions!\n  - numbered equations!\n- a no-fooling, extensible layout engine ([nbpresent](https://github.com/Anaconda-Server/nbpresent) just hacks the css)\n  - parpers, posters, banners\n- robust themes that look publication grade out of the box\n\nThen the question is... are these then even cells? or is this another, prose-native view of your notebook you have chosen, which can include cells embedded in _it_. Do you show them next to each other? Does this even go in an ipynb, or is this a separate file type altogether, or a wrapper around both kinds of file, or a PDF with a local file store?\n\nVery exciting stuff, and hopefully a topic for the dev meeting!\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187837844",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187837844",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187837844,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzgzNzg0NA==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T18:48:57Z",
    "updated_at": "2016-02-23T18:48:57Z",
    "author_association": "MEMBER",
    "body": "That seems really appealing, and points to either a display-data cell as discussed here, or just an HTML cell, whose editor can be any HTML-authoring magic.\n\nI _believe_ with CommonMark's behavior, anything inside a `<div>` should be treated as raw HTML, which would mean that wrapping the entire markdown cell in a single div makes it a pure HTML cell. That _should_ mean that people can experiment with wysiwyg html editors on top of markdown cells while we figure if a cell type is useful.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187843053",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187843053",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187843053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzg0MzA1Mw==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T19:02:43Z",
    "updated_at": "2016-02-23T19:02:43Z",
    "author_association": "MEMBER",
    "body": "My understanding with commonmark is that any html tags should treat the enclosed material as html. That seems to be how the reference implementation behaves too: http://spec.commonmark.org/dingus/\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187908959",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187908959",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187908959,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzkwODk1OQ==",
    "user": {
      "login": "bollwyvl",
      "id": 45380,
      "node_id": "MDQ6VXNlcjQ1Mzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bollwyvl",
      "html_url": "https://github.com/bollwyvl",
      "followers_url": "https://api.github.com/users/bollwyvl/followers",
      "following_url": "https://api.github.com/users/bollwyvl/following{/other_user}",
      "gists_url": "https://api.github.com/users/bollwyvl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bollwyvl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bollwyvl/subscriptions",
      "organizations_url": "https://api.github.com/users/bollwyvl/orgs",
      "repos_url": "https://api.github.com/users/bollwyvl/repos",
      "events_url": "https://api.github.com/users/bollwyvl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bollwyvl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T21:14:00Z",
    "updated_at": "2016-02-23T21:14:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I believe with CommonMark's behavior, anything inside a `<div>` should be treated as raw HTML...\n\nYep, seems so. `div`, and [these buddies](http://spec.commonmark.org/0.24/#html-blocks):\n\n```\nStart condition: line begins the string < or </ followed by one of the strings (case-insensitive) address, article, aside, base, basefont, blockquote, body, caption, center, col, colgroup, dd, details, dialog, dir, div, dl, dt, fieldset, figcaption, figure, footer, form, frame, frameset, h1, head, header, hr, html, iframe, legend, li, link, main, menu, menuitem, meta, nav, noframes, ol, optgroup, option, p, param, section, source, summary, table, tbody, td, tfoot, th, thead, title, tr, track, ul, followed by whitespace, the end of the line, the string >, or the string />.\nEnd condition: line is followed by a blank line.\n\nStart condition: line begins with a complete open tag or closing tag (with any tag name other than script, style, or pre) followed only by whitespace or the end of the line.\nEnd condition: line is followed by a blank line.\n```\n\n> or just an HTML cell, whose editor can be any HTML-authoring magic\n\nSo, today, an inline prosemirror could serialize its JSON document model to cell metadata, and treat the source as its output.\n\nThough a bit tubby on bytes, this is nice, as then you've still got a \"dead pixel\" version of the content if someone doesn't have nbJadeDustUnderscoreHandlebarsReactHAMLJinjaLiquidLessSCSSStylusCoffeeTypeScript.\n\nI guess you'd have a helpful message at the top that suggested _thou shalt not edit this cell_, but since we don't lock cells, they'd be free to go on about their business if they didn't have your editor. Some translations even have reverse engineering capabilities, such as http://html2jade.org/, though this falls apart once you actually start using template features...\n\n> My understanding with commonmark is that any html tags should treat the enclosed material as html. That seems to be how the reference implementation behaves too: http://spec.commonmark.org/dingus/\n\nThis is the behavior of nbviewer, inherited from mistune, as discussed here: https://github.com/jupyter/nbviewer/issues/526#issuecomment-151928396\n\nAs described there, nbconvert( or nbviewer)'s configuration could be changed to mimic the live browser's marked, and the spec.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/187924503",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-187924503",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 187924503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NzkyNDUwMw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-23T21:38:05Z",
    "updated_at": "2016-02-23T21:38:05Z",
    "author_association": "MEMBER",
    "body": "The editor posted above comes straight out of [draft-js](https://github.com/facebook/draft-js), which has been used in production at Facebook for the last couple years and open sourced yesterday. It's React centric, though you can have React target any DOM element for rendering. I'm enjoying the APIs so far and the model underneath (people are using the same model in native apps now too).\n\nThat's a diversion from the real problem I'm worried about: what our specification is for the markdown cells themselves. It's not specced and is a reflection of the way the current user's notebook server  implements it. When used on nbviewer, github, or other static renderings, if we wanted consistency, we'd have to match the version of marked, mistune, commonmark, etc. as well as MathJax that matches the notebook server they came from. If we keep the spec consistent with commonmark and suggest HTML somewhere else, we lessen the rendering bugs that get reported elsewhere and can build a clean model (a necessity for a WYSIWYG editor).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188035329",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-188035329",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 188035329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODAzNTMyOQ==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T03:04:08Z",
    "updated_at": "2016-02-24T03:04:08Z",
    "author_association": "MEMBER",
    "body": "I don't have an answer here yet, just starting to digest the questions... But I want to throw one more data point into this topic: the Broad Institute's [GenePattern Notebook](https://github.com/genepattern/genepattern-notebook) exposes special input cells via an extension and a custom cell type, [this page](http://www.broadinstitute.org/cancer/software/genepattern/using-the-genepattern-notebook-environment) shows some examples.\n\nThis is a pattern that is also used by [KBase](http://kbase.us) for its computational biology apps and methods, with a slightly more complex approach b/c it was created earlier, when our notebook infrastructure was less mature (so the KBase team had to hack more).\n\nThis KBase/GenePatternNB approach fits certain use cases in biology _really_ well, and it has made me think that we really need to find a clean, generic solution for it, as biology is not the only place where it's useful.\n\nSo I think we should approach this question trying to solve these slightly different, but ultimately related, use cases in a unified way...\n\nIf we don't get to a solution here, this should definitely be something to brainstorm on at the dev meeting! I've put it on the agenda.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188280740",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-188280740",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 188280740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODI4MDc0MA==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T14:36:18Z",
    "updated_at": "2016-02-24T14:36:18Z",
    "author_association": "MEMBER",
    "body": "As @bollwyvl pointed out in https://github.com/jupyter/notebook/issues/1123#issuecomment-187908959, the important thing in commonmark for html blocks is that there are no blank lines (e.g., it doesn't do html between div tags, it just pays attention to blank lines).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188290836",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-188290836",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 188290836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODI5MDgzNg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T14:57:41Z",
    "updated_at": "2016-02-24T14:57:41Z",
    "author_association": "MEMBER",
    "body": "Aha, interesting note about the blank lines, thanks. That seems a bit weird, but does point to us making a specific HTML cell (mimebundle or otherwise) that wysiwyzards can sit on. I wouldn't want to be saying \"Make sure you don't add any empty lines in your HTML, or it'll interpret it as another language\".\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188293134",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-188293134",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 188293134,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODI5MzEzNA==",
    "user": {
      "login": "jasongrout",
      "id": 192614,
      "node_id": "MDQ6VXNlcjE5MjYxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/192614?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jasongrout",
      "html_url": "https://github.com/jasongrout",
      "followers_url": "https://api.github.com/users/jasongrout/followers",
      "following_url": "https://api.github.com/users/jasongrout/following{/other_user}",
      "gists_url": "https://api.github.com/users/jasongrout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jasongrout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jasongrout/subscriptions",
      "organizations_url": "https://api.github.com/users/jasongrout/orgs",
      "repos_url": "https://api.github.com/users/jasongrout/repos",
      "events_url": "https://api.github.com/users/jasongrout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jasongrout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T15:02:52Z",
    "updated_at": "2016-02-24T15:02:52Z",
    "author_association": "MEMBER",
    "body": "To throw another thing into the discussion, I also worked on wysiwyg tools for generating code directly in code cells: http://bl.ocks.org/jasongrout/5378313. \n![inlinewidgets](https://cloud.githubusercontent.com/assets/192614/13289347/b8f5445e-dadd-11e5-80a7-2e6aa6c85a22.gif)\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188298385",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-188298385",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 188298385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODI5ODM4NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T15:10:34Z",
    "updated_at": "2016-02-24T15:10:34Z",
    "author_association": "MEMBER",
    "body": "@jasongrout that's very cool!\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/188313750",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-188313750",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 188313750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODMxMzc1MA==",
    "user": {
      "login": "fperez",
      "id": 57394,
      "node_id": "MDQ6VXNlcjU3Mzk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/57394?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fperez",
      "html_url": "https://github.com/fperez",
      "followers_url": "https://api.github.com/users/fperez/followers",
      "following_url": "https://api.github.com/users/fperez/following{/other_user}",
      "gists_url": "https://api.github.com/users/fperez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fperez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fperez/subscriptions",
      "organizations_url": "https://api.github.com/users/fperez/orgs",
      "repos_url": "https://api.github.com/users/fperez/repos",
      "events_url": "https://api.github.com/users/fperez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fperez/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-24T15:49:50Z",
    "updated_at": "2016-02-24T15:49:50Z",
    "author_association": "MEMBER",
    "body": "@jasongrout +1!\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/207693500",
    "html_url": "https://github.com/jupyter/notebook/issues/1123#issuecomment-207693500",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1123",
    "id": 207693500,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzY5MzUwMA==",
    "user": {
      "login": "tonyfast",
      "id": 4236275,
      "node_id": "MDQ6VXNlcjQyMzYyNzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4236275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonyfast",
      "html_url": "https://github.com/tonyfast",
      "followers_url": "https://api.github.com/users/tonyfast/followers",
      "following_url": "https://api.github.com/users/tonyfast/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonyfast/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonyfast/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonyfast/subscriptions",
      "organizations_url": "https://api.github.com/users/tonyfast/orgs",
      "repos_url": "https://api.github.com/users/tonyfast/repos",
      "events_url": "https://api.github.com/users/tonyfast/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonyfast/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-09T03:21:31Z",
    "updated_at": "2016-04-09T03:21:31Z",
    "author_association": "NONE",
    "body": "I was trying to find out how to use the cell type to create to special cells and I found this awesome thread.\n\nI have been building presentations with `nbpresent` for data-driven interactive documents.  My first lesson was that too much code makes creating a presentation from a single notebook unwieldy.   \n\nThere needs to be a tighter way to connect variables on the kernel with  HTML and Javascript.  I came up with this small cell magic called [`literacy`](https://github.com/tonyfast/literacy).  `%%literate` processes the cell as literate markdown where the code fences are executed if the language is understood.  Moreover, the entire cell is a jinja2 template, well a few templates, which means that data can passed from the kernel to the presentation and made interactive.\n\n[This notebook](http://nbviewer.jupyter.org/gist/tonyfast/3d80ffaa8a2c5d04d3d2cd7631a7cb19/hard%20to%20find%20a%20better%20way%20to%20interact%20with%20javascript.ipynb) showcases `literacy`.  Some cool features are:\n- Markdown cells that create variables in python and insert them into the template.\n- Coffeescript, javascript, and pyscript to change state.\n- A DataFrame inserted directly into markdown after making a request.\n- Hidden code cells and disqus comments.  _Click the toggle input button to show the source._\n\nI feel like there is a cool editor in this idea.\n",
    "performed_via_github_app": null
  }
]
