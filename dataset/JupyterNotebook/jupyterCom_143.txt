[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110831123",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110831123",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110831123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgzMTEyMw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T16:52:15Z",
    "updated_at": "2015-06-10T16:52:15Z",
    "author_association": "MEMBER",
    "body": "Optional parameters are easy enough, but for this kind of 'slot' API where we're defining an interface for third parties to provide, I think we should keep it as simple as possible. Adding alternative methods to do the same thing makes the API contract more complicated - do both methods need to be implemented, or only one? If the latter, which, or does it just need either one?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110836906",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110836906",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110836906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDgzNjkwNg==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T17:06:08Z",
    "updated_at": "2015-06-10T17:13:16Z",
    "author_association": "NONE",
    "body": "Agreed. The `Checkpionts` is an abstract-class / interface and I would not like to add another 'must to be implemented' method myself.\n\nI am relatively new to Notebook so I am not sure of the wide use-cases here, but in my limited interaction with it, I see that check-points are mostly useful for books that are currently open and being edited (rather than closed / not-actively being edited ones, unless we are thinking of creating checkpoints through REST api for closed books just for the sake of it), models are usually available with the user in the memory by the time they need to create a checkpoint.\n\nOr, may be there are other use-cases, where someone needs to create a checkpoint but do not have the model with them readily - I am yet to encounter such cases though.\n\nNot sure how optional parameters in Python interfaces /abstract-classes work - but assuming if the method were to define like the below, with documentation that specify the `model` parameter is optional and one can use it only if it is valid (`not None` in python?) and ignore it otherwise:\n\n```\ncreate_checkpoint(self, contents_mgr, path, model = None) \n     # if model is not None use it,\n     # otherwise get the model from path\n```\n\nWould that kind of scenario possible?\n\nI think this one will be backward-compatible with existing code too.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110842167",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110842167",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110842167,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg0MjE2Nw==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T17:18:53Z",
    "updated_at": "2015-06-10T17:18:53Z",
    "author_association": "MEMBER",
    "body": "That's certainly possible, but then checkpoint-manager authors would have to test it both with and without that parameter set. @ssanderson , you're the first person I think of for things like this - do you think it's worth the extra complexity for a potential improvement in performance when creating checkpoints?\n\nThere's also the question of how to do it in a backwards compatible way, if we do it. [This](http://backcall.readthedocs.org/en/latest/) might be useful.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110865824",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110865824",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110865824,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg2NTgyNA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T18:31:38Z",
    "updated_at": "2015-06-10T18:31:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I am relatively new to Notebook so I am not sure of the wide use-cases here, but in my limited interaction with it, I see that check-points are mostly useful for books that are currently open and being edited (rather than closed / not-actively being edited ones, unless we are thinking of creating checkpoints through REST api for closed books just for the sake of it), models are usually available with the user in the memory by the time they need to create a checkpoint.\n\nIMO, the abstraction presented by `Checkpoints` is for storage that is **more durable** than the `ContentsManager` currently in use.  In particular, they represent saved notebook states that are not overwritten by the Notebook's built-in autosave, and the saved states can be restored.  IPython's built-in FileCheckpoints class only supports a single checkpoints but other checkpoints classes (including at least https://github.com/quantopian/pgcontents/blob/master/pgcontents/checkpoints.py#L33) allow multiples.  It'd be a straightforward extension to add multiple checkpoint support for a filesystem-based `Checkpoints` as well.\n\n> Or, may be there are other use-cases, where someone needs to create a checkpoint but do not have the model with them readily - I am yet to encounter such cases though.\n\nThere's UI in the notebook to create a Checkpoint, which results in REST API calls being made to the following Tornado handler:\n\n```\n    @web.authenticated\n    @json_errors\n    @gen.coroutine\n    def post(self, path=''):\n        \"\"\"post creates a new checkpoint\"\"\"\n        cm = self.contents_manager\n        checkpoint = yield gen.maybe_future(cm.create_checkpoint(path))\n        data = json.dumps(checkpoint, default=date_default)\n        location = url_path_join(self.base_url, 'api/contents',\n            path, 'checkpoints', checkpoint['id'])\n        self.set_header('Location', url_escape(location))\n        self.set_status(201)\n        self.finish(data)\n```\n\nThis lives in `IPython.services.contents.handlers.CheckpointsHandler` in the 3.x branch of IPython, and presumably somewhere analogous in this repo.  Notably, this does not send the model to be checkpointed.  For the two implementations of which I'm aware, namely IPython's `FileCheckpoints` and pgcontents' `PostgresCheckpoints`, there exists an efficient implementation of `create_checkpoint` that never pulls the model into memory, (a filesystem copy and an in-database copy, respectively).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110868625",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110868625",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110868625,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg2ODYyNQ==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T18:35:56Z",
    "updated_at": "2015-06-10T18:35:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As a result, code such as this has to issue another get() request to load the model, while it already has access to a model right there with it in main memory (Refer this line).\n\nWhen you say `get()` request, do you mean another HTTP GET request, or just another call to the `get_checkpoint` method?  If the former, I'm confused what you mean.  If the latter, then the model only gets pulled into memory extraneously when using `GenericCheckpointsMixin` (which it sounds like you are given the other issue you opened?)  If you're using FileContentsManager and FileCheckpointsManager, then we short-circuit to a filesystem copy and no extra work gets done.  Can you describe your particular use-case?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110872950",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110872950",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110872950,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg3Mjk1MA==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T18:41:14Z",
    "updated_at": "2015-06-10T18:41:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "As far as amending the API to be `create_checkpoint(self, contents_mgr, path, model=None)`, the main worry I'd have is that it makes it possible to pass inconsistent/meaningless sets of arguments.  For example, it's possible to pass a path and a model with a different `'path'` entry.  That's not an insane amount of extra complexity by any means, but I'd want there to be some motivation for allowing the possible duplication of input.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110881668",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110881668",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110881668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg4MTY2OA==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T19:10:31Z",
    "updated_at": "2015-06-10T19:11:04Z",
    "author_association": "NONE",
    "body": "Ok, below callstack may help clear few things. This is presently what is happening when a user tries to create a new python notebook:\n\n```\n    FileContentsManager._notebook_model in filemanager line 306 Python\n    MongoDBContentsManager.get in simple_notebook_manager line 114  Python\n    GenericCheckpointsMixin.create_checkpoint in checkpoints line 79    Python\n    ContentsManager.create_checkpoint in manager line 459   Python\n>   FileContentsManager.save in filemanager line 388    Python\n    ContentsManager.new in manager line 364 Python\n    ContentsManager.new_untitled in manager line 338    Python\n    ContentsHandler._new_untitled in handlers line 173  Python\n    wrapper in _make_coroutine_wrapper in gen line 212  Python\n```\n\nIn the `FileContentsManager.save` method below is the relevant code portion:\n\n```\n                nb = nbformat.from_dict(model['content'])\n                self.check_and_sign(nb, path)\n                self._save_notebook(os_path, nb)\n                # One checkpoint should always exist for notebooks.\n                if not self.checkpoints.list_checkpoints(path):\n                    self.create_checkpoint(path)\n```\n\nThe `model` is available just couple of lines above, but `FileContentsManager.save()` is not using it in the call to `self.create_checkpoint(path)`. Rather if you observe in the callstack it goes and leads to `GenericCheckpointsMixin.create_checkpoint` which has below code inside it:\n\n```\n    def create_checkpoint(self, contents_mgr, path):\n        model = contents_mgr.get(path, content=True)\n        type = model['type']\n        if type == 'notebook':\n                 ....\n```\n\nIt is trying to retrieve the model again from storage (filesystem/db ...). The get() I was referring to earlier was this: `contents_mgr.get()`\n\nYou are right. I am trying to take advantage of `GenericCheckpointsMixin`.\n\nAs for path, model arguments side-by-side, you may be right about misuse. But then, I am seeing many methods with both 'model and path' parameters already in the code. I might have misread the context, but few methods are: `GenericCheckpointsMixin::create_file_checkpoint(), GenericCheckpointsMixin::create_notebook_checkpoint() etc`\n\nIn fact what is more interesting is, `ContentsManager::save(self, model, path)` itself has both model and path parameters. Again, the context of those parameters and their meaning could be different, but I believe `checkpoint` is so much similar to `save`.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/110885205",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-110885205",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 110885205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMDg4NTIwNQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T19:25:21Z",
    "updated_at": "2015-06-10T19:25:21Z",
    "author_association": "MEMBER",
    "body": "@ssanderson there's no clever filesystem stuff involved in our implementation, as far as I know. We use some Python utilities to copy, but it's still ultimately just opening both files, reading chunks from the source and writing them to the destination.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/112509379",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-112509379",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 112509379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjUwOTM3OQ==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-16T17:39:56Z",
    "updated_at": "2015-06-16T17:39:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@KrishnaPG sorry, I lost track of this issue.  I'll try to write up a proper response tonight.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113173463",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-113173463",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 113173463,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzE3MzQ2Mw==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T14:31:09Z",
    "updated_at": "2015-06-18T14:31:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "> there's no clever filesystem stuff involved in our implementation, as far as I know.  We use some Python utilities to copy, but it's still ultimately just opening both files, reading chunks from the source and writing them to the destination.\n\nI think we just use `shutil.move` or a variant, which means we only ever hold part of the copied file in memory, and (probably more importantly) we don't deserialize or re-serialize the model; we just interpret the file as bytes and move those bytes elsewhere.  \n\nI don't know without profiling whether how the IO cost of re-reading and re-writing the raw file bytes compares to the work of deserializing a model from memory.  Both are probably negligible for average-sized notebooks on a single-user installation.  In a shared context the issue might become more important.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113181706",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-113181706",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 113181706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzE4MTcwNg==",
    "user": {
      "login": "ssanderson",
      "id": 1588357,
      "node_id": "MDQ6VXNlcjE1ODgzNTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1588357?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ssanderson",
      "html_url": "https://github.com/ssanderson",
      "followers_url": "https://api.github.com/users/ssanderson/followers",
      "following_url": "https://api.github.com/users/ssanderson/following{/other_user}",
      "gists_url": "https://api.github.com/users/ssanderson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ssanderson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ssanderson/subscriptions",
      "organizations_url": "https://api.github.com/users/ssanderson/orgs",
      "repos_url": "https://api.github.com/users/ssanderson/repos",
      "events_url": "https://api.github.com/users/ssanderson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ssanderson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T14:49:35Z",
    "updated_at": "2015-06-18T14:49:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@KrishnaPG re-reading through this and https://github.com/jupyter/notebook/issues/142 to make sure I understand the issues raised:\n- w/r/t https://github.com/jupyter/notebook/issues/142, I think adding an `exists` to `Checkpoints` with a default implementation of `return bool(self.list_checkpoints(path))` makes sense.\n- In FileContentsManager's `save()` implementation, we ensure that a checkpoint exists for the the notebook being saved.  In the case that no such notebook exists, we create a new one after saving, which, when using `GenericCheckpointsMixin`, involves reloading a model from our Contents storage engine before sending that model to our Checkpoints storage engine.  In the particular context described, (unlike the one where the user manually creates a checkpoint in the UI), we already have the to-be-saved model in memory, which means that we're doing an extraneous read.  The proposed solution would be to add `model` as a new argument to the `Checkpoints` base class, with a default of `None`, which would change the first couple lines of `GenericCheckpointsMixin.create_checkpoint` from\n\n```\ndef create_checkpoint(self, contents_mgr, path):\n    model = contents_mgr.get(path, content=True)\n    ...\n```\n\nto\n\n```\ndef create_checkpoint(self, contents_mgr, path, model=None):\n   if model is None:\n       model = contents_mgr.get(path, content=True)\n   ...\n```\n\nAll of that seems reasonable to me, though it will be a backwards-incompatible change, since it will only be useful if the snippet from `FileContentsManager.save()` gets changed to:\n\n```\nif not self.checkpoints.list_checkpoints(path):\n    self.create_checkpoint(path, model=model)\n```\n\nwhich will break old `Checkpoints` implementations that don't expect a `model` argument.\n\nThis means that we'd be making a (mild) backwards-incompatible change that adds a small amount of complexity in exchange for possible performance gains in the specific case of running a non-local `Checkpoints` with the default `FileContentsManager`.  I'll leave it up to the Jupyter maintainers whether that's a reasonable change to make.  It'd be relatively little work for me to update pgcontents to work with the proposal here.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113199848",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-113199848",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 113199848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzE5OTg0OA==",
    "user": {
      "login": "KrishnaPG",
      "id": 4610831,
      "node_id": "MDQ6VXNlcjQ2MTA4MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4610831?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/KrishnaPG",
      "html_url": "https://github.com/KrishnaPG",
      "followers_url": "https://api.github.com/users/KrishnaPG/followers",
      "following_url": "https://api.github.com/users/KrishnaPG/following{/other_user}",
      "gists_url": "https://api.github.com/users/KrishnaPG/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/KrishnaPG/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KrishnaPG/subscriptions",
      "organizations_url": "https://api.github.com/users/KrishnaPG/orgs",
      "repos_url": "https://api.github.com/users/KrishnaPG/repos",
      "events_url": "https://api.github.com/users/KrishnaPG/events{/privacy}",
      "received_events_url": "https://api.github.com/users/KrishnaPG/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-18T15:55:02Z",
    "updated_at": "2015-06-18T15:56:50Z",
    "author_association": "NONE",
    "body": "Thanks @ssanderson I agree, and will wait for comments from the maintainers.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113670866",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-113670866",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 113670866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY3MDg2Ng==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-19T23:29:43Z",
    "updated_at": "2015-06-19T23:29:43Z",
    "author_association": "MEMBER",
    "body": "I don't have a strong feeling either way. If we want to add a parameter without breaking backwards compatibility, I have an experimental module [backcall](https://github.com/takluyver/backcall) that exists for precisely that purpose.\n\n@minrk , any preference?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/113682673",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-113682673",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 113682673,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMzY4MjY3Mw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-20T00:11:45Z",
    "updated_at": "2015-06-20T00:11:45Z",
    "author_association": "MEMBER",
    "body": "I think adding the arg is fine, especially with the proposed optional behavior. I don't think custom checkpoint managers are common enough that we need to be too concerned about adding one arg, since it's still easy to write one API that works in both 3 and 4.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/296845408",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-296845408",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 296845408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg0NTQwOA==",
    "user": {
      "login": "JamiesHQ",
      "id": 476301,
      "node_id": "MDQ6VXNlcjQ3NjMwMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/476301?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JamiesHQ",
      "html_url": "https://github.com/JamiesHQ",
      "followers_url": "https://api.github.com/users/JamiesHQ/followers",
      "following_url": "https://api.github.com/users/JamiesHQ/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamiesHQ/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JamiesHQ/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamiesHQ/subscriptions",
      "organizations_url": "https://api.github.com/users/JamiesHQ/orgs",
      "repos_url": "https://api.github.com/users/JamiesHQ/repos",
      "events_url": "https://api.github.com/users/JamiesHQ/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JamiesHQ/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-24T23:00:28Z",
    "updated_at": "2017-04-24T23:00:28Z",
    "author_association": "MEMBER",
    "body": "@gnestor : was this implemented in 5.0? If not, what are the next steps? Thanks!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/296863100",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-296863100",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 296863100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg2MzEwMA==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-25T01:09:06Z",
    "updated_at": "2017-04-25T01:09:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@KrishnaPG Are you interested in submitting a PR for this one?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/348650145",
    "html_url": "https://github.com/jupyter/notebook/issues/143#issuecomment-348650145",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/143",
    "id": 348650145,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODY1MDE0NQ==",
    "user": {
      "login": "gnestor",
      "id": 512354,
      "node_id": "MDQ6VXNlcjUxMjM1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/512354?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnestor",
      "html_url": "https://github.com/gnestor",
      "followers_url": "https://api.github.com/users/gnestor/followers",
      "following_url": "https://api.github.com/users/gnestor/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnestor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnestor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnestor/subscriptions",
      "organizations_url": "https://api.github.com/users/gnestor/orgs",
      "repos_url": "https://api.github.com/users/gnestor/repos",
      "events_url": "https://api.github.com/users/gnestor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnestor/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-02T00:27:49Z",
    "updated_at": "2017-12-02T00:27:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Closing due to inactivity...",
    "performed_via_github_app": null
  }
]
