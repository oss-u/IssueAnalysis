[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/343749426",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-343749426",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 343749426,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc0OTQyNg==",
    "user": {
      "login": "jcb91",
      "id": 5630710,
      "node_id": "MDQ6VXNlcjU2MzA3MTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5630710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jcb91",
      "html_url": "https://github.com/jcb91",
      "followers_url": "https://api.github.com/users/jcb91/followers",
      "following_url": "https://api.github.com/users/jcb91/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcb91/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jcb91/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcb91/subscriptions",
      "organizations_url": "https://api.github.com/users/jcb91/orgs",
      "repos_url": "https://api.github.com/users/jcb91/repos",
      "events_url": "https://api.github.com/users/jcb91/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jcb91/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-12T16:35:37Z",
    "updated_at": "2017-11-12T16:35:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "To clarify a little, what actually *is* the output you're seeing? I guess whatever the pyplot renderer provides? Could you provide an example notebook (e.g. as a gist) that produces the kind of output you'd like to be able to save?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/343751763",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-343751763",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 343751763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0Mzc1MTc2Mw==",
    "user": {
      "login": "dsblank",
      "id": 168568,
      "node_id": "MDQ6VXNlcjE2ODU2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/168568?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dsblank",
      "html_url": "https://github.com/dsblank",
      "followers_url": "https://api.github.com/users/dsblank/followers",
      "following_url": "https://api.github.com/users/dsblank/following{/other_user}",
      "gists_url": "https://api.github.com/users/dsblank/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dsblank/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dsblank/subscriptions",
      "organizations_url": "https://api.github.com/users/dsblank/orgs",
      "repos_url": "https://api.github.com/users/dsblank/repos",
      "events_url": "https://api.github.com/users/dsblank/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dsblank/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-12T17:10:28Z",
    "updated_at": "2017-11-12T17:10:28Z",
    "author_association": "MEMBER",
    "body": "Not sure you could have a general \"save-the-output-of-the-cell-to-a-file\"\nmagic, but specifically you can save any matplotlib plot to a file like\nthis:\n\n            plt.savefig(\"figure.png\")\n\n-Doug\n\nOn Sat, Nov 11, 2017 at 8:10 AM, Brian R. Pauw <notifications@github.com>\nwrote:\n\n> I checked the current issues and could not find a similar request:\n>\n> We would very much like to be able to export the output from a highlighted\n> cell to PDF or PNG or anything, really. Apparently this is possible in\n> Mathematica, but not yet in Jupyter Notebook.\n>\n> The background comes from this: We're able to style Pandas Dataframes to\n> show them just the way we need for our certification reports. However,\n> after that, there is no \"pyplot.savefig\"-like function to store the output\n> thereof in a format that would allow us to include it in other documents.\n>\n> Googling for solutions to such issues brings up a host of stackOverflow\n> semi-answers that offer only a very convoluted way to recreate / rebuild\n> the table somewhere else (using plotly or matplotlib tables). That's a big\n> waste of the effort put into the pandas styler.\n>\n> Since Jupyter already allows you to export the entire notebook, is it\n> possible to implement this on a per-cell basis as well, preferably only the\n> cell output?\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jupyter/notebook/issues/3039>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAKSeM3ZYLGJPQFa0fXr2jmbSbpr0UtNks5s1Zy7gaJpZM4QafFC>\n> .\n>\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/343909664",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-343909664",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 343909664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzkwOTY2NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-13T12:51:28Z",
    "updated_at": "2017-11-13T12:51:28Z",
    "author_association": "MEMBER",
    "body": "You should be able to do something like this:\r\n\r\n```python\r\ndata, metadata = get_ipython().display_formatter.format(obj)\r\nwith open('table.html', 'w') as f:\r\n    f.write(data['text/html'])  # Assuming the object has an HTML representation\r\n```\r\n\r\nThat could be wrapped up in a little utility function.\r\n\r\nFor a pandas DataFrame, it's going to wind up calling `df.to_html()` - you can call that directly to have more control over the options, but the snippet above should work for anything that defines an HTML repesentation.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/344272956",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-344272956",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 344272956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDI3Mjk1Ng==",
    "user": {
      "login": "toqduj",
      "id": 5449929,
      "node_id": "MDQ6VXNlcjU0NDk5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5449929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toqduj",
      "html_url": "https://github.com/toqduj",
      "followers_url": "https://api.github.com/users/toqduj/followers",
      "following_url": "https://api.github.com/users/toqduj/following{/other_user}",
      "gists_url": "https://api.github.com/users/toqduj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toqduj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toqduj/subscriptions",
      "organizations_url": "https://api.github.com/users/toqduj/orgs",
      "repos_url": "https://api.github.com/users/toqduj/repos",
      "events_url": "https://api.github.com/users/toqduj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toqduj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-14T14:20:14Z",
    "updated_at": "2017-11-14T14:20:14Z",
    "author_association": "NONE",
    "body": "Good point. Hang on while I fish out an example... Take, for example this dataFrame with styled formatting:\r\n\r\n```python \r\ninputDict = {\r\n    \"$D_n$\" : [np.pi, np.sqrt(np.pi), 2 * np.sqrt(np.pi)],\r\n    \"$\\sigma_n$\" : 2*[np.pi, np.sqrt(np.pi), 2 * np.sqrt(np.pi)],\r\n    \"$\\phi$\" : 3*[np.pi, np.sqrt(np.pi), 2 * np.sqrt(np.pi)]\r\n}\r\n\r\nHStest = pandas.DataFrame() # we populate the HStest DataFrame with the items in the tuple.\r\n\r\nfor key, item in inputDict.items():\r\n    indata = {\r\n        \"parameter\" : key,\r\n        \"mean\" : item[0],\r\n        \"standard deviation\" : item[1],\r\n        \"expanded standard deviation\" : item[2],\r\n        \"relative expanded standard deviation\" : item[2] / item[0]\r\n    }\r\n    HStest = HStest.append(pandas.DataFrame(data = indata, index = [0]), ignore_index = True)\r\n\r\nHStest.set_index(\"parameter\", inplace = True) \r\n\r\nhs = HStest.loc[:,[  # show the content in this order:\r\n    \"mean\", \r\n    \"standard deviation\", \r\n    \"expanded standard deviation\", \r\n    \"relative expanded standard deviation\"]].style.format(\r\n    {\"mean\": '{:.2e}', # use this style for these columns:\r\n     \"standard deviation\": '{:.2e}', \r\n     \"expanded standard deviation\": '{:.2e}', \r\n     \"relative expanded standard deviation\": \"{:.2%}\"})\r\n```\r\n\r\nIf I display hs, I see the following nicely formatted table:\r\n![screen shot 2017-11-14 at 15 11 19](https://user-images.githubusercontent.com/5449929/32784095-26d8eb00-c94e-11e7-8e20-1457e98aef5f.png)\r\n\r\nHowever, when I export the HTML code that comes out of hs.render(), which is what looks pretty in jupyter notebook, and load that in a separate tab, I only see the following:\r\n\r\n![screen shot 2017-11-14 at 15 13 32](https://user-images.githubusercontent.com/5449929/32784206-7953b2ac-c94e-11e7-8f3a-6cac90cb1aa6.png)\r\n\r\nGone is the nice style sheet, the rendering of the LaTex labels, etc, I only see a shit table with some cruft at the top. There seems to be no way of exporting the look of the table in the JP Notebook together with the table. \r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/344292541",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-344292541",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 344292541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDI5MjU0MQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-14T15:22:13Z",
    "updated_at": "2017-11-14T15:22:13Z",
    "author_association": "MEMBER",
    "body": "The notebook has some default CSS that applies to your output - the bits relating to tables are here:\r\nhttps://github.com/jupyter/notebook/blob/fb4af909a1b5c44e2dad129a5d4834b33f9e6a4b/notebook/static/notebook/less/renderedhtml.less#L77\r\n\r\nThe Latex labels are rendered by a Javascript library called Mathjax.\r\n\r\nYou could probably put the HTML output into nbconvert's HTML template, which loads the notebook's CSS and the Mathjax library, to make something like the output in the notebook.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/344530032",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-344530032",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 344530032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDUzMDAzMg==",
    "user": {
      "login": "toqduj",
      "id": 5449929,
      "node_id": "MDQ6VXNlcjU0NDk5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5449929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toqduj",
      "html_url": "https://github.com/toqduj",
      "followers_url": "https://api.github.com/users/toqduj/followers",
      "following_url": "https://api.github.com/users/toqduj/following{/other_user}",
      "gists_url": "https://api.github.com/users/toqduj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toqduj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toqduj/subscriptions",
      "organizations_url": "https://api.github.com/users/toqduj/orgs",
      "repos_url": "https://api.github.com/users/toqduj/repos",
      "events_url": "https://api.github.com/users/toqduj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toqduj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-15T09:08:43Z",
    "updated_at": "2017-11-15T09:08:43Z",
    "author_association": "NONE",
    "body": "@takluyver So what you're saying is: \"yes, there is no easy way to export the output of a single cell\" :).. However, what you mentioned might be implemented as a strategy to do just that if nbconvert is modified to allow the specification of output cells?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/344548648",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-344548648",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 344548648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDU0ODY0OA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-15T10:19:42Z",
    "updated_at": "2017-11-15T10:19:42Z",
    "author_association": "MEMBER",
    "body": "Yup. I don't think it even needs much modification of nbconvert: you could probably feed it a notebook with one cell which has one output, and use some recently added options to tell it to hide the input part of the cell. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/344684551",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-344684551",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 344684551,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDY4NDU1MQ==",
    "user": {
      "login": "mpacer",
      "id": 2482408,
      "node_id": "MDQ6VXNlcjI0ODI0MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2482408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpacer",
      "html_url": "https://github.com/mpacer",
      "followers_url": "https://api.github.com/users/mpacer/followers",
      "following_url": "https://api.github.com/users/mpacer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpacer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpacer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpacer/subscriptions",
      "organizations_url": "https://api.github.com/users/mpacer/orgs",
      "repos_url": "https://api.github.com/users/mpacer/repos",
      "events_url": "https://api.github.com/users/mpacer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpacer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-15T18:29:26Z",
    "updated_at": "2017-11-15T18:29:26Z",
    "author_association": "MEMBER",
    "body": "In theory one could use tags as an inverse from the current tag removal rules and only include those cells that are tagged. This would mean a new preprocessor, but that's not too much. \r\n\r\n@toqduj if you're interested, I'm going to be on vacation for a while, but you can look at https://github.com/jupyter/nbconvert/blob/master/nbconvert/preprocessors/tagremove.py to get an idea of what would need to be implemented. \r\n\r\nThen it would be a matter of tagging the cells you want and exporting using an appropriate config file.\r\n\r\nIf you want multiple individual cells exported as separate files, you could also make it more complicated and instead of doing it as a single pass operation, create a separate document for each of your tags that you specify as being included. If you wanted only individual cells for this model that would require using a unique tag for each… but that's not impossible. This would probably be implemented as a separate exporter and not included in nbconvert core (though I could be persuaded otherwise). I would use the model we have for handling external output files in the notebook by writing a zip. That would mean that it would work with the eventual nbconvert service that I'm working on (which communicates RESTfully so it can only return a single file).\r\n\r\nThere's also another approach (that works but isn't general enough for nbconvert AFAICT) where you use one tag, and each cell with that tag is exported to a separate document. This would be implemented at the exporter level.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/351436227",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-351436227",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 351436227,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQzNjIyNw==",
    "user": {
      "login": "mortcanty",
      "id": 6293414,
      "node_id": "MDQ6VXNlcjYyOTM0MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6293414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortcanty",
      "html_url": "https://github.com/mortcanty",
      "followers_url": "https://api.github.com/users/mortcanty/followers",
      "following_url": "https://api.github.com/users/mortcanty/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortcanty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortcanty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortcanty/subscriptions",
      "organizations_url": "https://api.github.com/users/mortcanty/orgs",
      "repos_url": "https://api.github.com/users/mortcanty/repos",
      "events_url": "https://api.github.com/users/mortcanty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortcanty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T16:03:06Z",
    "updated_at": "2017-12-13T16:03:06Z",
    "author_association": "NONE",
    "body": "I'm not very familiar with nbconvert but I am writing a textbook in LaTeX which makes many references to individual cells in Jupyter notebooks. I'm resorting to screenshots converted to eps to integrate the cells into the text, not really acceptable. The ability to export a highlighted cell (both input and output) as png or eps would be fantastic. Or any trick with nbconvert which can accomplish something similar?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/351448674",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-351448674",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 351448674,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ0ODY3NA==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-13T16:42:17Z",
    "updated_at": "2017-12-13T16:42:24Z",
    "author_association": "MEMBER",
    "body": "At the moment, probably the most practical approach to that situation is to use nbconvert to convert the whole notebook to latex - `nbconvert --to latex notebook.ipynb` - and then open the result in your editor, and copy the pieces you need into your document.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/351664063",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-351664063",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 351664063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTY2NDA2Mw==",
    "user": {
      "login": "mortcanty",
      "id": 6293414,
      "node_id": "MDQ6VXNlcjYyOTM0MTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6293414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mortcanty",
      "html_url": "https://github.com/mortcanty",
      "followers_url": "https://api.github.com/users/mortcanty/followers",
      "following_url": "https://api.github.com/users/mortcanty/following{/other_user}",
      "gists_url": "https://api.github.com/users/mortcanty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mortcanty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mortcanty/subscriptions",
      "organizations_url": "https://api.github.com/users/mortcanty/orgs",
      "repos_url": "https://api.github.com/users/mortcanty/repos",
      "events_url": "https://api.github.com/users/mortcanty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mortcanty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-14T10:00:21Z",
    "updated_at": "2017-12-14T10:00:21Z",
    "author_association": "NONE",
    "body": "Thanks for the tip. Unfortunately I can't seem to get it to work with \nthe publisher's document style.\n\n\nAm 13.12.2017 um 17:42 schrieb Thomas Kluyver:\n>\n> At the moment, probably the most practical approach to that solution \n> is to use nbconvert to convert the whole notebook to latex - \n> |nbconvert --to latex notebook.ipynb| - and then open the result in \n> your editor, and copy the pieces you need into your document.\n>\n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub \n> <https://github.com/jupyter/notebook/issues/3039#issuecomment-351448674>, \n> or mute the thread \n> <https://github.com/notifications/unsubscribe-auth/AGAHpjQL5yVRki1Bw8t-O4g62IOEhpa7ks5s__5ugaJpZM4QafFC>.\n>\n\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/353025446",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-353025446",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 353025446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAyNTQ0Ng==",
    "user": {
      "login": "toqduj",
      "id": 5449929,
      "node_id": "MDQ6VXNlcjU0NDk5Mjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5449929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toqduj",
      "html_url": "https://github.com/toqduj",
      "followers_url": "https://api.github.com/users/toqduj/followers",
      "following_url": "https://api.github.com/users/toqduj/following{/other_user}",
      "gists_url": "https://api.github.com/users/toqduj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toqduj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toqduj/subscriptions",
      "organizations_url": "https://api.github.com/users/toqduj/orgs",
      "repos_url": "https://api.github.com/users/toqduj/repos",
      "events_url": "https://api.github.com/users/toqduj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toqduj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-20T10:26:32Z",
    "updated_at": "2017-12-20T10:26:32Z",
    "author_association": "NONE",
    "body": "Screenshots and manual edits of jupyter notebooks are not really suitable for our purpose: the production of reference material certification documents with easily updated graphics for the statistical evaluation. \r\n\r\nOne solution that could make sense is that by @mpacer. While it's still not easy to do automatically, at least the graphics won't shift from one to the other, and the nice formatting of the styler wouldn't be lost...",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/416055020",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-416055020",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 416055020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjA1NTAyMA==",
    "user": {
      "login": "matanster",
      "id": 4996067,
      "node_id": "MDQ6VXNlcjQ5OTYwNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4996067?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matanster",
      "html_url": "https://github.com/matanster",
      "followers_url": "https://api.github.com/users/matanster/followers",
      "following_url": "https://api.github.com/users/matanster/following{/other_user}",
      "gists_url": "https://api.github.com/users/matanster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matanster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matanster/subscriptions",
      "organizations_url": "https://api.github.com/users/matanster/orgs",
      "repos_url": "https://api.github.com/users/matanster/repos",
      "events_url": "https://api.github.com/users/matanster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matanster/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-26T17:32:11Z",
    "updated_at": "2018-08-27T18:41:51Z",
    "author_association": "NONE",
    "body": "I humbly think that programmatically exporting pieces of a notebook to HTML (maybe other formats as well don't know) can be extra helpful, for making data available to peers that do not care about code or intermediary results on some cells. Ideally, exporting to a viewer that has different tabs, because people not used to Jupyter aren't comfortable with one long scroll. How to avoid developing too much of this to keep this feature suggestion healthy is more of an art, but this can help in regularly disseminating notebook generated data without all the fuss. \r\n\r\nHappy to hear what other people think, and/or existing ways this can be accomplished..",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/467520455",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-467520455",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 467520455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzUyMDQ1NQ==",
    "user": {
      "login": "psychemedia",
      "id": 82988,
      "node_id": "MDQ6VXNlcjgyOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/psychemedia",
      "html_url": "https://github.com/psychemedia",
      "followers_url": "https://api.github.com/users/psychemedia/followers",
      "following_url": "https://api.github.com/users/psychemedia/following{/other_user}",
      "gists_url": "https://api.github.com/users/psychemedia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/psychemedia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/psychemedia/subscriptions",
      "organizations_url": "https://api.github.com/users/psychemedia/orgs",
      "repos_url": "https://api.github.com/users/psychemedia/repos",
      "events_url": "https://api.github.com/users/psychemedia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/psychemedia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-26T16:55:37Z",
    "updated_at": "2019-02-26T17:00:24Z",
    "author_association": "NONE",
    "body": "I started looking at ways of grabbing formatted *pandas* HTML tables into a png [here](https://blog.ouseful.info/2019/01/16/converting-pandas-generated-html-data-tables-to-png-images/). It's not very convenient though — it requires *selenium* automation, for a start.\r\n\r\n```python\r\nimport os\r\nimport time\r\nfrom selenium import webdriver\r\n \r\n#Via https://stackoverflow.com/a/52572919/454773\r\ndef setup_screenshot(driver,path):\r\n    ''' Grab screenshot of browser rendered HTML.\r\n        Ensure the browser is sized to display all the HTML content. '''\r\n    # Ref: https://stackoverflow.com/a/52572919/\r\n    original_size = driver.get_window_size()\r\n    required_width = driver.execute_script('return document.body.parentNode.scrollWidth')\r\n    required_height = driver.execute_script('return document.body.parentNode.scrollHeight')\r\n    driver.set_window_size(required_width, required_height)\r\n    # driver.save_screenshot(path)  # has scrollbar\r\n    driver.find_element_by_tag_name('body').screenshot(path)  # avoids scrollbar\r\n    driver.set_window_size(original_size['width'], original_size['height'])\r\n \r\ndef getTableImage(url, fn='dummy_table', basepath='.', path='.', delay=5, height=420, width=800):\r\n    ''' Render HTML file in browser and grab a screenshot. '''\r\n    browser = webdriver.Chrome()\r\n \r\n    browser.get(url)\r\n    #Give the html some time to load\r\n    time.sleep(delay)\r\n    imgpath='{}/{}.png'.format(path,fn)\r\n    imgfn = '{}/{}'.format(basepath, imgpath)\r\n    imgfile = '{}/{}'.format(os.getcwd(),imgfn)\r\n \r\n    setup_screenshot(browser,imgfile)\r\n    browser.quit()\r\n    os.remove(imgfile.replace('.png','.html'))\r\n    #print(imgfn)\r\n    return imgpath\r\n \r\ndef getTablePNG(tablehtml, basepath='.', path='testpng', fnstub='testhtml'):\r\n    ''' Save HTML table as: {basepath}/{path}/{fnstub}.png '''\r\n    if not os.path.exists(path):\r\n        os.makedirs('{}/{}'.format(basepath, path))\r\n    fn='{cwd}/{basepath}/{path}/{fn}.html'.format(cwd=os.getcwd(), basepath=basepath, path=path,fn=fnstub)\r\n    tmpurl='file://{fn}'.format(fn=fn)\r\n    with open(fn, 'w') as out:\r\n        out.write(tablehtml)\r\n    return getTableImage(tmpurl, fnstub, basepath, path)\r\n \r\n#call as: getTablePNG(s)\r\n#where s is a string containing html, eg s = df.style.render()\r\n```\r\n\r\n\r\nHowever, I did start looking around for lighter Javascript only solutions ([fragmentary notes](https://blog.ouseful.info/2019/02/17/so-how-do-i-export-styled-pandas-tables-from-a-jupyter-notebook-as-a-png-or-pdf-file/)) which might provide a better starting point? For example:\r\n\r\n- [HTML2Canvas](https://html2canvas.hertzen.com/), which allows you to take “[s]creenshots with JavaScript” and export them as PNG files;\r\n- [TableExport](https://tableexport.v5.travismclarke.com/#tableexport), which seems to work with `jspdf` (“the leading HTML5 client solution for generating PDFs”) and `jsPDF-AutoTable` (a “jsPDF plugin for generating PDF tables with javascript”) to allow you to export an HTML table as a PDF.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/508821059",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-508821059",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 508821059,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODgyMTA1OQ==",
    "user": {
      "login": "wesinator",
      "id": 5124946,
      "node_id": "MDQ6VXNlcjUxMjQ5NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5124946?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesinator",
      "html_url": "https://github.com/wesinator",
      "followers_url": "https://api.github.com/users/wesinator/followers",
      "following_url": "https://api.github.com/users/wesinator/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesinator/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesinator/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesinator/subscriptions",
      "organizations_url": "https://api.github.com/users/wesinator/orgs",
      "repos_url": "https://api.github.com/users/wesinator/repos",
      "events_url": "https://api.github.com/users/wesinator/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesinator/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-05T17:24:04Z",
    "updated_at": "2019-07-05T17:24:04Z",
    "author_association": "NONE",
    "body": "Would also be useful to have a menu item to export cell code to a separate Python file. \r\nSo users don't have to manually copy and paste into a text editor\r\n\r\nShould this be filed as a new issue ?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/508842401",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-508842401",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 508842401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg0MjQwMQ==",
    "user": {
      "login": "psychemedia",
      "id": 82988,
      "node_id": "MDQ6VXNlcjgyOTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/82988?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/psychemedia",
      "html_url": "https://github.com/psychemedia",
      "followers_url": "https://api.github.com/users/psychemedia/followers",
      "following_url": "https://api.github.com/users/psychemedia/following{/other_user}",
      "gists_url": "https://api.github.com/users/psychemedia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/psychemedia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/psychemedia/subscriptions",
      "organizations_url": "https://api.github.com/users/psychemedia/orgs",
      "repos_url": "https://api.github.com/users/psychemedia/repos",
      "events_url": "https://api.github.com/users/psychemedia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/psychemedia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-07-05T19:12:05Z",
    "updated_at": "2019-07-05T19:12:28Z",
    "author_association": "NONE",
    "body": "In passing, I note this repo that appeared recently, but I've not had a chance to see what it actually does yet...\r\n\r\n- https://github.com/EricMende/jupyter_singleton: *jupyter-singleton is a wrapper for the jupyter notebook that allows using output cells from outside of the jupyter notebook environment.*",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/583443453",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-583443453",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 583443453,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MzQ0MzQ1Mw==",
    "user": {
      "login": "als0052",
      "id": 43427976,
      "node_id": "MDQ6VXNlcjQzNDI3OTc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/43427976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/als0052",
      "html_url": "https://github.com/als0052",
      "followers_url": "https://api.github.com/users/als0052/followers",
      "following_url": "https://api.github.com/users/als0052/following{/other_user}",
      "gists_url": "https://api.github.com/users/als0052/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/als0052/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/als0052/subscriptions",
      "organizations_url": "https://api.github.com/users/als0052/orgs",
      "repos_url": "https://api.github.com/users/als0052/repos",
      "events_url": "https://api.github.com/users/als0052/events{/privacy}",
      "received_events_url": "https://api.github.com/users/als0052/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-07T15:10:45Z",
    "updated_at": "2020-02-07T15:10:45Z",
    "author_association": "NONE",
    "body": "Just as a note for anyone who finds this after Jan. 2020, the Pandas API has added new features in version 1.0.0 to export to markdown tables. I haven't tried it but it sounds like it could be a workaround to OP's application. \r\n\r\nThat being said, I'd also like the ability to select a single cell in a notebook and export it as .tex. Currently I'm combing through a full exported .tex notebook to pick out the cells I want. At the very least it'd be nice to export an in cell and out cell as an image. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/583860159",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-583860159",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 583860159,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Mzg2MDE1OQ==",
    "user": {
      "login": "TomNicholas",
      "id": 35968931,
      "node_id": "MDQ6VXNlcjM1OTY4OTMx",
      "avatar_url": "https://avatars.githubusercontent.com/u/35968931?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomNicholas",
      "html_url": "https://github.com/TomNicholas",
      "followers_url": "https://api.github.com/users/TomNicholas/followers",
      "following_url": "https://api.github.com/users/TomNicholas/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomNicholas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomNicholas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomNicholas/subscriptions",
      "organizations_url": "https://api.github.com/users/TomNicholas/orgs",
      "repos_url": "https://api.github.com/users/TomNicholas/repos",
      "events_url": "https://api.github.com/users/TomNicholas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomNicholas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-09T15:51:39Z",
    "updated_at": "2020-02-09T16:07:48Z",
    "author_association": "NONE",
    "body": "I also think that easily saving the output of a single cell (as png/html) would be a useful feature. I think some people here are suggesting a new cell magic, while others are talking about a notebook button or right-click option?\r\n\r\nAs you said @takluyver you can do the former with `nbconvert`, but is the best way really to run nbconvert on the entire current notebook from within the notebook? This requires getting the name of the current notebook (already a [bit of a hack](https://stackoverflow.com/questions/12544056/how-do-i-get-the-current-ipython-jupyter-notebook-name) apparently), and then running nbconvert on that file, but it seems circuitous. Also would there be problems if the notebook hasn't been saved? And what if the notebook is password-protected?\r\n\r\nMight there be a better way to access the cell output using the `%%capture` cell magic or something? Then wrap it up to make a new `%%save_output` cell magic maybe?\r\n\r\nI can use `%%capture` to save the png output of my cell in a rudimentary way, but that also suppresses the output of the cell, which I don't want to do, and you can only access the output in a later cell:\r\n\r\n```python\r\n[1]: # setup\r\n...  %matplotlib inline\r\n...  import xarray as xr\r\n...  ds = xr.tutorial.open_dataset('air_temperature')\r\n...  da = ds['air']\r\n...  da = da.sel(time='2014-12-31T18:00:00')\r\n\r\n[2]: %%capture out\r\n...  da.plot()\r\n\r\n[3]: f = open('./output', 'wb')\r\n...  f.write(out.outputs[1].data['image/png'])\r\n...  f.close()\r\n```\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/757591825",
    "html_url": "https://github.com/jupyter/notebook/issues/3039#issuecomment-757591825",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3039",
    "id": 757591825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzU5MTgyNQ==",
    "user": {
      "login": "jpjpjp",
      "id": 4774656,
      "node_id": "MDQ6VXNlcjQ3NzQ2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4774656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jpjpjp",
      "html_url": "https://github.com/jpjpjp",
      "followers_url": "https://api.github.com/users/jpjpjp/followers",
      "following_url": "https://api.github.com/users/jpjpjp/following{/other_user}",
      "gists_url": "https://api.github.com/users/jpjpjp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jpjpjp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jpjpjp/subscriptions",
      "organizations_url": "https://api.github.com/users/jpjpjp/orgs",
      "repos_url": "https://api.github.com/users/jpjpjp/repos",
      "events_url": "https://api.github.com/users/jpjpjp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jpjpjp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-11T02:19:56Z",
    "updated_at": "2021-01-11T02:19:56Z",
    "author_association": "NONE",
    "body": "I read this whole thread...and ended up taking a screenshot and using that as the PNG.   Won't work when there is more than a screenful of output, but....",
    "performed_via_github_app": null
  }
]
