[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/498407863",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-498407863",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 498407863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODQwNzg2Mw==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-03T20:11:33Z",
    "updated_at": "2019-06-03T20:11:33Z",
    "author_association": "MEMBER",
    "body": "Besides removing a bunch of server specific configuration+modules, [this chunk of logic is the biggest change](https://github.com/Zsailer/notebook/blob/1a791784dc9a561936961d97a21621ac3558b731/notebook/notebookapp.py#L351-L442). It uses the patterns defined by the `ExtensionApp` to make the `NotebookApp` an extension.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499268958",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499268958",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499268958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTI2ODk1OA==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-05T21:51:00Z",
    "updated_at": "2019-06-05T21:51:00Z",
    "author_association": "MEMBER",
    "body": "Also pinging @rgbkrk, @willingc, @ellisonbg, @jasongrout, @minrk, and @ivanov ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499803558",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499803558",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499803558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTgwMzU1OA==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T08:32:32Z",
    "updated_at": "2019-06-07T08:34:10Z",
    "author_association": "NONE",
    "body": "Can you list (or link to) the commands to install and test this (which jupyter_server branch, how to enable this server extension, how to start the server with the notebook extension...)? thx.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499826307",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499826307",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499826307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTgyNjMwNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T09:50:38Z",
    "updated_at": "2019-06-07T09:50:38Z",
    "author_association": "MEMBER",
    "body": "I thought the plan for this was to do this in a separate package, rather than making notebook itself an extension?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499873193",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499873193",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499873193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTg3MzE5Mw==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T12:53:26Z",
    "updated_at": "2019-06-07T12:53:56Z",
    "author_association": "NONE",
    "body": "@minrk You mean leaving this `notebook` repo as-it-is and creating a separated repo like `jupyter_server_notebook` (or `jupyter_notebook`, expect confusions...) which would contain the extension to `jupyter_server`?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499889889",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499889889",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499889889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTg4OTg4OQ==",
    "user": {
      "login": "rolweber",
      "id": 12234414,
      "node_id": "MDQ6VXNlcjEyMjM0NDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12234414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolweber",
      "html_url": "https://github.com/rolweber",
      "followers_url": "https://api.github.com/users/rolweber/followers",
      "following_url": "https://api.github.com/users/rolweber/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolweber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolweber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolweber/subscriptions",
      "organizations_url": "https://api.github.com/users/rolweber/orgs",
      "repos_url": "https://api.github.com/users/rolweber/repos",
      "events_url": "https://api.github.com/users/rolweber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolweber/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T13:43:29Z",
    "updated_at": "2019-06-07T13:43:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "At the moment, this PR should be considered a Proof of Concept. It shows that Notebook _could_ build on Jupyter Server and thereby get rid of a bunch of files that currently need to be maintained. But Jupyter Server itself is undergoing changes, and we'll need a few releases to get it solid and stable. So actually merging this PR _now_ would be a bad idea.\r\n\r\nDuring the Jupyter Server Workshop in May, we talked about Notebook and how it could use Jupyter Server. The general feeling was that we should move forward with Jupyter Server, and leave it up to the Notebook maintainers whether they eventually want to build on it, or whether they prefer to keep the original backend implementation that's already here.\r\n\r\nTo the other participants of the workshop: Please correct me if I got that wrong :-)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499898129",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499898129",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499898129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTg5ODEyOQ==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T14:06:00Z",
    "updated_at": "2019-06-07T14:08:42Z",
    "author_association": "NONE",
    "body": "> The general feeling was that we should move forward with Jupyter Server, and leave it up to the Notebook maintainers whether they eventually want to build on it\r\n\r\nIt is true that jupyter_server can not `force` notebook to migrate, but to keep the community strong and self-reinforced, it can be good to have a consensus on where things are going.\r\n\r\nSpeaking for me, I have spent those last days trying to anticipate the near- and middle- future of jupyter landscape to know on which layer I should build and what I could expect from it.\r\n\r\nSo why not trying to formalize the expected future landscape? My understanding from the reading so far is a ideal target architecture such as the following (the names are `repositories`). Whether notebook embraces that kind of architecture is solely the notebook core maintainers decision.\r\n\r\n```\r\njupyterlab <--- jupyterlab_server <---+\r\n                                       |\r\n                                       +<---  jupyter_server\r\n                                       |\r\nnotebook <----------------------------+\r\n(ui + handlers extensions)\r\n```\r\n\r\n(or)\r\n\r\n```\r\njupyterlab <--- jupyterlab_server <---+\r\n                                       |\r\n                                       +<---  jupyter_server\r\n                                       |\r\nnotebook <--- jupyter_notebook <-------+\r\n(ui)          (handlers extensions)\r\n```\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499916747",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499916747",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499916747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTkxNjc0Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T14:54:32Z",
    "updated_at": "2019-06-07T14:54:32Z",
    "author_association": "MEMBER",
    "body": "> The general feeling was that we should move forward with Jupyter Server, and leave it up to the Notebook maintainers whether they eventually want to build on it\r\n\r\nYes, absolutely! I 100% agree that jupyter-server should happen and ought to be the future default. To me, it's just a question of whether this repo solidifies as the previous generation to be replaced by the next generation, or continues to be updated in active, backward-incompatible development.\r\n\r\n> You mean leaving this notebook repo as-it-is and creating a separated repo like jupyter_server_notebook\r\n\r\nYes, that's been my understanding of the plan.\r\n\r\n> So why not trying to formalize the expected future landscape? \r\n> My understanding from the reading so far is a ideal target architecture such as the following...\r\n\r\nGreat idea! For me, it looks like this:\r\n\r\n```\r\njupyterlab <--- jupyterlab_server <----+\r\n                                       |\r\n                                       +<---  jupyter_server\r\n                                       |\r\nnbclassic <----------------------------+\r\n(ui + handlers extensions)\r\n\r\n\r\nnotebook (as-is, independent, no longer in development)\r\n```\r\n\r\nwhich is exactly as you have it, just with a fork of `notebook` called `nbclassic` (or whatever) that builds on jupyter_server instead of updating this repo in-place. This makes the new backward-incompatible structure opt-in by being a new package, and communicates more clearly that it's a major change that might require updating by extension developers, etc.. It also should significantly improve the maintainability of all packages involved, I think. It also allows the `notebook` repo that bundles server and client features to more easily enter into a strict maintenance mode, which we haven't managed to enforce, I think mostly because the successors haven't been ready for replacement.\r\n\r\nThat doesn't necessarily mean we shouldn't update this repo, but it tips the scales for me. I think making this change here would mean that we need members of the jupyter-server team to commit to being active maintainers on this repo, though, to keep up with the new efforts.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/499950111",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-499950111",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 499950111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5OTk1MDExMQ==",
    "user": {
      "login": "willingc",
      "id": 2680980,
      "node_id": "MDQ6VXNlcjI2ODA5ODA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2680980?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willingc",
      "html_url": "https://github.com/willingc",
      "followers_url": "https://api.github.com/users/willingc/followers",
      "following_url": "https://api.github.com/users/willingc/following{/other_user}",
      "gists_url": "https://api.github.com/users/willingc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willingc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willingc/subscriptions",
      "organizations_url": "https://api.github.com/users/willingc/orgs",
      "repos_url": "https://api.github.com/users/willingc/repos",
      "events_url": "https://api.github.com/users/willingc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willingc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T16:24:12Z",
    "updated_at": "2019-06-07T16:24:12Z",
    "author_association": "MEMBER",
    "body": "@minrk's suggestion makes good sense. nbclassic would be much easier to maintain and will be less likely to confuse existing notebook users since the new issues related to this development would be on a new repo.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500002605",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500002605",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500002605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDAwMjYwNQ==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T19:02:45Z",
    "updated_at": "2019-06-07T19:02:45Z",
    "author_association": "MEMBER",
    "body": "Wow, thank you everyone for the feedback. \r\n\r\n> @rolweber At the moment, this PR should be considered a Proof of Concept\r\n\r\nYes, this really is a proof of concept. I wanted to demonstrate how this *could* affect the notebook. If we decide to go in the direction of creating a fork `nbclassic` (or whatever name choose), this PR would just port over there. \r\n\r\n> @echarles but to keep the community strong and self-reinforced, it can be good to have a consensus on where things are going.\r\n\r\nAbsolutely. And I don't want to add confusion while we're moving towards some sort of consensus. This requires lots of discussion. As @rolweber said, this is a proof of concept.\r\n\r\n> @minrk whether this repo solidifies as the previous generation to be replaced by the next generation, or continues to be updated in active, backward-incompatible development. \r\n\r\nThis is the crux. @minrk, thanks for clearly articulating previous discussion about splitting repos. It makes a lot of sense to me. I *do* think its going to require that we strongly enforce the end of `notebook`, and I **don't think** that will be easy. `notebook` is an iconic repo name, and I'd bet most contributors will go there first to contribute.\r\n\r\nI also want to mention another common pattern I've seen from end users:\r\n\r\nMany end users launch JupyterLab (or nteract, voila, etc.) side-by-side with `notebook`. This won't be possible with `notebook` anymore (under the `nbclassic` case). We will have to explain to users that they have to install another \"classic notebook\" project in parallel that works with this thing called `jupyter_server`. Yes, it's opt-in, but it's still *very* confusing to an end user. \r\n\r\nMy hope was that we could keep the `notebook` repo as the \"supported notebook client\", and make the jupyter_server split go unnoticed. It would be a major release of the notebook. Users update and the server gets installed as a dependency. Everything just works after that. Users won't realize notebook switched to using jupyter_server. Is this too ambitious? 😃 I realize this is backwards incompatible, but can we address most of those issues with shims or something like that? \r\n\r\n(Also, realize that wasn't around for the last [Big Split](https://blog.jupyter.org/the-big-split-9d7b88a031a7), so I'm speaking out of total ignorance here 😆) \r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500058996",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500058996",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500058996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDA1ODk5Ng==",
    "user": {
      "login": "SylvainCorlay",
      "id": 2397974,
      "node_id": "MDQ6VXNlcjIzOTc5NzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2397974?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SylvainCorlay",
      "html_url": "https://github.com/SylvainCorlay",
      "followers_url": "https://api.github.com/users/SylvainCorlay/followers",
      "following_url": "https://api.github.com/users/SylvainCorlay/following{/other_user}",
      "gists_url": "https://api.github.com/users/SylvainCorlay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SylvainCorlay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SylvainCorlay/subscriptions",
      "organizations_url": "https://api.github.com/users/SylvainCorlay/orgs",
      "repos_url": "https://api.github.com/users/SylvainCorlay/repos",
      "events_url": "https://api.github.com/users/SylvainCorlay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SylvainCorlay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-07T22:29:39Z",
    "updated_at": "2019-06-07T22:29:39Z",
    "author_association": "MEMBER",
    "body": "> ```\r\n> notebook (as-is, independent, no longer in development)\r\n> ```\r\n>\r\n\r\nThis may make things a bit complicated for the case of server extensions that want to support both the notebook server and jupyter server.\r\n\r\nFor example, the jupytext server extensions checks for actual types with e.g. `issubclass(app.contents_manager_class, TextFileContentsManager)`... But depending on which version of `TextFileContentsManager` is imported it may be true or not....",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500093257",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500093257",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500093257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDA5MzI1Nw==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-08T04:28:46Z",
    "updated_at": "2019-06-08T04:38:06Z",
    "author_association": "NONE",
    "body": "> @Zsailer My hope was that we could keep the notebook repo as the \"supported notebook client\", and make the jupyter_server split go unnoticed.\r\n\r\nThere is a huge risk to have unexpected side effects (even with extensive test and validation), resulting in user confidence lost and developer burden.\r\n\r\n> @SylvainCorlay But depending on which version of TextFileContentsManager is imported it may be true or not....\r\n\r\nThis is why leaving the current notebook repo as-it-is is is the only way to avoid breaking other things. Should we build a `nbclassic` not 100% backward compatible? Who will use i?\r\n\r\nMaking `nbclassic` 100% compatible may still be possible providing proxy handlers (I believe). Existing configuration `jupyter_notebook_conf.py`  backwards compatibility should anyway also be ensured.\r\n\r\n> @Zsailer I do think its going to require that we strongly enforce the end of notebook, and I don't think that will be easy.\r\n\r\nOn a technical level, we can make notebook an extension. But if we think that finally this would give more trouble than benefit, and easy way to go forward is to concentrate on the new repos and simply plan maintenance and EOL of notebook in favor of the new stuff.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500619568",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500619568",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500619568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDYxOTU2OA==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-10T22:36:20Z",
    "updated_at": "2019-06-10T22:43:31Z",
    "author_association": "MEMBER",
    "body": "Ok, here is a summary of the two ways forward (feel free to suggest more points if I left anything out). \r\n\r\n1. We fork `jupyter/notebook` to `jupyter/notebook_classic` (or whatever we want to name it). \r\n    * Two Notebook-based repos would exist.\r\n        * `notebook_classic` becomes an extension of jupyter_server. \r\n        * `notebook` continues to provide it's own notebook server.\r\n    * jupyter_server will evolve while `notebooks` server will not; eventually, `notebook` will reach EOL.\r\n    * `notebook` and `jupyter_server` become incompatible; users must install `notebook_classic` to have a Notebook interface on top of jupyter_server. \r\n    * If users want a classic notebook interface *next to* Jupyter Lab, nteract_on_jupyter, Voila, etc., they have to use `notebook_classic`. \r\n    * We (Jupyter devs) have to keep `notebook` and `notebook_classic` in sync manually.\r\n    * `notebook` is backwards compatible; `classic_notebook` is forwards-compatible and backward-incompatible.\r\n\r\n2. We refactor `jupyter/notebook` (inplace) to become a jupyter_server extension.\r\n    * A single Notebook repo would exist (`notebook`).\r\n    * The old `notebook` server would go away; jupyter_server becomes a dependency.\r\n    * Less confusing for maintainers and contributors.\r\n    * Users run `notebook` *next to* Jupyter Lab, nteract_on_jupyter, Voila, etc. (no extra install is needed.)\r\n    * `notebook` becomes backwards incompatible (many traits change class names); may be risky for users? Will need extensive testing.\r\n\r\nI'd love to make a decision on this, so we can move forward. I'm happy with either outcome; I'm more interested in progressing the jupyter_server. \r\n\r\nIf we decide to make a `notebook_classic` (or `nbclassic`) repo, we need to propose it to the steering council and ask them to create the repo under the jupyter github org. \r\n\r\n### Let's vote with emojis here :)\r\n🚀 = Option 1\r\n👀 = Option 2",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500726155",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500726155",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500726155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDcyNjE1NQ==",
    "user": {
      "login": "rolweber",
      "id": 12234414,
      "node_id": "MDQ6VXNlcjEyMjM0NDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12234414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolweber",
      "html_url": "https://github.com/rolweber",
      "followers_url": "https://api.github.com/users/rolweber/followers",
      "following_url": "https://api.github.com/users/rolweber/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolweber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolweber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolweber/subscriptions",
      "organizations_url": "https://api.github.com/users/rolweber/orgs",
      "repos_url": "https://api.github.com/users/rolweber/repos",
      "events_url": "https://api.github.com/users/rolweber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolweber/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T07:42:52Z",
    "updated_at": "2019-06-11T07:42:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I still don't see what a second repo achieves, that a separate branch in this repo couldn't.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500752765",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500752765",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500752765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDc1Mjc2NQ==",
    "user": {
      "login": "lresende",
      "id": 382917,
      "node_id": "MDQ6VXNlcjM4MjkxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/382917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lresende",
      "html_url": "https://github.com/lresende",
      "followers_url": "https://api.github.com/users/lresende/followers",
      "following_url": "https://api.github.com/users/lresende/following{/other_user}",
      "gists_url": "https://api.github.com/users/lresende/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lresende/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lresende/subscriptions",
      "organizations_url": "https://api.github.com/users/lresende/orgs",
      "repos_url": "https://api.github.com/users/lresende/repos",
      "events_url": "https://api.github.com/users/lresende/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lresende/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T08:59:34Z",
    "updated_at": "2019-06-11T09:00:15Z",
    "author_association": "MEMBER",
    "body": "> I still don't see what a second repo achieves, that a separate branch in this repo couldn't.\r\n\r\nSame here. I believe that the best option, and even to avoid confusion, is to have one repository for `notebook`. As the split will be a new major release, we can treat this as Python 2.x support, where if you want the fully monolithic Notebook + Server in one package use NB5.x otherwise use NB6.x or whatever release number we decide to have. \r\n\r\nIf we decide to have two notebook repositories, I believe that this will cause confusion, and will make things harder to maintain as we will have to try to keep fixes in sync (e.g. security, and blocker issues) between jupyter_server and this other repository. \r\n\r\nAs for issues, where users might come and create an issue in one of the new clients, where it actually belong to the server, Github now offers a way to[ transfer issues between repositories](https://help.github.com/en/articles/transferring-an-issue-to-another-repository) and we should leverage that. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/500858520",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-500858520",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 500858520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDg1ODUyMA==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T14:09:34Z",
    "updated_at": "2019-06-11T14:09:34Z",
    "author_association": "MEMBER",
    "body": "When I read the two options, this from Option 2 struck me as a no-brainer against it...\r\n\r\n> - The old `notebook` server would go away; jupyter_server becomes a dependency.\r\n\r\nI took this to mean a hard cutover, which I oppose.\r\n\r\nMy brain still has not baked in the power of git and branching, etc.  That said, I believe having two repos is actually less confusing, particularly to our users (and potential contributors).  It creates a clear line of demarcation.  I also believe docs will be confusing if we use a shared repo since the primary linked docs equate to \"stable\" - so I'd be confused immediately.  Is that 'master' or '5.x'?  And what is 'master' - NotebookClassic or NotebookAll?\r\n\r\nRegarding security or blocking issues, these are always 'all hands on deck' events and the community will make the necessary changes - whether that's in multiple branches or multiple repos.  Those events are infrequent.\r\n\r\nGiven we're entering a world of a physically separate (and somewhat hidden) server, there will be a myriad of server issues opened against the various front-ends (much like kernel-specific issues in Notebook).  However, if we used a shared repo, we cannot (potentially) forward Notebook issues to jupyter_server until we're absolutely sure which notebook \"client\" they're opened against.  If the \"clients\" are visibly different entities, I believe that problem will be less severe since notebook-related issues will tend to land in the correct repo.  In short, having a single repo will always require further qualification - which won't necessarily be easy for users to determine.\r\n\r\n\r\nOther naming ideas for the Notebook classic front-end ... NotebookFE, NotebookClient.  Of these, I prefer NotebookFE since it seems less ambiguous and kind of new sounding. \r\n\r\nI also want to give a shout out to @Zsailer for driving this effort - thank you!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/501013002",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-501013002",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 501013002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTAxMzAwMg==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-11T20:36:52Z",
    "updated_at": "2019-06-11T20:36:52Z",
    "author_association": "MEMBER",
    "body": "Thanks, @kevin-bates :) \r\n\r\nIt looks like we still haven't reached consensus so far.\r\n\r\nWe may need to pose this dilemma to a broader audience. I don't think this issue is getting a lot of traffic outside of us. Maybe we post in discourse and the mailing list? \r\n\r\nThe challenging thing here is that this is a deeply technical question that affects a large number of **less-technical** users. We want them to vote and be informed about the consequences without overwhelming them with the details. I'm not sure how to do that effectively. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/501658392",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-501658392",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 501658392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTY1ODM5Mg==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T11:10:40Z",
    "updated_at": "2019-06-13T11:10:40Z",
    "author_association": "MEMBER",
    "body": "> I still don't see what a second repo achieves, that a separate branch in this repo couldn't.\r\n\r\nBranch vs repo doesn't make a huge difference, the main question is whether this *package* is changed in a major, backward-incompatible way, or kept stable. If the branch created a different package, it would be the same as making a new repo, but I think more confusing because now one repo contains the code for two packages.\r\n\r\nThe main question is whether we want to bring existing folks using the `notebook` package into the new way of doing things (including forcing upgrades as dependencies/apis change), vs letting them stay with the 'old' way until they opt-in to the new way by installing `nbclassic` (or just `jupyterlab`) instead. From a code standpoint, there isn't really a difference. Just what things are called, and the upgrade path for users / maintenance strategy for us.\r\n\r\nSome corrections for @Zsailer's summary (thanks for driving this!):\r\n\r\n> notebook and jupyter_server become incompatible\r\n\r\nI would say they are *independent*. You can definitely have both installed at the same time, they just wouldn't interact with each other. To be clear, only the fork approach allows one env to have the new way and the old way present at the same time.\r\n\r\n> If users want a classic notebook interface next to Jupyter Lab, nteract_on_jupyter, Voila, etc., they have to use notebook_classic.\r\n\r\nTo be precise, this is for a single running server with multiple frontends, not an environment. Having `notebook` in the same environment would be AOK, but if you want to launch one server with multiple frontends available at the same time, that would be `notebook-classic` for the classic frontend.\r\n\r\n> We (Jupyter devs) have to keep notebook and notebook_classic in sync manually.\r\n\r\nYes, though I think a contingent for this proposal is that the `notebook` package *does not* move forward. It is semi-frozen and never receives new features, only security updates. If the `notebook` package is to be actively developed, I think we should *not* go for the fork; that's only if we want to continue with the idea of the classic notebook being in a \"maintenance mode\".\r\n\r\nTo me, the big question is: **is the legacy notebook package actively maintained and continuing to make backward-incompatible changes or in a 'maintenance mode' with developer resources focused elsewhere**. If this repo becomes active again (it is not right now) by making these huge changes in-place, then the easiest way forward is to make notebook depend on jupyter_server (option 2), eliminating the duplicate server implementations, to minimize the backports that @lresende pointed out. If it continues to be in 'maintenance mode', then I think the least disruptive option is to make a new package for the frontend-only (option 1), avoiding the need to update this repo with the deprecations, etc. that are required for a smooth transition to backward-incompatible changes of widely used software. The fork also gives more freedom to jupyter-server to make incompatible changes that wouldn't otherwise be acceptable for an in-place upgrade of `notebook`.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/501660345",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-501660345",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 501660345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTY2MDM0NQ==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T11:17:15Z",
    "updated_at": "2019-06-13T11:17:15Z",
    "author_association": "MEMBER",
    "body": "I'm with Min here. I'd prefer a clean break and a conscious migration for users.  However, there are now a large amount of users who expect notebook and lab to interop cleanly, so we'd need to give clear advice to those folks. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/501673509",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-501673509",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 501673509,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTY3MzUwOQ==",
    "user": {
      "login": "rolweber",
      "id": 12234414,
      "node_id": "MDQ6VXNlcjEyMjM0NDE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12234414?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rolweber",
      "html_url": "https://github.com/rolweber",
      "followers_url": "https://api.github.com/users/rolweber/followers",
      "following_url": "https://api.github.com/users/rolweber/following{/other_user}",
      "gists_url": "https://api.github.com/users/rolweber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rolweber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rolweber/subscriptions",
      "organizations_url": "https://api.github.com/users/rolweber/orgs",
      "repos_url": "https://api.github.com/users/rolweber/repos",
      "events_url": "https://api.github.com/users/rolweber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rolweber/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T12:03:30Z",
    "updated_at": "2019-06-13T12:03:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "@minrk Thanks for the clarification, that makes sense. From this point of view, I'd say the best way \"forward\" is to neither fork nor change `notebook`, but to leave it in maintenance mode as it is.\r\n\r\nIt's not the idea of jupyter_server to revive development of notebook and create new features in the frontend, which might give users an incentive to actively switch. And there's a ton of tutorials and blogs out there that currently tell users to install notebook. Users will just keep coming to the classic notebook. If it works for them, why should they switch? Without adding new features, the only way I can see a fork getting a relevant user base is if we could convince Anaconda to include the fork instead of the classic notebook in its releases.\r\n\r\nI see the sweet spot of jupyter_server as a dependency for projects that need a backend with kernels, but that don't want to depend on `notebook` with its classic frontend. We don't have to fork notebook to provide that alternative, nor do we have to update it. If the repository has effectively become inactive, let's just keep it that way. The idea to reduce maintenance effort for notebook by removing the backend code makes no sense if the maintenance effort is lower than the effort for replacing the backend.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/501698477",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-501698477",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 501698477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTY5ODQ3Nw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-13T13:17:31Z",
    "updated_at": "2019-06-13T13:17:31Z",
    "author_association": "MEMBER",
    "body": "@blink1073 that's an excellent point. I think the existing jupyterlab+nb deployments that do exist are going to need to have some updates, and we should be conscientious about having a good upgrade story there as JupyterLab switches over to jupyter-server. Let's try to keep that use case in mind as we move forward to make sure we aren't dropping users through the cracks.\r\n\r\n> Users will just keep coming to the classic notebook.\r\n\r\nAbsolutely. No need to upgrade to new software if you don't need new features.\r\n\r\n> Without adding new features, the only way I can see a fork getting a relevant user base is if we could convince Anaconda to include the fork instead of the classic notebook in its releases.\r\n\r\nI view the nbclassic jupyter-server-extension as something more for hosted deployments like JupyterHub once they switch over to JupyterLab as the primary UI, but have reasons to keep legacy UI available for a smoother transition of longtime users as it will be the way to have multiple UIs with one server instance. I don't imagine it would get or need a whole lot of use from desktop users.\r\n\r\nIf we do come to a consensus that this repo is in maintenance mode (I don't want to presume that this has been established yet), then the main action items on this repo are to clearly state the no-new-features policy and direct folks to the new repos for further development. We'll also have to figure out the right way to resolve what's in master now.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505667567",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-505667567",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 505667567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTY2NzU2Nw==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T00:12:18Z",
    "updated_at": "2019-06-26T00:12:18Z",
    "author_association": "MEMBER",
    "body": "Ok, I'm with @minrk (and others) here. \r\n\r\nI propose that we create a new repo under the jupyter org called something like `notebook_classic` or `notebook_extension`. This will start as a fork of the `notebook` repo. I'll resubmit this PR over there, stripping the repo of server-specific logic and refactoring the notebook client to use jupyter_server's new `ExtensionApp` API. \r\n\r\nThen, I think we clearly state the no-new-features policy (maybe in a pull-request template and the main `README`). \r\n\r\nWhat does everyone else think about that idea? \r\n\r\n@minrk can you request permission to create this new repo from the steering council?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/505688126",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-505688126",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 505688126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNTY4ODEyNg==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-06-26T02:07:41Z",
    "updated_at": "2019-06-26T02:07:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Zsailer thanks for working on this. The main parts of the decision that come to mind for me are:\r\n\r\n* I don't see any way we can make a decision that disables users from running the classic notebook alongside (same server) other frontends (lab, nteract, viola). That will create a lot of pain, especially for organizations running Hub that need to support both for a period of time.\r\n* What is the maintenance load? In spite of the amazing hard work of the classic notebook maintainers, we are already under-resourced in this area. Taking steps that increase this load are going to be painful to absorb.\r\n* What is the migration path for users? There are different types of migration pain: 1) no bug fixes or security patches on the old version, 2) breakage of the old version, 3) time needed to port things to the new new solution, 4) confusion. I doubt there is a path that minimizes all of these things at the same time, but we should be aware of tradeoffs and think about ways to mitigate the pain points we choose to live with.\r\n\r\nI am not sure how these points translate to the options on the table.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/539089368",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-539089368",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 539089368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTA4OTM2OA==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-07T16:12:56Z",
    "updated_at": "2019-10-07T16:12:56Z",
    "author_association": "NONE",
    "body": "@Zsailer Built your [branch](https://github.com/Zsailer/notebook/tree/notebook-ext) and `jupyter server` returns a simple HTML page with `A Jupyter Server is running.` - Any URL I should invoke to get the list of notebooks?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/539091868",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-539091868",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 539091868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTA5MTg2OA==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-07T16:19:23Z",
    "updated_at": "2019-10-07T16:19:37Z",
    "author_association": "MEMBER",
    "body": "@echarles Oops, yes. Change to `/tree`. This branch doesn't have the redirect setup yet. Thanks for reminding me!\r\n\r\nLet me know if this doesn't work.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/539093602",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-539093602",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 539093602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTA5MzYwMg==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-07T16:23:49Z",
    "updated_at": "2019-10-07T16:23:49Z",
    "author_association": "NONE",
    "body": "@Zsailer oh so obvious, I just have guessed that... Good news, notebook can use the latest jupyter-server master! Notebooks are listed and cells can be executed.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/539094651",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-539094651",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 539094651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTA5NDY1MQ==",
    "user": {
      "login": "echarles",
      "id": 226720,
      "node_id": "MDQ6VXNlcjIyNjcyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/echarles",
      "html_url": "https://github.com/echarles",
      "followers_url": "https://api.github.com/users/echarles/followers",
      "following_url": "https://api.github.com/users/echarles/following{/other_user}",
      "gists_url": "https://api.github.com/users/echarles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/echarles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/echarles/subscriptions",
      "organizations_url": "https://api.github.com/users/echarles/orgs",
      "repos_url": "https://api.github.com/users/echarles/repos",
      "events_url": "https://api.github.com/users/echarles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/echarles/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-07T16:26:15Z",
    "updated_at": "2019-10-07T16:26:15Z",
    "author_association": "NONE",
    "body": "@Zsailer `jupyter_server` should be listed in `install_requires` in `setup.py`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/546138576",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-546138576",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 546138576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjEzODU3Ng==",
    "user": {
      "login": "Zsailer",
      "id": 2791223,
      "node_id": "MDQ6VXNlcjI3OTEyMjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2791223?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zsailer",
      "html_url": "https://github.com/Zsailer",
      "followers_url": "https://api.github.com/users/Zsailer/followers",
      "following_url": "https://api.github.com/users/Zsailer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zsailer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zsailer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zsailer/subscriptions",
      "organizations_url": "https://api.github.com/users/Zsailer/orgs",
      "repos_url": "https://api.github.com/users/Zsailer/repos",
      "events_url": "https://api.github.com/users/Zsailer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zsailer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-24T23:15:06Z",
    "updated_at": "2019-10-24T23:15:06Z",
    "author_association": "MEMBER",
    "body": "I have a couple of announcements for people following this thread. \r\n\r\n1. We've created a simple [RoadMap](https://github.com/jupyter/jupyter_server/issues/127) for the Jupyter Server. That roadmap is still up for discussion and review. Feel free to raise concerns there. There are some references to Notebook 7.x in that roadmap.\r\n2. I've created [`Zsailer/nbclassic`](https://github.com/Zsailer/nbclassic). This is a thin package that provides the Jupyter Notebook UI on top of the Jupyter Server. It leverages the [`ExtensionApp` API](https://jupyter-server.readthedocs.io/en/latest/frontends.html) in jupyter_server to make a classic Notebook server extension. You can install this package side-by-side with jupyter/notebook and it will use the Javascript and HTML templates in jupyter/notebook to serve the classic notebook UI. \r\n    * You can install from PyPI today, `pip install jupyter_server notebook nbclassic`. \r\n    * And run by calling `jupyter nbclassic` and going to `http://localhost:8888/tree?token=`",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/548139031",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-548139031",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 548139031,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODEzOTAzMQ==",
    "user": {
      "login": "ellisonbg",
      "id": 27600,
      "node_id": "MDQ6VXNlcjI3NjAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/27600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellisonbg",
      "html_url": "https://github.com/ellisonbg",
      "followers_url": "https://api.github.com/users/ellisonbg/followers",
      "following_url": "https://api.github.com/users/ellisonbg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellisonbg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellisonbg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellisonbg/subscriptions",
      "organizations_url": "https://api.github.com/users/ellisonbg/orgs",
      "repos_url": "https://api.github.com/users/ellisonbg/repos",
      "events_url": "https://api.github.com/users/ellisonbg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellisonbg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T22:26:47Z",
    "updated_at": "2019-10-30T22:26:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think the nbclassic idea is brilliant!\n\nOn Thu, Oct 24, 2019 at 4:15 PM Zachary Sailer <notifications@github.com>\nwrote:\n\n> I have a couple of announcements for people following this thread.\n>\n>    1. We've created a simple RoadMap\n>    <https://github.com/jupyter/jupyter_server/issues/127> for the Jupyter\n>    Server. That roadmap is still up for discussion and review. Feel free to\n>    raise concerns there. There are some references to Notebook 7.x in that\n>    roadmap.\n>    2. I've created Zsailer/nbclassic\n>    <https://github.com/Zsailer/nbclassic>. This is a thin package that\n>    provides the Jupyter Notebook UI on top of the Jupyter Server. It leverages\n>    the ExtensionApp API\n>    <https://jupyter-server.readthedocs.io/en/latest/frontends.html> in\n>    jupyter_server to make a classic Notebook server extension. You can install\n>    this package side-by-side with jupyter/notebook and it will use the\n>    Javascript and HTML templates in jupyter/notebook to serve the classic\n>    notebook UI.\n>       - You can install from PyPI today, pip install jupyter_server\n>       notebook nbclassic.\n>       - And run by calling jupyter nbclassic and going to\n>       http://localhost:8888/tree?token=\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/jupyter/notebook/pull/4653?email_source=notifications&email_token=AAAGXUDS5ZJCT4CBYD477UTQQIUAXA5CNFSM4HSQVME2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECGWTUA#issuecomment-546138576>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAAGXUCR7ZAHAFHVCOHQ2M3QQIUAXANCNFSM4HSQVMEQ>\n> .\n>\n\n\n-- \nBrian E. Granger\n\nPrincipal Technical Program Manager, AWS AI Platform (brgrange@amazon.com)\nOn Leave - Professor of Physics and Data Science, Cal Poly\n@ellisonbg on GitHub\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/640202981",
    "html_url": "https://github.com/jupyter/notebook/pull/4653#issuecomment-640202981",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4653",
    "id": 640202981,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDIwMjk4MQ==",
    "user": {
      "login": "blink1073",
      "id": 2096628,
      "node_id": "MDQ6VXNlcjIwOTY2Mjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2096628?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blink1073",
      "html_url": "https://github.com/blink1073",
      "followers_url": "https://api.github.com/users/blink1073/followers",
      "following_url": "https://api.github.com/users/blink1073/following{/other_user}",
      "gists_url": "https://api.github.com/users/blink1073/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blink1073/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blink1073/subscriptions",
      "organizations_url": "https://api.github.com/users/blink1073/orgs",
      "repos_url": "https://api.github.com/users/blink1073/repos",
      "events_url": "https://api.github.com/users/blink1073/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blink1073/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-07T11:30:37Z",
    "updated_at": "2020-06-07T11:30:37Z",
    "author_association": "MEMBER",
    "body": "Closing in favor of the `nbclassic` approach.  Thanks @Zsailer!",
    "performed_via_github_app": null
  }
]
