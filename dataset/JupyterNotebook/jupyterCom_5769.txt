[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/698660764",
    "html_url": "https://github.com/jupyter/notebook/pull/5769#issuecomment-698660764",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5769",
    "id": 698660764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODY2MDc2NA==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-25T00:49:33Z",
    "updated_at": "2020-09-25T00:49:33Z",
    "author_association": "MEMBER",
    "body": "Hi @hrnciar - thank you for submitting this pull request.\r\n\r\nThe reason for the lazy import is because server extension authors use this module as a library and moving the import to a broader scope was forcing them to unnecessarily install `requests_unixsocket` - otherwise breaking their CI.\r\n\r\nWe added `requests_unixsocket` to the extras_require for 'test' and it seems that your workflow should perform the requisite `pip install notebook[test]` command prior to running tests - similar to [what CI is doing](https://github.com/jupyter/notebook/blob/master/.travis.yml#L50).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/698737008",
    "html_url": "https://github.com/jupyter/notebook/pull/5769#issuecomment-698737008",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5769",
    "id": 698737008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODczNzAwOA==",
    "user": {
      "login": "frenzymadness",
      "id": 5688939,
      "node_id": "MDQ6VXNlcjU2ODg5Mzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5688939?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frenzymadness",
      "html_url": "https://github.com/frenzymadness",
      "followers_url": "https://api.github.com/users/frenzymadness/followers",
      "following_url": "https://api.github.com/users/frenzymadness/following{/other_user}",
      "gists_url": "https://api.github.com/users/frenzymadness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frenzymadness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frenzymadness/subscriptions",
      "organizations_url": "https://api.github.com/users/frenzymadness/orgs",
      "repos_url": "https://api.github.com/users/frenzymadness/repos",
      "events_url": "https://api.github.com/users/frenzymadness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frenzymadness/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-25T05:58:34Z",
    "updated_at": "2020-09-25T05:58:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "That makes perfect sense. What we are trying to accomplish is that a missing dependency in tests is not reported as `TimeoutError(\"The notebook server didn't start up correctly.\")` from `wait_until_alive()`.\r\n\r\nIf we cannot move the import to the module level. It might make sense to change the bare `Exception` to something more specific in this method as previously mentioned.\r\n\r\nWhat do you think?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/698941736",
    "html_url": "https://github.com/jupyter/notebook/pull/5769#issuecomment-698941736",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5769",
    "id": 698941736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODk0MTczNg==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-25T13:52:48Z",
    "updated_at": "2020-09-25T13:52:48Z",
    "author_association": "MEMBER",
    "body": "I see value in that, but rather than potentially break existing reasons to wait, how about checking for `ModuleNotFoundError` first and let it produce a fatal, but appropriate, message, and let the bare exception act as a fallback. I think that stands the least risk of introducing surprises at this point.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/701952806",
    "html_url": "https://github.com/jupyter/notebook/pull/5769#issuecomment-701952806",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/5769",
    "id": 701952806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTk1MjgwNg==",
    "user": {
      "login": "hrnciar",
      "id": 13086088,
      "node_id": "MDQ6VXNlcjEzMDg2MDg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/13086088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hrnciar",
      "html_url": "https://github.com/hrnciar",
      "followers_url": "https://api.github.com/users/hrnciar/followers",
      "following_url": "https://api.github.com/users/hrnciar/following{/other_user}",
      "gists_url": "https://api.github.com/users/hrnciar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hrnciar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hrnciar/subscriptions",
      "organizations_url": "https://api.github.com/users/hrnciar/orgs",
      "repos_url": "https://api.github.com/users/hrnciar/repos",
      "events_url": "https://api.github.com/users/hrnciar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hrnciar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-01T07:41:47Z",
    "updated_at": "2020-10-01T07:41:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kevin-bates, I have updated PR with `ModuleNotFoundError` exception. ",
    "performed_via_github_app": null
  }
]
