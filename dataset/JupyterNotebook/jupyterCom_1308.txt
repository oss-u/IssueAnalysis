[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/206467537",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-206467537",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 206467537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQ2NzUzNw==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T17:06:22Z",
    "updated_at": "2016-04-06T17:06:22Z",
    "author_association": "MEMBER",
    "body": "The options I use in node for the server piece is:\n\n``` js\nconst options = {\n  key: process.env.SERVER_KEY,\n  cert: process.env.SERVER_CERT,\n  ca: process.env.CA,\n  requestCert: true, \n  rejectUnauthorized: true,\n};\n```\n\nThe pertinent options for certs there are the key, cert, and a strict setting of only one CA - the one we the users control. As for strictness, it's these two options:\n- `requestCert` - the server will request a certificate from clients that connect and attempt to verify the certificate\n- `rejectUnauthorized` - the server will reject any connection which is not authorized with the configured CA. For the client, the server certificate is verified against the list of supplied CAs.\n\nIt's not clear to me what options we need in Tornado, seemed like I need to build an SSL Context via Python stdlib, exposing the options up to the notebook server.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/206477621",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-206477621",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 206477621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQ3NzYyMQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T17:29:46Z",
    "updated_at": "2016-04-06T17:29:46Z",
    "author_association": "MEMBER",
    "body": "@rgbkrk thanks for writing this up! Do you think we should do this in the single-user server subclass for JupyterHub, or add it to the base notebook server in general?\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/206478066",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-206478066",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 206478066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQ3ODA2Ng==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T17:30:27Z",
    "updated_at": "2016-04-06T17:30:27Z",
    "author_association": "MEMBER",
    "body": "Add it to the base notebook server in general.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/206480295",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-206480295",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 206480295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQ4MDI5NQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T17:34:42Z",
    "updated_at": "2016-04-06T17:34:42Z",
    "author_association": "MEMBER",
    "body": "If it's in the base notebook server, then users at organizations that use strict PKI for auth can use this to launch their own notebook server and access it from their browser.\n\nThe other use case is the ability to launch a notebook server remotely and connect to it with a local client (yes, I'm hinting at an Electron app).\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/206482817",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-206482817",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 206482817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQ4MjgxNw==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T17:40:30Z",
    "updated_at": "2016-04-06T17:40:30Z",
    "author_association": "MEMBER",
    "body": "Cool, makes sense. The Python SSL options are [here](https://docs.python.org/3/library/ssl.html#ssl.SSLContext). It looks like `rejectUnauthorized` is\n\n``` python\nSSLContext.verify_mode = ssl.CERT_REQUIRED\n```\n\nI honestly can't tell what the `requestCert` step would be, but it seems to have something to do with `Purpose.CLIENT_AUTH`. Possibly \n\n``` python\nSSLContext.load_verify_locations(cafile='cert.pem')\n```\n\nIt's not clear to me, but it would _seem_ that the ssl_options dict won't be enough, and that some methods will need to be called to set these options.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/206483989",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-206483989",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 206483989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjQ4Mzk4OQ==",
    "user": {
      "login": "minrk",
      "id": 151929,
      "node_id": "MDQ6VXNlcjE1MTkyOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/151929?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/minrk",
      "html_url": "https://github.com/minrk",
      "followers_url": "https://api.github.com/users/minrk/followers",
      "following_url": "https://api.github.com/users/minrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/minrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/minrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/minrk/subscriptions",
      "organizations_url": "https://api.github.com/users/minrk/orgs",
      "repos_url": "https://api.github.com/users/minrk/repos",
      "events_url": "https://api.github.com/users/minrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/minrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-06T17:43:42Z",
    "updated_at": "2016-04-06T17:43:42Z",
    "author_association": "MEMBER",
    "body": "Using PKI for a local app makes great sense, thanks.\n\nSSLContext is new in Python 3, but backported to 2.7.9, so we should either require Python 3 to do this, or at least 2.7.9. In either case, we should probably rely on SSLContext for this, and not the pre-SSLContext APIs.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/217648392",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-217648392",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 217648392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzY0ODM5Mg==",
    "user": {
      "login": "mokus0",
      "id": 607740,
      "node_id": "MDQ6VXNlcjYwNzc0MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/607740?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mokus0",
      "html_url": "https://github.com/mokus0",
      "followers_url": "https://api.github.com/users/mokus0/followers",
      "following_url": "https://api.github.com/users/mokus0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mokus0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mokus0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mokus0/subscriptions",
      "organizations_url": "https://api.github.com/users/mokus0/orgs",
      "repos_url": "https://api.github.com/users/mokus0/repos",
      "events_url": "https://api.github.com/users/mokus0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mokus0/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-07T16:19:58Z",
    "updated_at": "2016-05-07T16:19:58Z",
    "author_association": "NONE",
    "body": "For what it's worth, I've been playing with running a notebook behind an nginx reverse proxy (since it's sharing an IP with some other services) using client certificates.  It's a very convenient way to do basic access control, except Safari doesn't appear to support client certificates via wss.  It works fine in Firefox but I haven't tried Chrome.\n\nAre the kernels' WebSockets endpoints protected in any way that would make it safe to expose them over TLS without client authentication, under the assumption that the notebook is already access-controlled?  I dug into the code a bit and didn't see anything, but I'm not familiar with tornado so I may have missed something.\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/254275381",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-254275381",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 254275381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDI3NTM4MQ==",
    "user": {
      "login": "rgbkrk",
      "id": 836375,
      "node_id": "MDQ6VXNlcjgzNjM3NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/836375?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rgbkrk",
      "html_url": "https://github.com/rgbkrk",
      "followers_url": "https://api.github.com/users/rgbkrk/followers",
      "following_url": "https://api.github.com/users/rgbkrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgbkrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rgbkrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgbkrk/subscriptions",
      "organizations_url": "https://api.github.com/users/rgbkrk/orgs",
      "repos_url": "https://api.github.com/users/rgbkrk/repos",
      "events_url": "https://api.github.com/users/rgbkrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rgbkrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-17T17:28:16Z",
    "updated_at": "2016-10-17T17:28:16Z",
    "author_association": "MEMBER",
    "body": "@captainsafia ^^ good issue to look at and think on for remote kernels (launching on a remote docker host for instance)\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/450225302",
    "html_url": "https://github.com/jupyter/notebook/issues/1308#issuecomment-450225302",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/1308",
    "id": 450225302,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDIyNTMwMg==",
    "user": {
      "login": "yuvipanda",
      "id": 30430,
      "node_id": "MDQ6VXNlcjMwNDMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/30430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuvipanda",
      "html_url": "https://github.com/yuvipanda",
      "followers_url": "https://api.github.com/users/yuvipanda/followers",
      "following_url": "https://api.github.com/users/yuvipanda/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuvipanda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuvipanda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuvipanda/subscriptions",
      "organizations_url": "https://api.github.com/users/yuvipanda/orgs",
      "repos_url": "https://api.github.com/users/yuvipanda/repos",
      "events_url": "https://api.github.com/users/yuvipanda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuvipanda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-27T20:26:59Z",
    "updated_at": "2018-12-27T20:26:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "https://github.com/jupyterhub/jupyterhub/issues/370 implements this in JupyterHub.",
    "performed_via_github_app": null
  }
]
