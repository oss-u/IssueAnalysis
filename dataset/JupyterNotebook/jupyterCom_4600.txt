[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488298603",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488298603",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488298603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODI5ODYwMw==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T14:32:47Z",
    "updated_at": "2019-05-01T14:32:47Z",
    "author_association": "MEMBER",
    "body": "The set of environment variables available to a running notebook are captured at the time the notebook is opened (i.e., when the underlying kernel process is started).  These variables come directly from the Notebook Server process (as well as any configured in the `env:` stanza of the kernelspec json file) which are _static once the Notebook Server process starts_.\r\n\r\n>Although I am able to set the variables successfully\r\n\r\nIt's not clear to me what this step consists of but I suspect the Notebook Server process has already started.\r\n\r\nUnless there's something else going on, you'll need to start your docker container using `docker run ... -e ENV1=val1 -e ENV2=val2 ...` to convey user-specifc envs to the Notebook Server instance, which then flow to the kernel process. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488312053",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488312053",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488312053,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODMxMjA1Mw==",
    "user": {
      "login": "IamViditAgarwal",
      "id": 43881643,
      "node_id": "MDQ6VXNlcjQzODgxNjQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/43881643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IamViditAgarwal",
      "html_url": "https://github.com/IamViditAgarwal",
      "followers_url": "https://api.github.com/users/IamViditAgarwal/followers",
      "following_url": "https://api.github.com/users/IamViditAgarwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/IamViditAgarwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IamViditAgarwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IamViditAgarwal/subscriptions",
      "organizations_url": "https://api.github.com/users/IamViditAgarwal/orgs",
      "repos_url": "https://api.github.com/users/IamViditAgarwal/repos",
      "events_url": "https://api.github.com/users/IamViditAgarwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IamViditAgarwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T15:18:37Z",
    "updated_at": "2019-05-01T15:18:37Z",
    "author_association": "NONE",
    "body": "> The set of environment variables available to a running notebook are captured at the time the notebook is opened (i.e., when the underlying kernel process is started). These variables come directly from the Notebook Server process (as well as any configured in the `env:` stanza of the kernelspec json file) which are _static once the Notebook Server process starts_.\r\n> \r\n> > Although I am able to set the variables successfully\r\n> \r\n> It's not clear to me what this step consists of but I suspect the Notebook Server process has already started.\r\n> \r\n> Unless there's something else going on, you'll need to start your docker container using `docker run ... -e ENV1=val1 -e ENV2=val2 ...` to convey user-specifc envs to the Notebook Server instance, which then flow to the kernel process.\r\n\r\nIsnt there a way where I can reflect the new env variables , without restarting the docker container. Bcz In my setting, I cant just restart the docker container with new values. I have to do in the running container only",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488331262",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488331262",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488331262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODMzMTI2Mg==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T16:22:35Z",
    "updated_at": "2019-05-01T16:22:35Z",
    "author_association": "MEMBER",
    "body": "Not really.  I suppose you could mount the directory where the kernelspec (kernel.json) file is located and create/modify the file's `env:` stanza (or edit that file via `docker exec`).  Those variables would then apply to _next_ launch of that particular kernel.  But that's quite a hack.\r\n\r\nSounds like you could use a form of _paramaterized kernels_ where certain values are provided on a per-kernel basis.  These do not exist (to my knowledge), but there's been momentum building for this kind of feature. We should make sure environment variables are part of that effort.\r\n\r\nFWIW, env variables are fairly static in nature since they are typically 'set' once the process starts.  As a result, they aren't a very good fit for dynamic behaviors within a single application.  Can you explain your use case a bit further?  Perhaps there are other alternatives.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488333889",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488333889",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488333889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODMzMzg4OQ==",
    "user": {
      "login": "IamViditAgarwal",
      "id": 43881643,
      "node_id": "MDQ6VXNlcjQzODgxNjQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/43881643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IamViditAgarwal",
      "html_url": "https://github.com/IamViditAgarwal",
      "followers_url": "https://api.github.com/users/IamViditAgarwal/followers",
      "following_url": "https://api.github.com/users/IamViditAgarwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/IamViditAgarwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IamViditAgarwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IamViditAgarwal/subscriptions",
      "organizations_url": "https://api.github.com/users/IamViditAgarwal/orgs",
      "repos_url": "https://api.github.com/users/IamViditAgarwal/repos",
      "events_url": "https://api.github.com/users/IamViditAgarwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IamViditAgarwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T16:31:48Z",
    "updated_at": "2019-05-01T16:31:48Z",
    "author_association": "NONE",
    "body": "> Not really. I suppose you could mount the directory where the kernelspec (kernel.json) file is located and create/modify the file's `env:` stanza (or edit that file via `docker exec`). Those variables would then apply to _next_ launch of that particular kernel. But that's quite a hack.\r\n> \r\n> Sounds like you could use a form of _paramaterized kernels_ where certain values are provided on a per-kernel basis. These do not exist (to my knowledge), but there's been momentum building for this kind of feature. We should make sure environment variables are part of that effort.\r\n> \r\n> FWIW, env variables are fairly static in nature since they are typically 'set' once the process starts. As a result, they aren't a very good fit for dynamic behaviors within a single application. Can you explain your use case a bit further? Perhaps there are other alternatives.\r\n\r\n\r\nLet me explain you my case:\r\nSo , In my scenario: THere is a variable called TOKEN  whose value is set as the environment variable  when the docker starts. But the value of this TOKEN variable gets expired after a hour. So, I have made a service that runs in the background of the docker to update the value of TOKEN. Now, the issue is when I update the value of a TOKEN variable in background. Jupyter Notebook is not able to get the updated value. It is taking the older value.\r\n\r\nThis is my whole issue",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488341867",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488341867",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488341867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODM0MTg2Nw==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T16:58:41Z",
    "updated_at": "2019-05-01T16:58:41Z",
    "author_association": "MEMBER",
    "body": "I see, thank you.  So this TOKEN value needs to be _current_ and reside in the environment of the kernel - which requires the current value to perform its operations?\r\n\r\nAssuming that's correct.  One approach would be to have your background service instead write the updated TOKEN value to a file (local in the container) and modify the kernelspec to instead invoke a shell script that source's the file prior to launching the kernel.\r\n\r\nFor example, the service writes the following to `/path/to/token_file`: `TOKEN=my-token-for-use-in-the-kernel`.  Then, the kernel.json file for your kernel is modified to something like the following (I've added an `env:` stanza for example purposes and changed the display name that would appear in the Notebook UI):\r\n```json\r\n{\r\n \"argv\": [\r\n  \"/usr/local/share/jupyter/kernels/python3_token/run.sh\",\r\n  \"/opt/anaconda3/envs/notebook-dev/bin/python\",\r\n  \"-m\",\r\n  \"ipykernel_launcher\",\r\n  \"-f\",\r\n  \"{connection_file}\"\r\n ],\r\n \"env\": {\r\n  \"MY_PER_KERNEL_ENV\": \"MY_PER_KERNEL_VALUE\"\r\n },\r\n \"display_name\": \"Python 3 with token\",\r\n \"language\": \"python\"\r\n}\r\n```\r\nI also assume your `kernel.json` is located in `/usr/local/share/jupyter/kernels/python3_token`.  Then `run.sh` would resemble the following...\r\n```bash\r\n#!/bin/bash\r\nsource /path/to/token_file\r\n$* \r\n```\r\nI hope that helps.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488353859",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488353859",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488353859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODM1Mzg1OQ==",
    "user": {
      "login": "kevin-bates",
      "id": 22599560,
      "node_id": "MDQ6VXNlcjIyNTk5NTYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/22599560?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-bates",
      "html_url": "https://github.com/kevin-bates",
      "followers_url": "https://api.github.com/users/kevin-bates/followers",
      "following_url": "https://api.github.com/users/kevin-bates/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-bates/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-bates/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-bates/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-bates/orgs",
      "repos_url": "https://api.github.com/users/kevin-bates/repos",
      "events_url": "https://api.github.com/users/kevin-bates/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-bates/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-01T17:39:29Z",
    "updated_at": "2019-05-01T17:39:29Z",
    "author_association": "MEMBER",
    "body": "Just noticed that if you're going to use `source` you'll probably want the file entries to include `export` prior to the assignment, else it doesn't look like its available to the kernel.  Note also that this could be a general set of envs if there are others you need (and you're using the `source` approach).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/488554633",
    "html_url": "https://github.com/jupyter/notebook/issues/4600#issuecomment-488554633",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/4600",
    "id": 488554633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODU1NDYzMw==",
    "user": {
      "login": "IamViditAgarwal",
      "id": 43881643,
      "node_id": "MDQ6VXNlcjQzODgxNjQz",
      "avatar_url": "https://avatars.githubusercontent.com/u/43881643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/IamViditAgarwal",
      "html_url": "https://github.com/IamViditAgarwal",
      "followers_url": "https://api.github.com/users/IamViditAgarwal/followers",
      "following_url": "https://api.github.com/users/IamViditAgarwal/following{/other_user}",
      "gists_url": "https://api.github.com/users/IamViditAgarwal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/IamViditAgarwal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/IamViditAgarwal/subscriptions",
      "organizations_url": "https://api.github.com/users/IamViditAgarwal/orgs",
      "repos_url": "https://api.github.com/users/IamViditAgarwal/repos",
      "events_url": "https://api.github.com/users/IamViditAgarwal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/IamViditAgarwal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-05-02T05:07:40Z",
    "updated_at": "2019-05-02T05:07:40Z",
    "author_association": "NONE",
    "body": "> I see, thank you. So this TOKEN value needs to be _current_ and reside in the environment of the kernel - which requires the current value to perform its operations?\r\n> \r\n> Assuming that's correct. One approach would be to have your background service instead write the updated TOKEN value to a file (local in the container) and modify the kernelspec to instead invoke a shell script that source's the file prior to launching the kernel.\r\n> \r\n> For example, the service writes the following to `/path/to/token_file`: `TOKEN=my-token-for-use-in-the-kernel`. Then, the kernel.json file for your kernel is modified to something like the following (I've added an `env:` stanza for example purposes and changed the display name that would appear in the Notebook UI):\r\n> \r\n> ```json\r\n> {\r\n>  \"argv\": [\r\n>   \"/usr/local/share/jupyter/kernels/python3_token/run.sh\",\r\n>   \"/opt/anaconda3/envs/notebook-dev/bin/python\",\r\n>   \"-m\",\r\n>   \"ipykernel_launcher\",\r\n>   \"-f\",\r\n>   \"{connection_file}\"\r\n>  ],\r\n>  \"env\": {\r\n>   \"MY_PER_KERNEL_ENV\": \"MY_PER_KERNEL_VALUE\"\r\n>  },\r\n>  \"display_name\": \"Python 3 with token\",\r\n>  \"language\": \"python\"\r\n> }\r\n> ```\r\n> \r\n> I also assume your `kernel.json` is located in `/usr/local/share/jupyter/kernels/python3_token`. Then `run.sh` would resemble the following...\r\n> \r\n> ```shell\r\n> #!/bin/bash\r\n> source /path/to/token_file\r\n> $* \r\n> ```\r\n> \r\n> I hope that helps.\r\n\r\nOhk , Thanks .. I will try your solution once and will let u know",
    "performed_via_github_app": null
  }
]
