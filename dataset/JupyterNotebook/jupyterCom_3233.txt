[
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/358600155",
    "html_url": "https://github.com/jupyter/notebook/issues/3233#issuecomment-358600155",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3233",
    "id": 358600155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODYwMDE1NQ==",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T10:12:06Z",
    "updated_at": "2018-01-18T10:12:06Z",
    "author_association": "MEMBER",
    "body": "@Carreau and @KesterTong already built something like this called [MixedContentsManager](https://github.com/jupyter/jupyter-drive/blob/master/jupyterdrive/mixednbmanager.py) as part of a project to integrate Jupyter with Google Drive. It hasn't been touched for a while, but maybe there's something useful to work with there.\r\n\r\nFrom the notebook's point of view, I think it's fine to do this entirely within the ContentsManager, which is already pluggable. So I'd suggest building it as a separate thing for now, and then proposing it for inclusion in `notebook` once it's working nicely.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/358665731",
    "html_url": "https://github.com/jupyter/notebook/issues/3233#issuecomment-358665731",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3233",
    "id": 358665731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODY2NTczMQ==",
    "user": {
      "login": "Carreau",
      "id": 335567,
      "node_id": "MDQ6VXNlcjMzNTU2Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/335567?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Carreau",
      "html_url": "https://github.com/Carreau",
      "followers_url": "https://api.github.com/users/Carreau/followers",
      "following_url": "https://api.github.com/users/Carreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/Carreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Carreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Carreau/subscriptions",
      "organizations_url": "https://api.github.com/users/Carreau/orgs",
      "repos_url": "https://api.github.com/users/Carreau/repos",
      "events_url": "https://api.github.com/users/Carreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Carreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T14:39:14Z",
    "updated_at": "2018-01-18T14:39:14Z",
    "author_association": "MEMBER",
    "body": "Yep there was some plan to make the mixed content manager the default, and just allow to add/remove extra content managers. @ian-r-rose may have also worked on that with his github and google drive plugins for JupyterLab.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/358703785",
    "html_url": "https://github.com/jupyter/notebook/issues/3233#issuecomment-358703785",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3233",
    "id": 358703785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODcwMzc4NQ==",
    "user": {
      "login": "ian-r-rose",
      "id": 5728311,
      "node_id": "MDQ6VXNlcjU3MjgzMTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5728311?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ian-r-rose",
      "html_url": "https://github.com/ian-r-rose",
      "followers_url": "https://api.github.com/users/ian-r-rose/followers",
      "following_url": "https://api.github.com/users/ian-r-rose/following{/other_user}",
      "gists_url": "https://api.github.com/users/ian-r-rose/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ian-r-rose/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ian-r-rose/subscriptions",
      "organizations_url": "https://api.github.com/users/ian-r-rose/orgs",
      "repos_url": "https://api.github.com/users/ian-r-rose/repos",
      "events_url": "https://api.github.com/users/ian-r-rose/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ian-r-rose/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T16:37:10Z",
    "updated_at": "2018-01-18T16:37:10Z",
    "author_association": "MEMBER",
    "body": "Yes, I have worked on a client-side approach to this in JupyterLab, which dispatches requests to different storage backends, each of which implements the Contents API. This is currently used for the JupyterLab [Google Drive](https://github.com/jupyterlab/jupyterlab-google-drive) and [GitHub](https://github.com/jupyterlab/jupyterlab-github) plugins.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/jupyter/notebook/issues/comments/358746637",
    "html_url": "https://github.com/jupyter/notebook/issues/3233#issuecomment-358746637",
    "issue_url": "https://api.github.com/repos/jupyter/notebook/issues/3233",
    "id": 358746637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODc0NjYzNw==",
    "user": {
      "login": "mlucool",
      "id": 1813603,
      "node_id": "MDQ6VXNlcjE4MTM2MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1813603?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mlucool",
      "html_url": "https://github.com/mlucool",
      "followers_url": "https://api.github.com/users/mlucool/followers",
      "following_url": "https://api.github.com/users/mlucool/following{/other_user}",
      "gists_url": "https://api.github.com/users/mlucool/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mlucool/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mlucool/subscriptions",
      "organizations_url": "https://api.github.com/users/mlucool/orgs",
      "repos_url": "https://api.github.com/users/mlucool/repos",
      "events_url": "https://api.github.com/users/mlucool/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mlucool/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T18:57:47Z",
    "updated_at": "2018-01-18T18:57:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "This code is a WIP but does work:\r\n\r\nA ContentsManager that passes to other ContentsManagers who also have a manages_path function:\r\n```\r\nfrom notebook.services.contents.filemanager import ContentsManager\r\n\r\ndef make_dispatched(self, function):\r\n    \"\"\"\r\n    This function inspects a function and dispatches it out by finding which\r\n    arg is the path, then finding a manager to manage that path and forwarding\r\n    this on\r\n    \"\"\"\r\n    # functions passed here have self in it, when it's called its bound so -1 for no self\r\n    path_idx = inspect.getargspec(function)[0].index('path') - 1\r\n\r\n    def wrapper(*args, **kwargs):\r\n        path = kwargs['path'] if 'path' in kwargs else args[path_idx]\r\n        for manager in self.managers:\r\n            if manager.manages_path(path):\r\n                fn = getattr(manager, function.__name__)\r\n                return fn(*args, **kwargs)\r\n        # This self is jupyter's\r\n        self.log.error(\"Could not find manager for path %s\", path)\r\n        raise Exception('Could not find manager for path \"%s\"' % path)\r\n\r\n    return wrapper\r\n\r\n\r\n_managers = None\r\ndef set_managers(managers):\r\n    \"\"\"\r\n    We need a global list because I dont see where to pass this data to juptyer->manager\r\n    \"\"\"\r\n    global _managers\r\n    _managers = managers\r\n\r\n\r\nclass DispatchedContentsManager(ContentsManager):\r\n    def __init__(self, **kwargs):\r\n        global _managers\r\n        self.managers = []\r\n        for manager in _managers:\r\n            # Init each manger with the same params\r\n            inst = manager(**kwargs)\r\n            if not hasattr(inst, 'manages_path'):\r\n                raise RuntimeError('Count not find method manages_path in manager!')\r\n            self.managers.append(inst)\r\n\r\n        # FIXME: add support for rename_file! This does not follow the pattern below\r\n        for name, method in inspect.getmembers(self,\r\n                                               predicate=inspect.ismethod):\r\n            if (not name.startswith('_') and\r\n                        'path' in inspect.getargspec(method)[0]):\r\n                setattr(self, name, make_dispatched(self, method))\r\n```\r\n\r\nExample manager (typically manages_path has a regexp in it):\r\n```\r\nfrom notebook.services.contents.filemanager import FileContentsManager\r\n\r\nclass DefaultFileManager(FileContentsManager):\r\n    \"\"\"\r\n    A fallback manager to be used for all files\r\n    \"\"\"\r\n\r\n    def manages_path(self, path):\r\n        return True\r\n```\r\n\r\nNow in a jupyter config:\r\n```\r\nset_managers([DefaultFileManager]) # Pass in the class\r\n```\r\n\r\nAny suggestions?",
    "performed_via_github_app": null
  }
]
